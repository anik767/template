%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: Abstract liquid banners 2 up-01.eps
%%Creator: Adobe Illustrator(R) 23.0
%%For: Ayib
%%CreationDate: 3/19/19
%%BoundingBox: 0 0 500 500
%%HiResBoundingBox: 0 0 500 500
%%CropBox: 0 0 500 500
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 23.0.2%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 23.0.2 x567 R agm 4.7767 ct 5.4352%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c145 79.163499, 2018/08/13-16:40:22        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
            xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Abstract liquid banners 2 up-01</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:MetadataDate>2019-03-19T23:42:48+07:00</xmp:MetadataDate>
         <xmp:ModifyDate>2019-03-19T23:42:48+07:00</xmp:ModifyDate>
         <xmp:CreateDate>2019-03-19T23:42:48+07:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC 23.0 (Macintosh)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEBIAEgAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABABIAAAAAEA&#xA;AQEgAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9RZJDsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;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&#xA;uxV2Kv8A/9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:e6a06a91-86b7-422c-84f3-d935d511d3c7</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:e6a06a91-86b7-422c-84f3-d935d511d3c7</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:17f1e520-01ac-0b40-8c64-76ff4ee40ebd</stRef:instanceID>
            <stRef:documentID>xmp.did:ee5b3dea-5302-49c5-8f71-0edca08baec1</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:9055feea-6df3-418a-84b0-35eb367eec15</stEvt:instanceID>
                  <stEvt:when>2016-04-18T22:41:34+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:e6a06a91-86b7-422c-84f3-d935d511d3c7</stEvt:instanceID>
                  <stEvt:when>2019-03-19T23:42:48+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 23.0 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>500.000000</stDim:w>
            <stDim:h>500.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>FiraSans-Light</stFnt:fontName>
                  <stFnt:fontFamily>Fira Sans</stFnt:fontFamily>
                  <stFnt:fontFace>Light</stFnt:fontFace>
                  <stFnt:fontType>Open Type</stFnt:fontType>
                  <stFnt:versionString>Version 4.203;PS 004.203;hotconv 1.0.88;makeotf.lib2.5.64775</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>FiraSans-Light.otf</stFnt:fontFileName>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>FiraSans-Medium</stFnt:fontName>
                  <stFnt:fontFamily>Fira Sans</stFnt:fontFamily>
                  <stFnt:fontFace>Medium</stFnt:fontFace>
                  <stFnt:fontType>Open Type</stFnt:fontType>
                  <stFnt:versionString>Version 4.203;PS 004.203;hotconv 1.0.88;makeotf.lib2.5.64775</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>FiraSans-Medium.otf</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xmpTPg:Fonts>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Color Group 1</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=24 G=87 B=189 1</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>24</xmpG:red>
                           <xmpG:green>87</xmpG:green>
                           <xmpG:blue>189</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Grays</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=100</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=90</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>65</xmpG:red>
                           <xmpG:green>64</xmpG:green>
                           <xmpG:blue>66</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=80</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>88</xmpG:red>
                           <xmpG:green>89</xmpG:green>
                           <xmpG:blue>91</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=70</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>109</xmpG:red>
                           <xmpG:green>110</xmpG:green>
                           <xmpG:blue>113</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=60</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>128</xmpG:red>
                           <xmpG:green>130</xmpG:green>
                           <xmpG:blue>133</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=50</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>147</xmpG:red>
                           <xmpG:green>149</xmpG:green>
                           <xmpG:blue>152</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=40</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>167</xmpG:red>
                           <xmpG:green>169</xmpG:green>
                           <xmpG:blue>172</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=30</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>188</xmpG:red>
                           <xmpG:green>190</xmpG:green>
                           <xmpG:blue>192</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=20</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>209</xmpG:red>
                           <xmpG:green>211</xmpG:green>
                           <xmpG:blue>212</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=10</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>230</xmpG:red>
                           <xmpG:green>231</xmpG:green>
                           <xmpG:blue>232</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=5</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>241</xmpG:red>
                           <xmpG:green>242</xmpG:green>
                           <xmpG:blue>242</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Freepik logo</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=165 G=183 B=198</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>165</xmpG:red>
                           <xmpG:green>183</xmpG:green>
                           <xmpG:blue>198</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=249 G=251 B=252</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>249</xmpG:red>
                           <xmpG:green>251</xmpG:green>
                           <xmpG:blue>252</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 15.00</pdf:Producer>
         <pdfx:CreatorVersion>21.0.0</pdfx:CreatorVersion>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -500 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 500 li
500 500 li
500 0 li
cp
clp
500 500 mo
0 500 li
0 0 li
500 0 li
500 500 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
.0154421 .00189212 .00241093 0 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
52.6528 181.823 mo
60.6514 186.131 70.1157 186.282 77.8516 191.147 cv
87.5352 197.237 92.4795 209.257 97.4253 220.198 cv
102.371 231.139 109.025 242.75 119.718 246.086 cv
130.984 249.6 142.549 242.463 150.685 233.599 cv
158.82 224.734 165.231 213.816 174.741 206.756 cv
185.141 199.034 198.093 196.756 210.083 192.433 cv
222.072 188.109 234.342 180.354 238.086 167.162 cv
242.172 152.766 234.142 136.432 222.436 127.922 cv
210.73 119.412 196.261 117.214 182.372 116.696 cv
174.107 116.388 165.029 116.278 158.661 110.336 cv
152.106 104.219 150.66 94.0254 146.91 85.5693 cv
140.26 70.5762 124.861 60.6226 109.833 61.6035 cv
94.8052 62.584 81.1172 74.4365 76.876 90.1406 cv
74.5518 98.7476 74.6934 108.59 69.708 115.656 cv
66.3018 120.484 61.0078 123.206 55.7974 125.44 cv
50.5869 127.674 45.1431 129.66 40.8359 133.53 cv
26.9419 146.016 38.7065 174.312 52.6528 181.823 cv
cp
.0847486 .0569162 .0569467 0 cmyk
@
213.111 167.386 mo
200.163 148.868 195.602 126.023 200.495 104.166 cv
202.955 93.1846 199.748 81.2617 190.905 72.7446 cv
177.678 60.0063 156.627 59.5215 142.818 71.2764 cv
142.81 71.2681 li
123.351 87.7852 97.1558 94.7505 71.7222 90.2075 cv
71.6797 90.1997 71.6206 90.1914 71.5786 90.1836 cv
62.7119 88.5884 53.207 91.1221 46.3638 97.7837 cv
36.6929 107.199 35.5684 121.715 42.9404 132.32 cv
54.041 148.325 58.9473 167.59 56.8228 186.75 cv
55.6538 197.279 59.2539 208.212 67.6064 216.257 cv
77.8799 226.151 92.6157 229.063 105.509 225 cv
105.619 224.959 105.72 224.926 105.821 224.894 cv
124.458 219.19 144.563 219.906 162.712 226.919 cv
162.864 226.968 163.016 227.033 163.16 227.09 cv
163.16 227.083 li
178.177 232.987 196.026 230.035 208.171 218.212 cv
222.404 204.356 224.033 182.974 213.111 167.386 cv
cp
f
202.071 159.571 mo
190.471 142.438 186.384 121.299 190.769 101.076 cv
192.972 90.915 190.099 79.8828 182.176 72.0024 cv
170.326 60.2158 151.467 59.7671 139.095 70.6436 cv
139.088 70.6362 li
121.654 85.9189 98.186 92.3638 75.3994 88.1602 cv
75.3618 88.1528 75.3086 88.1455 75.271 88.1382 cv
67.3276 86.6621 58.812 89.0063 52.6812 95.1704 cv
44.0166 103.882 43.0088 117.313 49.6138 127.125 cv
59.5586 141.935 63.9546 159.76 62.0513 177.489 cv
61.0039 187.231 64.2295 197.347 71.7124 204.79 cv
80.9165 213.945 94.1187 216.639 105.67 212.88 cv
105.768 212.842 105.859 212.812 105.949 212.782 cv
122.646 207.504 140.659 208.167 156.918 214.656 cv
157.055 214.701 157.191 214.761 157.319 214.814 cv
157.319 214.807 li
170.773 220.27 186.765 217.539 197.646 206.6 cv
210.397 193.779 211.856 173.995 202.071 159.571 cv
cp
level3{
gsave
clp
[-170.765 -51.0458 51.0458 -170.765 214.762 164.762 ]ct
/0 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~!,82.!,J;/!,eM2!-"V3!-Fk6!-b%8!-t.9!.:@<!.LI=!.g[@!/6pC!/I$D!/d3F!0*BH!0ETK!0`cM
!1&uP!1B/R!1];S!1oGU!25VW!2G_X!2bnZ!3)(\!3D7^!3VC`!3qRb!47de!4@ge!4[sf!4n'g!546i
!5F?j!5aNl!5sZn!60co!69ip!6Krq!6^&r!6p,r!76;t!7?Au!7ZQ"!7cT"!7u`$!82i%!8Dr&!8W&'
!8i/(!9&8)!9/;)!98A*!9JM,!9\V-!9eY-!:"e/!:+k0!:4n0!:=t1!:P(2!:Y+2!:k43!:t:4!;(=4
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-170.765 -51.0458 51.0458 -170.765 214.762 164.762 ]ct
clp
/0 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 4 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
0 <~BPD0qC27X&D/O60DfB]:F*)PJG'A.TG^4U]H[L3hI=?ZqJ:W<)KS>,7L51P?M2I1KN/`gWO-#HcP*;)o
Q'IZ%R$a;1S"#q<SXl@ETV/!PU8"EYUnsrdVl6SpWiN5&Xf\b0YHY::ZEppF['[6K[^WcV\[f;_]=bhj
]tV4q^qmk(_Sa:0`5T^8`l?$=a2l?Dai_cLbKS2TcHab_d*U.edaHUoeC<!ue^i='f@\a/g"P07gYCT?
h;-rEhr!AMiSibSio8tWj5]4]jlPXekND$kkih9qlK[["lg*m&m-O**mHs?0n*f`6nF5u<o()ABoCMSF
~>
<~U8"BVU7n9STqS0RTqJ'OTV%jKT:VXGSt2FCSXl=BSXc4?S=H+>S=?";S!oe7R[KS3R@'A/R$a8.R$X/+
Q^=&*Q^=#(Q'ISuPa%DsPa%AqPEV/mP*1riOcb`eOH>NaO,o?_O,o<]NfK-[NfK*YN/W[QMi3IMMMd7I
M2@(FLkpkBLPLY?LPLY>L5(G;L5(G:KnY56KS+o/JqAT*JUrB'JUrB&J:N0"It)rtIt)rsIXZ`oI=6Nk
I!g<hH[C*dH?sm`H$O[\H$O[\H$O[\G^+IXGB\7TGB\7TGB\7TG'8%PG'8%PF`hhLFEDVHF)uDDF)uDD
~>
0 ]
>>
0 0 1 0 []true true []
/DeviceCMYK
GenStrips
} /Gradient add_res /0 /Gradient get_res exec grestore
}if
np
49.5547 162.459 mo
56.8027 167.339 66.0762 168.688 72.9888 174.033 cv
81.6406 180.723 84.8037 192.109 88.1201 202.531 cv
91.436 212.953 96.3354 224.193 106.367 228.549 cv
116.936 233.138 129.299 228.237 138.537 221.351 cv
147.775 214.465 155.608 205.521 165.942 200.424 cv
177.243 194.851 190.284 194.475 202.667 192.146 cv
215.051 189.816 228.193 184.452 233.728 173.132 cv
239.768 160.778 234.182 145.137 223.885 136.022 cv
213.587 126.907 199.687 123.085 186.12 120.84 cv
178.046 119.504 169.147 118.242 163.729 112.109 cv
158.154 105.797 158.169 96.4922 155.677 88.4473 cv
151.258 74.1821 137.538 63.3022 122.641 62.252 cv
107.744 61.2017 92.6318 70.0483 86.2554 83.5522 cv
82.7607 90.9531 81.5137 99.7759 75.6226 105.458 cv
71.5977 109.34 66.0151 111.095 60.5835 112.425 cv
55.1519 113.755 49.5259 114.833 44.7505 117.743 cv
29.3472 127.13 36.916 153.951 49.5547 162.459 cv
cp
level3{
gsave
clp
[167.714 96.622 -96.622 167.714 49.2092 105.795 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[167.714 96.622 -96.622 167.714 49.2092 105.795 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
2 lw
42.0576 175.589 mo
50.5132 179.675 60.584 179.695 68.7529 184.326 cv
78.978 190.124 84.0796 201.754 89.1978 212.335 cv
94.3159 222.917 101.242 234.126 112.579 237.23 cv
124.522 240.5 136.927 233.4 145.704 224.665 cv
154.481 215.93 161.451 205.22 171.666 198.222 cv
182.838 190.569 196.654 188.179 209.473 183.812 cv
222.292 179.445 235.454 171.733 239.615 158.846 cv
244.156 144.782 235.828 128.995 223.482 120.869 cv
211.137 112.744 195.767 110.798 180.99 110.479 cv
172.198 110.29 162.538 110.305 155.839 104.607 cv
148.945 98.7427 147.542 88.8418 143.663 80.6631 cv
136.786 66.1616 120.529 56.6807 104.521 57.8359 cv
88.5132 58.9912 73.7866 70.7075 69.063 86.0464 cv
66.4746 94.4531 66.4937 104.029 61.0933 110.973 cv
57.4038 115.716 51.7329 118.436 46.1572 120.679 cv
40.582 122.922 34.7612 124.928 30.125 128.752 cv
15.1704 141.088 27.3145 168.466 42.0576 175.589 cv
cp
level3{
gsave
[219.58 0 0 219.58 22.29 147.891 ]ct
<<
/PatternType 2
/Shading
/1 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~!.CXC!.UaD!.psG!/7-I!/I6J!/dEL!0!QN!0<`P!0NiQ!0j)U!108W!1BDY!1]S[!1o\\!2,e]!2Gq^
!2Z%_!2l.`!32=b!3DFc!3_Xf!3qag!4.mi!4A!j!4S-l!4e6m!5"<m!5=Ko!5FNo!5a]q!5j`q!6'ir
!69ut!6C&u!6U0!!6g6!!7$?"!76H#!7?K#!7Z]&!7c`&!7lc&!8)l'!8<#)!8E&)!8`5+!8i5*!9&>+
!9/D,!98G,!9AM-!9SV.!9\Y.!9ne0!:"h0!:4t2!:4q1!:>"2!:G%2!:Y14!:b13!:k43!:t:4!;(=4
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds []
/Encode [0 1 ]
>>
>> /Gradient add_res /1 /Gradient get_res >> matrix makepattern grestore setpattern
}if
level3{
@
}if
level3 not{
gsave strokepath
gsave
[219.58 0 0 219.58 22.29 147.891 ]ct
clp
/1 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 4 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
0 <~I!pElIXcm!JV&N-KS>,7L51SAM2I1KMi<XTNfT6_OHG]hPE_>tQC!r*R$jA2S"-">SXuFFT:hjNU8+KZ
Unji`VP^8iWMuntX/i>(Y-+t3YctC;ZEggC['[6K[^NZS\@B)[]"5Mc]Y2%n^:q@s^qmn)_SX4.`5KX6
`Q#p<a2c6AaN;QHb0.uPbg"DXcHjh`d*U.edaHUoeC<!ue^`4$f%8O+f\+s3g=k98gYCWAhVR,Hhr*GO
iSibSio8tWj5]1[jQ,Fak2tggkND'ml07HslK[^$lg*m&m-O**mHs<.mdBQ4nF5r:naZ/>o()ABoCMSF
~>
<~USFTZUS=KWU8"BVU7n9STqJ'OTV%jKT:_aJT:VXGSt;OFSt;OFSt2FCSXl=BSXc4?S=?";S!oe6R@'A/
R$a5,Q^=#(QBmf$Q'ISuPa%DsPa%AqPEV2oPEV/mP*1ukP*1riOH>NaO,o<]NfK*YNK&mUN/W[QMi3IM
MMd:KMMd:KMMd:JM26tCLPLY>L5(G:KnY56KS5#3KS5#2K7ef.JqAT*JUrB'JUrB&J:N0"IsuipI=6Nk
I!g<hI!g<hH[C*dH[C*dH?sm`H$O[\H$O[\G^+IXG^+IXGB\7TGB\7TG'8%PG'8"NFEDVHF)uDDF)uDD
~>
0 ]
>>
0 0 1 0 []true true []
/DeviceCMYK
GenStrips
} /Gradient add_res /1 /Gradient get_res exec grestore
grestore newpath
}if
1 lw
43.7539 171.833 mo
52.292 176.493 62.3857 176.672 70.6455 181.934 cv
80.9834 188.521 86.2778 201.494 91.5718 213.305 cv
96.8662 225.115 103.983 237.651 115.394 241.268 cv
127.414 245.079 139.736 237.401 148.396 227.854 cv
157.057 218.307 163.875 206.542 174.004 198.943 cv
185.083 190.632 198.892 188.198 211.671 183.556 cv
224.45 178.914 237.522 170.57 241.492 156.348 cv
245.824 140.826 237.231 123.194 224.731 113.994 cv
212.232 104.793 196.797 102.397 181.983 101.813 cv
173.168 101.466 163.486 101.333 156.684 94.9111 cv
149.683 88.3022 148.122 77.3037 144.107 68.1763 cv
136.989 51.9922 120.549 41.228 104.523 42.2593 cv
88.4971 43.2905 73.9199 56.0508 69.4248 72.9824 cv
66.9614 82.2617 67.1299 92.8784 61.8257 100.492 cv
58.2017 105.694 52.5605 108.62 47.0073 111.02 cv
41.4546 113.42 35.6523 115.553 31.0654 119.72 cv
16.2695 133.164 28.8667 163.706 43.7539 171.833 cv
cp
.0154421 .00189212 .00241093 0 cmyk
@
%ADOBeginSubsetFont: FiraSans-Medium Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /FiraSans-Medium def/FontInfo 7 dict dup begin/Notice (Digitized data copyright 2012-2016, The Mozilla Foundation and Telefonica S.A.) def/Weight (Medium) def/ItalicAngle 0 def/FSType 0 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 32 /space putdup 65 /A putdup 66 /B putdup 67 /C putdup 68 /D putdup 73 /I putdup 76 /L putdup 81 /Q putdup 82 /R putdup 83 /S putdup 84 /T putdup 85 /U putdef/FontBBox {-167 -354 1360 1152} defendsystemdict begindup /Private16 dict dup begin/|- {def} def/| {put} def/BlueValues [-16 -0 529 545 566 582 691 707 741 757] def/OtherBlues [-220 -204] def/FamilyBlues [-14 -0 564 578 689 703 739 753] def/FamilyOtherBlues [-216 -202] def/BlueScale 0.037 def/BlueFuzz 0 def/StdHW [97] def/StdVW [128] def/StemSnapH [97] def/StemSnapV [128] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings13 dict dup begin/space <1C60D8A8C9B8707C25> |-/A <1C60D8A8C9B7F44A9B78E03161F7A344DB7F3EA06AFF0465C6EFD25A736FB9456960D98F6B714F42F864FAD050E88EE1DB890FE9F3957E857F2260B93FEC9D81E6A399F35AE9D4AB84C32DEAB1B347FD32B3C4E8> |-/B <1C60D8A8C9B7D61BB7C2661696BA13A28F727E19C81A3C22A0FF955B41AE5D591E5EE7BDDB32F1BAECF55FE5B749C731DECC645C9BC13679A3CBF52EBCCFC4520EBEE1AC1ADC1AF0802F39912572F412458F34B30689E7A05655FD3584F2B114E854E1C2257841A612BBF876F06D2120E40817FBE39F673FB05BA1E1472CB621E271493CD5E1C0BC397CD1C9A714E0A3E1FB7215E4BA4EBB0A6F30D77334F16BE2FB2AD60631CE44FEA344A8AEC46FA90667E782EFB94A96BE2F215BCF8B4C71656B11875FFD4FF1152BBF4E30D7> |-/C <1C60D8A8C9B7E39FF8BC86D23D779DFC8FE1F05FBCC6BFE7F57B95218266E2785FA4986B0B5D6C55EE6A208309020FB50828436D30E4E86F3F9D75EEAA02851F0590290149C9FF6B8D0434BDFAEA35F0DBC2E1F8CD57DB8E4576> |-/D <1C60D8A8C9B67DB5F44BCCB48594F6F5C1331F1B8276175F691C05BD55594BB1FE9823FE997B23352232D3018D480A21D31F5C4BF75113A0CF969CA908EEBCD0CB3EC9717F9AF73C59AD9E6668> |-/I <1C60D8A8C9B844FA9A5DAA468A6C3AAA7711231D811A405485B3C14E331AB542174000> |-/L <1C60D8A8C9B7A1572D736368DF865AAEA6B3D27D4A6579CE3BC68398C9750A1F5AD51236CDD1D99E945AC7> |-/Q <1C60D8A8C9B6269CA35E2950B9C5CEB3FF5956EBB7FED8ACF3726890351FE1B458E0CC06798D71A3C969CA5A48F8ABD654F03E19D00AE9EACD7A54721BEA418E477AF231092C131B8A545CD246547630972C76B938AD24219FED65A8E2C5C86556509CC3FFDD3E422FAD1FB7FADA5D6ABD1C913A0C53D7AFC15EACE0283311F43E375724EA30AA88EC417861A43B3E072B07B0F926C17F107F9FFD6D2EF98C4AA308306B43C87D> |-/R <1C60D8A8C9B7D8BE41A64DA524D103FB6BF37777F276CE249D5BCE7C13C02FD0C97ED29FDC33509E987C5E0FFA9635BE22BF20E5C6F468113AE12E0FA0C6597C290D990654219DAD636A2B5E2D31D4F158929F51292716D3> |-/S <1C60D8A8C9B7EB08E9F3FF51F1227BF4C04300B46AD534469DD4AEA9BAE860A4B8C80AF94BB071BE402A2D64D86C52180E09CF8DB14F356F721FA903FC928D94A87D1A0F251E64DF8924AC3E738C37D183C1906ABE4299E8A74F4178AB32712AE8EA01177316665C0D2DB86AE76943A96EEA7BD654E11937BAD7D3> |-/T <1C60D8A8C9B7890D21F219078A6D51F6E9DA901FFFEEE0F3F4D9836AC26AD7AC342176D42DE5B28953DF76E144C991> |-/U <1C60D8A8C9B6459D227C28E0088A1AFF8AA7A663B6B7E5D0E0E3B9262030057ACD8EBEF05617DCE13C252D98C92C9CB9BFF892268FBE6F1FF1242B87C1ECF6582328DBCE2871> |-/.notdef <1C60D8A8C9B64FADB619E309546AF58CE0C708D6A2D4DA16668C7F2D4A1D078EC9DE64A936E6FEA4D83073AAEF119EC88636B96A49D19F6F1657B25E59E7A3800CD9A4C80D13A0997606698B69F1F3642D79B44EC413EB245DB0AD18F8791EFB72BCE43C206E058EA180575C5C1EA0C4823EB9952077B7037B412842976C96CC34315953461D2FBA77C06212EA6552F5C0B7995373926B6B5EDBD74EA4C57A47466BF878A5C57562BD65CAB62491DAE7FBF318BBAEF2FF9B165CF17EADD8E1B00F6E3930FA87A8B1308A8F39> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/KWFXCH+FiraSans-Medium /FiraSans-Medium findfont ct_VMDictPut/KWFXCH+FiraSans-Medium*1 [32{/.notdef}rp /space 32{/.notdef}rp /A /B /C /D 4{/.notdef}rp /I 2{/.notdef}rp /L 4{/.notdef}rp /Q /R /S /T /U 170{/.notdef}rp]KWFXCH+FiraSans-Medium nfKWFXCH+FiraSans-Medium*1 [15.5211 0 0 -15.5211 0 0 ]msf75.2549 146.422 mo(ABSTRACT LIQUID)[9.04883 9.2041 8.36572 8.22607 9.4834 8.89404 8.66064 8.22607 3.88037 7.85352 4.56299 10.7251 10.1816 4.56299 0 ]xsh%ADOBeginSubsetFont: FiraSans-Light Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /FiraSans-Light def/FontInfo 7 dict dup begin/Notice (Digitized data copyright 2012-2016, The Mozilla Foundation and Telefonica S.A.) def/Weight (Light) def/ItalicAngle 0 def/FSType 0 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 65 /A putdup 66 /B putdup 69 /E putdup 78 /N putdup 82 /R putdup 83 /S putdef/FontBBox {-167 -350 1360 1057} defendsystemdict begindup /Private16 dict dup begin/|- {def} def/| {put} def/BlueValues [-13 -0 523 536 562 575 685 698 736 749] def/OtherBlues [-210 -197] def/FamilyBlues [-14 -0 564 578 689 703 739 753] def/FamilyOtherBlues [-216 -202] def/BlueScale 0.037 def/BlueFuzz 0 def/StdHW [49] def/StdVW [58] def/StemSnapH [49] def/StemSnapV [58] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings7 dict dup begin/A <1C60D8A8C9B7E6F0046C8A232753C315FAE6D88244D386585071089CABEB292B1479FAEF4E4E7EF93C18DEF076E128AA7D47AAE4A02E305DAF9ECDA221FB3D91CE2A> |-/B <1C60D8A8C9B7C56CC75BC4B6FC2421C9D920E18AF64A6E6CCD1936FF416A9A730E5BDD5AF1721E650A711461EC6B15F33FD8BBFEA35E515254FB0D426640B58C02C011F2E93627D9E996F1FB37CF34ECFD7047E16880E51FEC28C82E88DFB5333905B34BC048870D18C97986AABFF4164043812110790505B60D51FCCC5E2E294545AD41251AA65888D5D931A097D163A7E6072B26257EDE40E6A7B91EA43D83E4A69445D4C7342C19BD28B9BCF931333F88268D9F0F5CCF81059321413A047DA460099B29384688A5A0A41488> |-/E <1C60D8A8C9B7BB5CD64482032327B47EDD766DC4CED885542A830F3F7D14AE0BFF7F65D05FA2CBA014AAC711F8C2CDC69347E1F28A63EE8769EAB8458A> |-/N <1C60D8A8C9B654A4AF7EEC07E5A273256152FCF28F12C47859548B4E8D0F5B16E060F551A86AA5A25BE4CDF32C05A5D009A4C84D10C08D97448851932D2DCFD25900E8D96950711DE4A9065D78F0098914A1CADC5BC49EC226ADF1183D153ADBADECDA6A6ACBAA905385> |-/R <1C60D8A8C9B7CDD895E9B3C4F183DDA971B6C287B2C1E497A20D0550EB53D11F073C36C66E22635804DC102026C6D3CDC801BE6478047D250FF7E3ECBD9A3AF96DA80A3823E9C7298D32942E058475E06636B3371B6D20C18E> |-/S <1C60D8A8C9B780B36E26F01798A047E5032B5ECB16A5E91699F1A5FCC411A11EA75F033FE54721075D99C049E2E08A638614DF4A266F30D50A21A3AD62EBAAC2F67A7BB2D4AB5DA5249CC2F317BAA7484FB635BEAC1C5ACD33C2312ECFD8D2C549B0C53CCD263AF9397FFB2702BB6C0045914201DB73D6> |-/.notdef <1C60D8A8C9B64FADB619E309546AF58CE0C708D6A2D4DA16668C7F2D4A1D078EC9DE64A936E6FEA4D83073AAEF119EC88636B96A49D19F6F1657B25E59E7A3800CD9A4C80D13A0997606698B69F1F3642D79B44EC413EB245DB0AD18F8791EFB72BCE43C206E058EA180575C5C1EA0C4823EB9952077B7037B412842976C96CC34315953461D2FBA77C06212EA6552F5C0B7995373926B6B5EDBD74EA4C57A47466BF878A5C57562BD65CAB62491DAE7FBF318BBAEF2FF9B165CF17EADD8E1B00F6E3930FA87A8B1308A8F39> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/KWFXCI+FiraSans-Light /FiraSans-Light findfont ct_VMDictPut/KWFXCI+FiraSans-Light*1 [65{/.notdef}rp /A /B 2{/.notdef}rp /E 8{/.notdef}rp /N 3{/.notdef}rp /R /S 172{/.notdef}rp]KWFXCI+FiraSans-Light nfKWFXCI+FiraSans-Light*1 [11.3712 0 0 -11.3712 0 0 ]msf112.65 161.924 mo(BANNERS)[6.74316 6.4248 7.65283 7.65283 5.82178 6.64063 0 ]xsh208.454 88.8296 mo
208.454 93.168 204.937 96.6851 200.599 96.6851 cv
196.26 96.6851 192.743 93.168 192.743 88.8296 cv
192.743 84.4912 196.26 80.9741 200.599 80.9741 cv
204.937 80.9741 208.454 84.4912 208.454 88.8296 cv
cp
level3{
gsave
clp
[15.7107 0 0 15.7107 192.743 88.8296 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[15.7107 0 0 15.7107 192.743 88.8296 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
55.6191 196.611 mo
55.6191 198.78 53.8608 200.539 51.6914 200.539 cv
49.5225 200.539 47.7637 198.78 47.7637 196.611 cv
47.7637 194.442 49.5225 192.683 51.6914 192.683 cv
53.8608 192.683 55.6191 194.442 55.6191 196.611 cv
cp
level3{
gsave
clp
[7.8553 0 0 7.8553 47.7639 196.611 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[7.8553 0 0 7.8553 47.7639 196.611 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
412.08 308.949 mo
405.906 302.521 399.793 291.194 395.135 285.628 cv
381.513 269.349 366.884 265.767 348.138 276.5 cv
334.026 284.581 324.897 302.985 311.414 312.838 cv
303.612 318.538 294.79 321.048 286.692 325.94 cv
272.063 334.779 260.165 351.869 255.933 370.893 cv
251.48 390.907 256.296 410.755 267.439 423.969 cv
278.509 437.096 299.326 446.938 316.018 440.946 cv
324.389 437.941 331.476 430.318 339.354 425.284 cv
352.008 417.199 366.276 416.07 379.696 417.169 cv
393.116 418.267 406.253 421.404 419.83 421.145 cv
433.406 420.884 447.944 416.771 459 405.381 cv
470.901 393.121 477.159 372.925 474.408 355.658 cv
473.278 348.568 470.75 341.807 467.064 336.479 cv
462.58 329.999 454.858 325.179 447.875 323.737 cv
432.981 320.664 420.132 317.331 412.08 308.949 cv
cp
.0847486 .0569162 .0569467 0 cmyk
@
319.557 402.683 mo
326.424 408.524 333.604 418.969 338.84 424.05 cv
354.152 438.908 369.527 441.808 388.051 431.131 cv
401.996 423.093 410.001 405.516 423.162 395.834 cv
430.776 390.231 439.688 387.595 447.67 382.742 cv
462.09 373.976 473.057 357.546 475.961 339.544 cv
479.018 320.604 472.521 302.113 460.003 290.057 cv
447.567 278.078 425.324 269.494 408.556 275.652 cv
400.147 278.74 393.418 286.125 385.673 291.104 cv
373.235 299.1 358.595 300.613 344.659 300.008 cv
330.722 299.402 316.921 296.872 302.928 297.548 cv
288.935 298.224 274.246 302.549 263.711 313.598 cv
252.37 325.49 247.464 344.659 251.632 360.79 cv
253.344 367.413 256.473 373.685 260.687 378.571 cv
265.813 384.516 274.154 388.798 281.474 389.93 cv
297.082 392.344 310.601 395.065 319.557 402.683 cv
cp
f
264.246 387.352 mo
266.874 401.646 272.281 415.739 281.589 424.13 cv
295.26 436.455 313.848 433.791 329.712 427.23 cv
345.577 420.669 360.965 410.657 377.601 409.678 cv
391.75 408.846 405.584 414.649 419.655 416.749 cv
429.687 418.245 441.085 418.396 449.7 410.995 cv
457.776 404.056 464.075 393.596 467.1 381.643 cv
471.398 364.656 468.964 342.136 459.974 328.198 cv
450.611 313.682 433.762 310.374 420.063 309.965 cv
397.285 309.284 376.23 311.177 355.346 297.2 cv
345.498 290.61 335.237 284.695 324.285 282.021 cv
304.525 277.196 287.484 284.381 277.657 302.079 cv
269.988 315.889 265.378 332.525 263.361 348.12 cv
261.681 361.108 261.888 374.525 264.246 387.352 cv
cp
level3{
gsave
clp
[-31.1593 149.153 -149.153 -31.1593 379.914 293.611 ]ct
/2 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~!&a'B!&s0C!''3C!'06C!'B?D!'KEE!']QG!C5iK!C>oL!CQ#M!CZ&M!Cl/N!Cu2N!D)8O!D;DQ!))>P
!);GQ!)DGP!)MJP!)VPQ!)h\S!)q_S!*%\Q!*7bQ!*IhQ!*RkQ!*[qR!*n(T!+"+T!++.T!+41T!+F7T
!+O:T!+X:S!+jCT!+sFT!,'LU!,9UV!,BUU!,T[U!,]^U!,odU!-#dT!-,gT!->mT!-GpT!-Z'V!-l0W
!-u0V!.)3V!.26V!.D<V!.M<U!.V?U!.hEU!.qET!/.KT!/@QT!/ITT!/[ZT!/dZS!/mZR!0*`R!03cR
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-31.1593 149.153 -149.153 -31.1593 379.914 293.611 ]ct
clp
/2 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 4 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
0 <~1c7-K2E*QR2`NcV3&ru[3]fDb4$5Vg4[)%o5<qJ!5X@\&6:4+-6UX=277Ka97Ros=7n?0B8P2TI8kVfN
9MA/T9heAX:/4S\:JXe`;,L4h;GpFl;c?Xp<E3(#='&L+=BJ^/=]np3>?b?;>[1Q??!UcC?=$uG?smDO
@:<SR@U`eV@q9+]AS#FbAnGXfB4tsmBk_9rC27U$Ci!p)D/O60Df9Q5E,]c9EH6)@F)uDEFEM_LG'A.T
G^+IXH$O[\H?sm`H[C-fI=6NlIXZ`pIt*!!JUrB'JqAW-KS5&5L5(G;LPL\AM2@(GMMd:KMi3OQNK&pW
~>
<~lK[["lKRQtl0.?pki_-lkN:phk2tggk3(pjkND$kkND$kkN:phk2k^djlGL`jQ#:\j5]1[j5]1[j5T(X
io8qUi8EMMhr!;IhVR,GhVR,GhVR)DgtUQ:g"G$1f@SU)f%/C%e^`4#e^`4#e^`1!eC;sre'landF$=f
d*U.ccd'h\c-=MWbfn;SbKJ)PbKJ)Ob/qcHaN)?@`l?$;`Pf^4_ns:,_83t'^q[Xu^:q=p]tM+m]tM+l
]Y(kg]"5Ja\[f8]\@B#W[^NTO['[3IZa6sCZ*CO;YHP+3Xf\\+X/i;%WiE%tW2QVlVP^2dUnjc\U8"BV
~>
0 ]
>>
0 0 1 0 []true true []
/DeviceCMYK
GenStrips
} /Gradient add_res /2 /Gradient get_res exec grestore
}if
np
327.391 397.726 mo
334.893 401.356 343.551 408.686 349.388 411.965 cv
366.459 421.555 381.343 421.396 396.613 409.661 cv
408.108 400.828 412.274 385.199 422.729 375.155 cv
428.778 369.344 436.595 365.734 443.128 360.473 cv
454.93 350.968 462.072 335.788 461.4 320.649 cv
460.694 304.723 451.162 290.729 437.223 282.962 cv
423.375 275.245 401.019 271.902 386.537 279.668 cv
379.274 283.563 374.386 290.681 368.098 296.006 cv
358 304.558 344.63 308.191 331.519 309.984 cv
318.408 311.776 305.062 311.979 292.138 314.824 cv
279.214 317.67 266.328 323.603 258.577 334.328 cv
250.234 345.875 249.258 362.292 256.175 374.746 cv
259.015 379.859 263.111 384.453 267.959 387.742 cv
273.856 391.743 282.439 393.863 289.479 393.584 cv
304.489 392.99 317.608 392.99 327.391 397.726 cv
cp
level3{
gsave
clp
[69.1772 119.809 -119.809 69.1772 328.241 289.95 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[69.1772 119.809 -119.809 69.1772 328.241 289.95 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
400.445 306.978 mo
394.62 300.964 388.842 290.376 384.446 285.169 cv
371.59 269.94 357.813 266.565 340.191 276.548 cv
326.925 284.062 318.372 301.226 305.701 310.396 cv
298.37 315.701 290.072 318.025 282.459 322.576 cv
268.709 330.797 257.546 346.728 253.603 364.479 cv
249.455 383.156 254.029 401.697 264.545 414.057 cv
274.993 426.336 294.607 435.57 310.307 430.011 cv
318.179 427.224 324.833 420.122 332.239 415.438 cv
344.131 407.916 357.559 406.893 370.193 407.946 cv
382.827 409 395.198 411.957 407.977 411.743 cv
420.755 411.529 434.43 407.719 444.812 397.109 cv
455.988 385.688 461.836 366.846 459.209 350.719 cv
458.131 344.098 455.737 337.778 452.257 332.797 cv
448.022 326.737 440.744 322.221 434.167 320.86 cv
420.143 317.96 408.041 314.82 400.445 306.978 cv
cp
.0154421 .00189212 .00241093 0 cmyk
@
2 lw
389.822 296.453 mo
382.783 292.361 374.75 284.271 369.287 280.6 cv
353.306 269.863 339.124 269.646 324.233 281.842 cv
313.023 291.022 308.597 307.686 298.343 318.192 cv
292.41 324.271 284.858 327.941 278.48 333.418 cv
266.959 343.311 259.71 359.415 259.906 375.679 cv
260.112 392.79 268.781 408.056 281.831 416.754 cv
294.795 425.396 315.994 429.566 330.017 421.609 cv
337.049 417.619 341.915 410.107 348.061 404.556 cv
357.932 395.642 370.773 392.09 383.315 390.508 cv
395.857 388.926 408.577 389.055 420.971 386.339 cv
433.365 383.622 445.815 377.591 453.513 366.282 cv
461.799 354.107 463.21 336.516 456.987 322.97 cv
454.431 317.408 450.665 312.371 446.143 308.715 cv
440.643 304.269 432.528 301.77 425.815 301.885 cv
411.5 302.132 399.002 301.79 389.822 296.453 cv
cp
level3{
gsave
[202.616 -.707568 -.707568 228.225 259.094 349.479 ]ct
<<
/PatternType 2
/Shading
/2 /Gradient get_res >> matrix makepattern grestore setpattern
}if
level3{
@
}if
level3 not{
gsave strokepath
gsave
[202.616 -.707568 -.707568 228.225 259.094 349.479 ]ct
clp
/2 /Gradient get_res exec grestore
grestore newpath
}if
.0154421 .00189212 .00241093 0 cmyk
KWFXCH+FiraSans-Medium*1 [15.5211 0 0 -15.5211 0 0 ]msf297.662 350.51 mo(ABSTRACT LIQUID)[9.04883 9.2041 8.36572 8.22607 9.4834 8.89404 8.66064 8.22607 3.88037 7.85352 4.56299 10.7251 10.1816 4.56299 0 ]xshKWFXCI+FiraSans-Light*1 [11.3712 0 0 -11.3712 0 0 ]msf335.057 366.012 mo(BANNERS)[6.74316 6.4248 7.65283 7.65283 5.82178 6.64063 0 ]xsh286.348 306.988 mo
286.348 311.327 282.831 314.844 278.493 314.844 cv
274.154 314.844 270.638 311.327 270.638 306.988 cv
270.638 302.65 274.154 299.133 278.493 299.133 cv
282.831 299.133 286.348 302.65 286.348 306.988 cv
cp
level3{
gsave
clp
[7.85665 13.6081 -13.6081 7.85665 274.565 300.185 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[7.85665 13.6081 -13.6081 7.85665 274.565 300.185 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
473.091 329.136 mo
473.091 331.305 471.333 333.063 469.164 333.063 cv
466.995 333.063 465.236 331.305 465.236 329.136 cv
465.236 326.967 466.995 325.208 469.164 325.208 cv
471.333 325.208 473.091 326.967 473.091 329.136 cv
cp
level3{
gsave
clp
[3.92831 6.80404 -6.80404 3.92831 467.2 325.734 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.92831 6.80404 -6.80404 3.92831 467.2 325.734 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
352.997 418.836 mo
352.997 421.006 351.238 422.764 349.069 422.764 cv
346.9 422.764 345.141 421.006 345.141 418.836 cv
345.141 416.667 346.9 414.908 349.069 414.908 cv
351.238 414.908 352.997 416.667 352.997 418.836 cv
cp
level3{
gsave
clp
[3.92835 6.80411 -6.80411 3.92835 347.105 415.434 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.92835 6.80411 -6.80411 3.92835 347.105 415.434 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
1 lw
370.922 216.368 mo
390.197 209.304 413.737 213.913 433.876 214.683 cv
441.375 214.97 449.808 215.149 455.951 210.152 cv
462.187 205.08 464.708 196.301 465.244 188.595 cv
466.25 174.144 461.389 159.369 452 148.337 cv
438.125 132.034 413.505 124.731 404.316 104.616 cv
396.855 88.2822 401.085 67.5596 382.918 57.5664 cv
371.032 51.0283 354.897 52.3125 343.126 58.4375 cv
332.196 64.125 324.894 73.9277 321.664 85.7251 cv
319.862 92.3076 320.533 98.8369 319.767 105.59 cv
318.882 113.393 316.94 121.078 313.989 128.356 cv
309.908 138.424 303.973 147.622 299.193 157.377 cv
292.367 171.31 290.406 185.641 291.768 201.017 cv
292.869 213.441 295.188 231.34 307.01 238.349 cv
328.306 250.973 352.271 223.202 370.922 216.368 cv
cp
.0847486 .0569162 .0569467 0 cmyk
@
302.225 128.714 mo
302.093 135.396 301.063 142.017 298.728 148.485 cv
292.728 165.104 283.911 181.004 276.85 197.251 cv
273.829 204.203 273.916 211.623 278.118 218.178 cv
282.729 225.37 290.665 229.813 298.792 232.442 cv
308.156 235.471 318.177 236.414 327.95 235.278 cv
338.285 234.076 345.755 229.97 354.412 224.451 cv
367.497 216.11 380.706 205.128 396.928 204.46 cv
415.503 203.695 433.712 215.855 450.396 202.347 cv
461.311 193.509 466.39 177.537 465.123 163.857 cv
464.108 152.9 459.057 142.638 450.397 135.092 cv
443.769 129.317 435.864 126.767 428.142 122.875 cv
420.257 118.901 413.575 113.028 407.679 106.746 cv
399.684 98.2285 392.844 88.7627 384.403 80.6357 cv
369.899 66.6704 348.548 54.5088 327.628 53.9033 cv
314.063 53.5107 301.425 59.2686 297.957 72.2524 cv
294.589 84.8594 298.433 97.6938 300.629 110.234 cv
301.708 116.398 302.345 122.582 302.225 128.714 cv
cp
f
289.494 196.729 mo
292.147 198.453 295.076 199.852 298.241 200.869 cv
307.45 203.828 317.3 204.497 326.404 207.767 cv
332.077 209.804 337.379 212.854 342.015 216.704 cv
346.919 220.774 350.346 226.206 355.546 229.928 cv
383.645 250.043 409.898 217.459 418.285 193.508 cv
423.441 178.781 426.064 163.318 430.855 148.478 cv
435.448 134.252 439.854 117.884 434.375 103.27 cv
423.176 73.3896 387.113 70.8149 360.279 73.8457 cv
333.297 76.8931 304.017 84.7036 292.509 112.146 cv
289.433 119.48 288.014 127.383 285.821 135.028 cv
282.462 146.739 272.564 155.509 273.267 168.09 cv
273.938 180.092 279.932 190.52 289.494 196.729 cv
cp
level3{
gsave
clp
[83.4859 -144.608 139.416 95.0294 318.98 216.839 ]ct
/3 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~j0\jej0\jej0Sddij/Ubij&OaiirI`iiiC_ii`=^iiN1\iiE+[iMuqYiMceWi2?VUi2-JShkU5PhkL/O
hk:#MhOX]IhOOWHhO4EEhO"9ChN\'@h3.g=h2hU:gl;@7gPZ%3g4oY.g4]M,g4B;)fm`u%fmEc"fQdGs
f6%&neoC`jeo(QheSG<fe7f'ddq/dadUNO_d9m:]cs7"ZcrgeXcW1PVc;P;TbteuQbY/cPb=NNNb!m9L
b!I'JaZgdGa?1OEa#G4B`AJn@`A&\>`%<A;_^R#7_^-f5_BLQ3_&k<1^`,$/^DA[+^(W@(]b!+&]+$_"
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[83.4859 -144.608 139.416 95.0294 318.98 216.839 ]ct
clp
/3 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 4 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~io8tWio8tWio8tWio/kTiSibSiSibSiSibSiSibSiSibSiSibSiS`YPi8EPOi8<GLhr!>Khqm5HhVR,G
hVR,GhVR)Eh;-oCh;-oCh;-oCh;-oCh;-lAgt^]?gt^Z=gY:H9g=k65g"G'3g"G'3g"G$1f\"j/f\"g-
f@SX*f%/F&e^`4#e^`4"eC<!se'ldodaHRkdF$@gd*U.ccd0q`cd0q_cHa_[c-=MWbfn;SbKJ)Ob0%lK
aiVZHaiVZHaN2HDa2c6@`l?!:`5KU4`5KU4_o'C0_SX1,_SX1,_83t(^qdb$^V@Ou^:q=q]tM+m]Y(kg
~>
<~['[3I['[3I['R*FZa-mBZE^[>Z*:I:Yck76YHG%1XfSV*XK/D&X/`2!WMlboW2HPjVPU,bUna][US=KV
TqS-OSt;LDSXl:?R[TY4R$a5+Q'ISuPEV/lOcYWbNfK*XN/NRMLkg_>KnY25K7\Z*J:E#sI=-BgH?jaZ
G'8"MF)l;@E,TZ4D/=$(C2%BqB4baeA7T1Z@:<PN?=$oB>?Y03='&F&<E)mp;,C%`:/+DT91hcH84Q-<
6psC/5sRY!5!;"j4$#A]2`<NN1c$mA0J>%1/1W2!-mp>f,U4NX+WqmL*ZZ4>)AsA.()7Ms&eYcf%hB-Z
~>
<~zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz!!!!"!<N<)!sA`1"U,&6"pYA=#RLeE$47+J$OdFQ%1WjY%
hK9a&J>]i',2/s()Ic((`=20)B'P6*#oq<*??1B+!2UJ+X/-U,U=Z^-71)f-n$Jl.4H_r.k</%/M/S-0
/#"61,:U?1G^jE2)R9M2`EZS~>
0 ]
>>
0 0 1 0 []true true []
/DeviceCMYK
GenStrips
} /Gradient add_res /3 /Gradient get_res exec grestore
}if
np
303.487 135.251 mo
305.044 150.599 298.854 165.209 294.115 179.459 cv
291.922 186.055 290.596 192.816 288.746 199.429 cv
286.911 205.988 287.9 212.581 292.447 217.898 cv
297.436 223.732 305.046 226.711 312.604 228.052 cv
321.313 229.597 330.349 229.205 338.909 226.992 cv
347.961 224.652 354.105 220.079 361.133 214.104 cv
371.756 205.072 382.164 193.675 396.523 191.086 cv
412.963 188.122 430.668 196.707 443.858 182.633 cv
452.489 173.426 455.047 158.587 452.237 146.567 cv
450.159 137.68 445.231 130.249 438.138 124.571 cv
430.203 118.22 420.059 116.663 410.903 112.791 cv
404.396 110.04 398.491 106.073 393.053 101.596 cv
387.564 97.0776 383.027 91.3647 377.533 86.936 cv
366.838 78.3164 353.377 71.5796 340.045 68.2178 cv
327.494 65.0522 308.533 62.4404 298.393 72.5835 cv
282.11 88.8701 301.622 116.867 303.487 135.251 cv
cp
level3{
gsave
clp
[-57.7224 -150.062 150.062 -57.7224 382.785 210.419 ]ct
/4 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~j0\jeij/UbiiiC_iiW7]iN*"ZiMlkXi26PThk^;QhkL/Ohk0rLhOX]IhO=KFhO"9ChN\'@h3%a<h2hU:
gl2:6gPPt2g4fS-g4KA*g495(fmWo$fm<]!fQ[Arf6%&neo:Zieo(QheSG<fe7o*ddq8jbdUWU`d:!=]
d9d4\cs-tZcrgeXcW1PVcVkDUc;>2Sbt\rQbY&]Ob=NNNb!m9Lb![0Ka[$mHa?CUEa?1OEa#P7B`]#(A
`AAk@`A&\>`%ED;`%3;:_^R&8_^6l6_BUW4_BCN3^`P30^`5'/^DSg-^D8X+^(W@(]b*.&]FQq$]+$_"
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-57.7224 -150.062 150.062 -57.7224 382.785 210.419 ]ct
clp
/4 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 4 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~io8tWio/kTiSibSiSibSiS`YPi8EPOi8<GLhqm5HhVR,GhVR,GhVI#Dh;-oCh;-oCh;-oCh;$f@gt^]?
gt^Z=gY:H9g=k65g"G'3g"G'3g"G$1f\"j/f\"g-f@SU)f%/C%e^`4#e^`1!eC;sre'landaHOjdF$=f
d*U.dd*U.ccd0q`cd0q_cHa_\cHa_[c-=MWbfn;SbKJ)Ob0%lKaiVZHaiVZGaN2HCa2c6@a2c6?`l?$;
`Pog8`5KU4`5KU4_o'C0_o'C0_SX1,_SX1,_83t(_83q&^V@Ou^V@Ou^:q=q^:q=q]tM+m]Y(ni]=Y\e
~>
<~['[3HZa-j?Yck75Y-"h-XK/D%Wi;qqVl$>fV50o^US=HUTV%jJSt2CAS!oe6R$X/*Q'@MsP*(lgOH5H_
NK&mTMMd7HLPCM9K7ec-JUr?$IXZ]mI!^0bH$FOVG'.nJEcH&;Df9N2D/=!'C2.HsBP1phARo:\@UWYP
?XI/H?!LW=>$5!1=&r@%<)Z^n;Gg:f:JX_[9MA)O8kDTF7n6$;779O26UF((5X.Fq4Zkhg4$#A]3&`cS
2Dm<J1GU[>0J>%2/M/M).k2ts-mpAh,pX`\+sJ0R+<VaJ*ZZ7@)]BV4(`4&)'bqDr&eYcg&.f?_%LrpW
~>
<~zzzzzzzzzzzzzzzzzzzzzzzzzz!!!$#!WiH+!s8Z/"U,)7#6tM?#RC_C#mgnF$4@4M$k*OR%1WjY%hK9
a&J5Tf&ebom'GV>u()Ic((`=20)B'M5)]K_9*#oq=*?H7D+!2RI+<_mP+sS?Y,pai`-71&d-RU8h-n$M
n.Olnt.k</%/M/P+/hSb/0/#"50ekF=1G^gC1c.$G2)R6K2E!HO2`EZS~>
0 ]
>>
0 0 1 0 []true true []
/DeviceCMYK
GenStrips
} /Gradient add_res /4 /Gradient get_res exec grestore
}if
np
2 lw
367.524 206.094 mo
384.566 194.649 408.527 193.526 428.271 189.484 cv
435.624 187.979 443.857 186.147 448.635 179.833 cv
453.485 173.423 453.846 164.296 452.534 156.684 cv
450.073 142.408 441.838 129.213 430.095 120.731 cv
412.741 108.196 387.09 106.959 373.38 89.6069 cv
362.249 75.5166 361.428 54.3823 341.405 48.9971 cv
328.305 45.4736 312.939 50.5591 302.963 59.3076 cv
293.699 67.4316 288.938 78.6904 288.607 90.917 cv
288.422 97.7393 290.627 103.921 291.489 110.663 cv
292.486 118.453 292.427 126.378 291.292 134.15 cv
289.722 144.9 286.146 155.245 283.823 165.857 cv
280.507 181.014 282.011 195.4 286.991 210.011 cv
291.016 221.817 297.525 238.65 310.676 242.646 cv
334.362 249.843 351.035 217.168 367.524 206.094 cv
cp
level3{
gsave
[173.135 0 0 173.135 281.053 145.77 ]ct
<<
/PatternType 2
/Shading
/4 /Gradient get_res >> matrix makepattern grestore setpattern
}if
level3{
@
}if
level3 not{
gsave strokepath
gsave
[173.135 0 0 173.135 281.053 145.77 ]ct
clp
/4 /Gradient get_res exec grestore
grestore newpath
}if
1 lw
360.083 208.954 mo
380.017 201.722 404.256 206.152 425.018 206.764 cv
432.75 206.991 441.444 207.103 447.819 202.047 cv
454.29 196.915 456.96 188.097 457.574 180.372 cv
458.727 165.883 453.833 151.117 444.238 140.137 cv
430.06 123.911 404.729 116.79 395.414 96.7075 cv
387.85 80.4004 392.377 59.6011 373.722 49.7329 cv
361.517 43.2764 344.868 44.6924 332.68 50.9233 cv
321.363 56.71 313.754 66.5908 310.33 78.438 cv
308.419 85.0483 309.059 91.5859 308.215 98.3584 cv
307.24 106.185 305.176 113.9 302.075 121.218 cv
297.785 131.338 291.591 140.602 286.584 150.416 cv
279.434 164.432 277.297 178.807 278.579 194.204 cv
279.615 206.645 281.863 224.561 294 231.49 cv
315.859 243.97 340.796 215.951 360.083 208.954 cv
cp
.0154421 .00189212 .00241093 0 cmyk
@
KWFXCH+FiraSans-Medium*1 [15.5211 0 0 -15.5211 0 0 ]msf307.673 151.349 mo(ABSTRACT LIQUID)[9.04883 9.2041 8.36572 8.22607 9.4834 8.89404 8.66064 8.22607 3.88037 7.85352 4.56299 10.7251 10.1816 4.56299 0 ]xshKWFXCI+FiraSans-Light*1 [11.3712 0 0 -11.3712 0 0 ]msf345.068 166.852 mo(BANNERS)[6.74316 6.4248 7.65283 7.65283 5.82178 6.64063 0 ]xsh403.942 224.911 mo
403.942 229.249 400.425 232.766 396.087 232.766 cv
391.749 232.766 388.231 229.249 388.231 224.911 cv
388.231 220.572 391.749 217.055 396.087 217.055 cv
400.425 217.055 403.942 220.572 403.942 224.911 cv
cp
level3{
gsave
clp
[15.7107 0 0 15.7107 388.232 224.911 ]ct
/4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[15.7107 0 0 15.7107 388.232 224.911 ]ct
clp
/4 /Gradient get_res exec grestore
}if
np
417.919 88.3467 mo
417.919 90.5161 416.161 92.2744 413.992 92.2744 cv
411.822 92.2744 410.064 90.5161 410.064 88.3467 cv
410.064 86.1777 411.822 84.4189 413.992 84.4189 cv
416.161 84.4189 417.919 86.1777 417.919 88.3467 cv
cp
level3{
gsave
clp
[7.8554 0 0 7.8554 410.064 88.3466 ]ct
/4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[7.8554 0 0 7.8554 410.064 88.3466 ]ct
clp
/4 /Gradient get_res exec grestore
}if
np
53.0278 357.369 mo
59.7129 344.663 69.8369 333.594 82.0288 327.353 cv
92.2183 322.136 104.208 319.931 112.816 310.907 cv
121.182 302.14 126.547 290.561 135.584 282.429 cv
144.084 274.78 154.92 270.582 164.989 271.16 cv
177.095 271.854 186.413 280.997 190.93 292.251 cv
196.062 305.037 192.613 324.885 200.021 335.969 cv
211.274 352.808 220.589 355.395 229.273 371.289 cv
235.776 383.189 237.881 399.805 233.037 412.685 cv
228.433 424.925 213.889 433.147 202.108 436.664 cv
185.711 441.559 165.547 442.425 148.691 439.616 cv
134.979 437.331 121.181 435.302 107.274 434.739 cv
94.4385 434.22 81.333 436.402 69.2222 430.847 cv
40.8467 417.83 40.3242 381.516 53.0278 357.369 cv
cp
.0847486 .0569162 .0569467 0 cmyk
@
147.878 446.658 mo
138.747 445.621 130.17 441.077 121.947 436.204 cv
113.724 431.332 105.572 426.025 96.6929 423.27 cv
86.6357 420.147 76.0864 420.432 65.7847 418.824 cv
55.4834 417.217 44.7754 413.232 38.0679 403.716 cv
32.0059 395.114 30.1538 383.269 30.2305 372.006 cv
30.3022 361.484 32.0742 350.439 37.7803 342.447 cv
43.8979 333.879 53.5435 330.185 62.8687 328.717 cv
72.1934 327.25 81.7173 327.599 90.9106 325.218 cv
105.593 321.416 118.366 310.98 131.023 301.277 cv
143.68 291.574 157.236 282.153 172.216 280.822 cv
187.196 279.49 203.875 288.716 208.304 305.934 cv
211.261 317.428 208.373 329.897 209.572 341.84 cv
210.88 354.866 216.935 366.435 223.159 377.224 cv
225.833 381.858 228.604 386.524 230.125 391.858 cv
231.646 397.191 231.759 403.403 229.263 408.179 cv
226.568 413.335 221.381 415.872 216.354 416.688 cv
211.327 417.502 206.211 416.92 201.158 417.463 cv
191.132 418.538 180.597 424.434 174.099 433.841 cv
167.325 443.646 158.802 447.899 147.878 446.658 cv
cp
f
150.504 432.531 mo
141.374 431.667 132.796 427.879 124.573 423.817 cv
116.35 419.756 108.198 415.332 99.3188 413.034 cv
89.2617 410.432 78.7124 410.669 68.4111 409.329 cv
58.1094 407.989 47.4014 404.667 40.6943 396.734 cv
34.6318 389.564 32.7798 379.689 32.8564 370.301 cv
32.9282 361.53 34.7002 352.323 40.4063 345.661 cv
46.5239 338.519 56.1694 335.438 65.4946 334.215 cv
74.8193 332.992 84.3433 333.282 93.5366 331.298 cv
108.219 328.129 120.992 319.431 133.649 311.342 cv
146.306 303.253 159.862 295.399 174.842 294.289 cv
189.822 293.18 206.501 300.87 210.93 315.223 cv
213.887 324.805 210.999 335.199 212.198 345.154 cv
213.506 356.013 219.561 365.657 225.785 374.65 cv
228.459 378.514 231.229 382.404 232.751 386.85 cv
234.272 391.295 234.385 396.474 231.889 400.455 cv
229.195 404.753 224.007 406.868 218.98 407.548 cv
213.953 408.227 208.837 407.742 203.784 408.193 cv
193.758 409.091 183.223 414.005 176.725 421.847 cv
169.951 430.021 161.428 433.566 150.504 432.531 cv
cp
level3{
gsave
clp
[73.0915 126.599 -126.599 73.0915 99.3197 309.906 ]ct
/5 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~!NQ>'"0;V*"K_e,#-S11#d=I4$F'a7$aU$;%^ZH@&@DcD'=A,H't+GL(q9qR)n?@W*P)[[+M/*`,.nBc
-,'li.)->o._lYs/\r)#0>eJ(1;jn-28p=236)g83li0=4inTB5ft#G6d-MM7a2qR8C&@X9@+d]:=13b
:t$Tg;q*#l<RiAr=P"i">M(;(?.p\-@,!+2@b`C6A_nm<BAY3@C>^WFD;m,LDrWGQETAbUFQP7\GNU[b
H0@!fHg*<kIHr]qJF#-"K'bH'L$po-L[d;3MXi\8N:](>O7bLEOnLdIPk[9PQMNZVRJT)\S,>DbSc1bg
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /5 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[73.0915 126.599 -126.599 73.0915 99.3197 309.906 ]ct
clp
/5 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 4 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~!!**%!WrN,!sA`1"U5/9#7(SA#mq"H$4@7N%1WjY%hK<b&ebom'GVB!(Dmu,)B0V8*$$%@+!;[L+X/*T
,U=Z_-RU;j.4H_s/1`A)/hSe20ekF>1GgsI2E*TT3B9,^4$5Yi5!M:t5sdq+6q'R77n6*@8P2WK9MJ8W
:/=Y^;,U:j;cH^r<``@)=^#!5>?kE=?=$uH?t!JQ@q0%\AS,OeBP;*pC27X&D/O60DfBZ8EH6,BFEMbN
GB\:VH$O^^H[C-fI=?ZqJ:N3%JqJ]/KnY89LPUbCMMd=MN/`gWO,oBaOcbfjPa%GuQBml)R@0M4S"#q<
~>
<~WiN2$X/rD(XKAV-Y-5%4YHY78Yd(I=ZEpmDZa@*H['[3I['d<L[C3NQ\%&rX\@K/\\[oA`]">Sd]=bei
]tM.o^:q@s^V@S"^qde&_SX4._o'F2`5KX6`l?'>a2c9BaN2KFaiV]JbKJ,Rbfn>VcHab^cd0tbd*U1f
dF-Ile'ldqeC<!ue^i='f@SX,f\+s3g=k98gY:K<gtgfChVR,Hhr!>Li8NYSio8tXj5]1\jQ5Lck2tgh
kND$kkih6ol07Kulg*m&m-O**mHs?0n*fc8naZ/>o()DDo^qeJp%A"Np@e7Tq"X[\qYL'bqtp9fr;?Nl
~>
<~!s8W-!s8W-!sA`0"9\i1"9\i1"9er4"U5/8"pYA<#7(S@#RLeD#mq"H$4@4L$OdFP$k3XT%1NaU%1WjX
%Ls![&.fEc&J5Wg&eYik',)&o'GM8s'bqK"()@]&(`4,.)&X>2)B'P6)]Kb:*#ot>*ZcCF+!2UJ+<VgN
+X&!Q+sJ3U,:"N[,U=W],pjrd-RU8i-n$Jl-n$Jm.4H\q.Olnu.k<,$/1`>(/M/P,/hSb00/"t40JG18
0ekC;1,:U?1G^gC1c.$G2)R6K2)R6K2E!HO2E!HO2`EZS3&ilW3&ilW3B9)[3]];_4$,Mc4?P_g4?P_g
~>
<~zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz!!!!"!<E3%!<E3%!<E3&!WiE)!WiE*!s8W-!s8W."9
\i2"U,&5"U,&5"pP89#6tJ=#RC\A#mgnE$47+I$O[=M$k*OQ%1NaU%Ls![&.fBa&J5Te&eYfi',)#m'G
M8s()@Z$~>
]
>>
0 0 1 0 []true true []
/DeviceCMYK
GenStrips
} /Gradient add_res /5 /Gradient get_res exec grestore
}if
np
46.2319 389.207 mo
46.1406 385.601 46.4185 381.962 47.0894 378.367 cv
49.9517 363.019 58.8979 354.06 69.8657 344.079 cv
80.7202 334.201 77.8252 315.275 83.2524 302.427 cv
87.0049 293.542 94.396 286.237 103.365 282.693 cv
114.149 278.433 126.49 281.388 135.674 287.761 cv
146.11 295.002 152.447 310.734 164.049 315.847 cv
181.675 323.614 190.936 321.822 205.898 329.916 cv
219.859 337.468 226.385 351.713 229.856 365.966 cv
233.329 380.219 230.202 396.513 219.762 406.818 cv
203.101 423.266 180.479 416.861 159.776 419.14 cv
147.226 420.521 135.27 425.021 123.264 428.93 cv
111.259 432.84 98.7612 436.223 86.1724 435.257 cv
62.0415 433.403 46.8062 411.928 46.2319 389.207 cv
cp
level3{
gsave
clp
[180.227 27.9404 -27.9404 180.227 51.4182 350.288 ]ct
/5 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[180.227 27.9404 -27.9404 180.227 51.4182 350.288 ]ct
clp
/5 /Gradient get_res exec grestore
}if
np
2 lw
188.506 290.07 mo
196.576 299.507 201.735 311.581 201.825 324.198 cv
201.9 334.743 198.592 346.084 202.643 356.245 cv
206.579 366.119 214.248 374.068 217.343 384.371 cv
220.254 394.062 219.168 404.91 214.291 413.775 cv
208.425 424.434 196.475 430.302 184.789 431.296 cv
171.51 432.425 155.864 423.95 143.067 427.58 cv
123.626 433.095 117.341 440.739 99.834 444.208 cv
83.498 447.445 68.6943 440.299 56.353 431.103 cv
44.0117 421.907 35.6372 406.646 37.1797 391.333 cv
39.6406 366.895 62.2085 356.935 77.415 341.243 cv
86.6333 331.73 93.2866 320.096 100.374 308.904 cv
107.46 297.713 115.296 286.617 126.117 278.977 cv
147.589 263.813 173.249 272.229 188.506 290.07 cv
cp
level3{
gsave
[183.947 0 0 183.947 35.9967 358.054 ]ct
<<
/PatternType 2
/Shading
/5 /Gradient get_res >> matrix makepattern grestore setpattern
}if
level3{
@
}if
level3 not{
gsave strokepath
gsave
[183.947 0 0 183.947 35.9967 358.054 ]ct
clp
/5 /Gradient get_res exec grestore
grestore newpath
}if
1 lw
45.8535 352.514 mo
52.5381 339.807 62.6626 328.738 74.854 322.497 cv
85.0435 317.28 97.0327 315.074 105.642 306.051 cv
114.007 297.283 119.373 285.705 128.41 277.572 cv
136.909 269.924 147.746 265.727 157.814 266.304 cv
169.92 266.998 179.238 276.141 183.755 287.395 cv
188.887 300.182 185.438 320.029 192.846 331.113 cv
204.1 347.952 213.415 350.538 222.099 366.433 cv
228.601 378.334 230.707 394.948 225.862 407.828 cv
221.258 420.068 206.714 428.292 194.934 431.809 cv
178.536 436.703 158.372 437.569 141.516 434.761 cv
127.804 432.476 114.006 430.446 100.1 429.883 cv
87.2637 429.363 74.1582 431.547 62.0474 425.991 cv
33.6719 412.974 33.1494 376.66 45.8535 352.514 cv
cp
.0154421 .00189212 .00241093 0 cmyk
@
KWFXCH+FiraSans-Medium*1 [15.5211 0 0 -15.5211 0 0 ]msf73.8286 369.646 mo(ABSTRACT LIQUID)[9.04883 9.2041 8.36572 8.22607 9.4834 8.89404 8.66064 8.22607 3.88037 7.85352 4.56299 10.7251 10.1816 4.56299 0 ]xshKWFXCI+FiraSans-Light*1 [11.3712 0 0 -11.3712 0 0 ]msf111.224 385.148 mo(BANNERS)[6.74316 6.4248 7.65283 7.65283 5.82178 6.64063 0 ]xsh69.6104 333.435 mo
69.6104 337.772 66.0933 341.29 61.7549 341.29 cv
57.4165 341.29 53.8999 337.772 53.8999 333.435 cv
53.8999 329.096 57.4165 325.579 61.7549 325.579 cv
66.0933 325.579 69.6104 329.096 69.6104 333.435 cv
cp
level3{
gsave
clp
[15.7107 0 0 15.7107 53.8997 333.434 ]ct
/5 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[15.7107 0 0 15.7107 53.8997 333.434 ]ct
clp
/5 /Gradient get_res exec grestore
}if
np
140.378 439.768 mo
140.378 441.937 138.62 443.695 136.45 443.695 cv
134.281 443.695 132.522 441.937 132.522 439.768 cv
132.522 437.599 134.281 435.84 136.45 435.84 cv
138.62 435.84 140.378 437.599 140.378 439.768 cv
cp
level3{
gsave
clp
[7.8553 0 0 7.8553 132.523 439.768 ]ct
/5 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[7.8553 0 0 7.8553 132.523 439.768 ]ct
clp
/5 /Gradient get_res exec grestore
}if
np
260.611 467.948 mo
260.179 468.392 259.808 468.88 259.503 469.401 cv
259.038 469.161 li
258.971 468.863 258.688 468.658 258.379 468.694 cv
258.048 468.733 257.811 469.033 257.85 469.364 cv
257.889 469.695 258.189 469.932 258.52 469.894 cv
258.585 469.886 258.647 469.867 258.704 469.841 cv
259.155 470.075 li
258.904 470.629 258.722 471.214 258.616 471.819 cv
259.362 471.95 li
259.592 470.645 260.212 469.444 261.154 468.478 cv
260.611 467.948 li
cp
.35877 .201297 .147463 0 cmyk
f
266.099 465.646 mo
265.928 465.646 265.758 465.652 265.589 465.664 cv
265.516 465.037 li
265.704 464.889 265.811 464.648 265.782 464.393 cv
265.735 464 265.379 463.719 264.986 463.765 cv
264.593 463.812 264.312 464.167 264.358 464.561 cv
264.388 464.814 264.548 465.021 264.763 465.124 cv
264.836 465.748 li
264.123 465.864 263.434 466.08 262.777 466.395 cv
263.104 467.078 li
264.038 466.631 265.045 466.404 266.099 466.404 cv
266.596 466.404 267.092 466.458 267.574 466.563 cv
267.735 465.821 li
267.2 465.705 266.649 465.646 266.099 465.646 cv
cp
f
272.702 468.194 mo
273.032 468.153 273.268 467.853 273.227 467.521 cv
273.186 467.19 272.886 466.955 272.555 466.996 cv
272.246 467.034 272.02 467.3 272.025 467.604 cv
271.609 467.968 li
271.191 467.538 270.719 467.155 270.201 466.829 cv
269.797 467.47 li
270.931 468.185 271.818 469.196 272.36 470.396 cv
273.051 470.083 li
272.8 469.528 272.483 469.011 272.109 468.538 cv
272.511 468.187 li
272.572 468.199 272.636 468.202 272.702 468.194 cv
cp
f
265.552 475.855 mo
265.166 475.878 264.776 475.89 264.395 475.89 cv
263.514 475.89 262.662 475.829 261.916 475.711 cv
261.526 475.648 261.07 475.556 260.646 475.419 cv
261.692 477.279 263.715 478.544 266.034 478.544 cv
268.89 478.544 271.296 476.628 271.984 474.04 cv
271.302 474.489 270.478 474.865 269.525 475.162 cv
268.346 475.53 266.971 475.77 265.552 475.855 cv
cp
f
268.677 472.77 mo
267.927 472.77 267.317 472.159 267.317 471.409 cv
267.317 470.659 267.927 470.049 268.677 470.049 cv
269.427 470.049 270.038 470.659 270.038 471.409 cv
270.038 472.159 269.427 472.77 268.677 472.77 cv
cp
263.94 473.678 mo
262.92 473.678 262.09 472.848 262.09 471.828 cv
262.09 470.808 262.92 469.979 263.94 469.979 cv
264.959 469.979 265.79 470.808 265.79 471.828 cv
265.79 472.848 264.959 473.678 263.94 473.678 cv
cp
266.099 467.163 mo
262.747 467.163 260.02 469.829 260.02 473.106 cv
260.02 473.532 260.066 473.955 260.157 474.368 cv
260.83 474.851 262.862 475.258 265.504 475.099 cv
268.384 474.926 270.801 474.142 272.176 472.94 cv
272.171 472.745 272.156 472.55 272.131 472.358 cv
271.751 469.396 269.158 467.163 266.099 467.163 cv
cp
f
282.103 469.03 mo
281.808 468.914 281.297 468.721 280.72 468.793 cv
280.169 468.861 279.876 469.133 279.876 469.799 cv
279.876 470.665 li
282.104 470.665 li
282.104 472.383 li
279.876 472.383 li
279.876 477.837 li
277.945 477.837 li
277.945 472.383 li
276.605 472.383 li
276.605 470.665 li
277.945 470.665 li
277.945 469.777 li
277.945 468.097 278.84 466.994 280.513 466.994 cv
281.155 466.994 281.67 467.116 282.103 467.303 cv
282.103 469.03 li
cp
f
286.805 472.362 mo
286.628 472.332 286.448 472.315 286.279 472.315 cv
285.383 472.315 284.769 472.863 284.769 473.93 cv
284.769 477.837 li
282.837 477.837 li
282.837 470.665 li
284.71 470.665 li
284.71 471.45 li
285.162 470.776 285.85 470.473 286.73 470.473 cv
287.145 470.473 287.579 470.601 287.825 470.81 cv
286.805 472.362 li
cp
f
289.358 473.574 mo
292.533 473.574 li
292.355 472.656 291.8 472.138 290.972 472.138 cv
290.061 472.138 289.528 472.686 289.358 473.574 cv
cp
294.473 474.24 mo
294.473 474.462 294.457 474.729 294.436 474.892 cv
289.351 474.892 li
289.558 475.928 290.283 476.379 291.193 476.379 cv
291.815 476.379 292.489 476.128 293.007 475.69 cv
294.139 476.935 li
293.325 477.682 292.289 478.022 291.082 478.022 cv
288.884 478.022 287.36 476.527 287.36 474.27 cv
287.36 472.013 288.84 470.473 290.986 470.473 cv
293.051 470.473 294.465 472.005 294.473 474.24 cv
cp
f
297.011 473.574 mo
300.186 473.574 li
300.009 472.656 299.454 472.138 298.625 472.138 cv
297.714 472.138 297.182 472.686 297.011 473.574 cv
cp
302.126 474.24 mo
302.126 474.462 302.111 474.729 302.089 474.892 cv
297.004 474.892 li
297.211 475.928 297.936 476.379 298.847 476.379 cv
299.469 476.379 300.142 476.128 300.66 475.69 cv
301.792 476.935 li
300.978 477.682 299.942 478.022 298.736 478.022 cv
296.538 478.022 295.013 476.527 295.013 474.27 cv
295.013 472.013 296.493 470.473 298.64 470.473 cv
300.705 470.473 302.118 472.005 302.126 474.24 cv
cp
f
304.794 474.248 mo
304.794 475.38 305.542 476.224 306.637 476.224 cv
307.777 476.224 308.488 475.343 308.488 474.248 cv
308.488 473.152 307.777 472.271 306.637 472.271 cv
305.542 472.271 304.794 473.115 304.794 474.248 cv
cp
310.471 474.248 mo
310.471 476.401 308.977 478.022 307 478.022 cv
306.038 478.022 305.357 477.645 304.891 477.09 cv
304.891 480.798 li
302.966 480.798 li
302.966 470.665 li
304.853 470.665 li
304.853 471.457 li
305.32 470.872 306.008 470.473 306.993 470.473 cv
308.977 470.473 310.471 472.094 310.471 474.248 cv
cp
f
313.316 477.837 mo
311.384 477.837 li
311.384 470.665 li
313.316 470.665 li
313.316 477.837 li
cp
313.575 468.319 mo
313.575 469.015 313.035 469.548 312.339 469.548 cv
311.643 469.548 311.11 469.015 311.11 468.319 cv
311.11 467.623 311.643 467.075 312.339 467.075 cv
313.035 467.075 313.575 467.623 313.575 468.319 cv
cp
f
316.54 473.219 mo
319.241 470.665 li
321.609 470.665 li
318.131 474.04 li
321.632 477.837 li
319.256 477.837 li
316.54 474.936 li
316.54 477.837 li
314.608 477.837 li
314.608 467.18 li
316.54 467.18 li
316.54 473.219 li
cp
f
184.92 475.854 mo
184.92 472.646 li
184.524 472.03 183.675 471.503 182.796 471.503 cv
181.375 471.503 180.525 472.675 180.525 474.242 cv
180.525 475.81 181.375 476.967 182.796 476.967 cv
183.675 476.967 184.524 476.469 184.92 475.854 cv
cp
184.92 477.772 mo
184.92 476.718 li
184.393 477.436 183.528 477.948 182.532 477.948 cv
180.687 477.948 179.383 476.542 179.383 474.242 cv
179.383 471.986 180.672 470.521 182.532 470.521 cv
183.484 470.521 184.349 470.99 184.92 471.767 cv
184.92 468.002 li
186.019 468.002 li
186.019 477.772 li
184.92 477.772 li
cp
f
190.911 471.43 mo
189.402 471.43 188.655 472.704 188.596 473.788 cv
193.24 473.788 li
193.225 472.733 192.522 471.43 190.911 471.43 cv
cp
187.439 474.228 mo
187.439 472.177 188.904 470.521 190.925 470.521 cv
193.064 470.521 194.324 472.191 194.324 474.315 cv
194.324 474.594 li
188.596 474.594 li
188.685 475.927 189.622 477.04 191.145 477.04 cv
191.951 477.04 192.771 476.718 193.328 476.146 cv
193.855 476.864 li
193.152 477.567 192.2 477.948 191.042 477.948 cv
188.948 477.948 187.439 476.439 187.439 474.228 cv
cp
f
195.114 476.835 mo
195.686 476.044 li
196.154 476.586 197.048 477.055 198.015 477.055 cv
199.099 477.055 199.685 476.542 199.685 475.839 cv
199.685 474.125 195.305 475.18 195.305 472.558 cv
195.305 471.459 196.257 470.521 197.941 470.521 cv
199.143 470.521 199.992 470.976 200.563 471.547 cv
200.05 472.309 li
199.626 471.796 198.85 471.415 197.941 471.415 cv
196.975 471.415 196.374 471.898 196.374 472.528 cv
196.374 474.081 200.753 473.056 200.753 475.81 cv
200.753 476.996 199.802 477.948 197.971 477.948 cv
196.813 477.948 195.832 477.597 195.114 476.835 cv
cp
f
202.174 477.772 mo
202.174 470.697 li
203.273 470.697 li
203.273 477.772 li
202.174 477.772 li
cp
201.984 468.954 mo
201.984 468.544 202.321 468.207 202.717 468.207 cv
203.126 468.207 203.463 468.544 203.463 468.954 cv
203.463 469.364 203.126 469.687 202.717 469.687 cv
202.321 469.687 201.984 469.364 201.984 468.954 cv
cp
f
210.216 475.736 mo
210.216 472.646 li
209.835 472.03 208.985 471.503 208.107 471.503 cv
206.686 471.503 205.836 472.631 205.836 474.198 cv
205.836 475.751 206.686 476.894 208.107 476.894 cv
208.985 476.894 209.835 476.352 210.216 475.736 cv
cp
205.089 479.589 mo
205.646 478.769 li
206.232 479.472 206.935 479.735 207.946 479.735 cv
209.118 479.735 210.216 479.164 210.216 477.611 cv
210.216 476.601 li
209.704 477.318 208.839 477.86 207.843 477.86 cv
205.998 477.86 204.693 476.483 204.693 474.198 cv
204.693 471.928 205.982 470.521 207.843 470.521 cv
208.795 470.521 209.645 470.99 210.216 471.767 cv
210.216 470.697 li
211.314 470.697 li
211.314 477.567 li
211.314 479.911 209.674 480.644 207.946 480.644 cv
206.745 480.644 205.924 480.409 205.089 479.589 cv
cp
f
217.92 477.772 mo
217.92 473.144 li
217.92 471.898 217.291 471.503 216.339 471.503 cv
215.474 471.503 214.654 472.03 214.244 472.602 cv
214.244 477.772 li
213.145 477.772 li
213.145 470.697 li
214.244 470.697 li
214.244 471.723 li
214.742 471.137 215.708 470.521 216.763 470.521 cv
218.243 470.521 219.019 471.269 219.019 472.807 cv
219.019 477.772 li
217.92 477.772 li
cp
f
223.912 471.43 mo
222.403 471.43 221.655 472.704 221.597 473.788 cv
226.24 473.788 li
226.226 472.733 225.522 471.43 223.912 471.43 cv
cp
220.44 474.228 mo
220.44 472.177 221.905 470.521 223.926 470.521 cv
226.064 470.521 227.325 472.191 227.325 474.315 cv
227.325 474.594 li
221.597 474.594 li
221.685 475.927 222.623 477.04 224.146 477.04 cv
224.951 477.04 225.771 476.718 226.329 476.146 cv
226.855 476.864 li
226.153 477.567 225.201 477.948 224.043 477.948 cv
221.949 477.948 220.44 476.439 220.44 474.228 cv
cp
f
233.857 475.854 mo
233.857 472.646 li
233.461 472.03 232.612 471.503 231.733 471.503 cv
230.312 471.503 229.463 472.675 229.463 474.242 cv
229.463 475.81 230.312 476.967 231.733 476.967 cv
232.612 476.967 233.461 476.469 233.857 475.854 cv
cp
233.857 477.772 mo
233.857 476.718 li
233.33 477.436 232.466 477.948 231.469 477.948 cv
229.624 477.948 228.32 476.542 228.32 474.242 cv
228.32 471.986 229.609 470.521 231.469 470.521 cv
232.421 470.521 233.286 470.99 233.857 471.767 cv
233.857 468.002 li
234.956 468.002 li
234.956 477.772 li
233.857 477.772 li
cp
f
243.407 476.967 mo
244.843 476.967 245.692 475.81 245.692 474.242 cv
245.692 472.675 244.843 471.503 243.407 471.503 cv
242.543 471.503 241.679 472.03 241.298 472.646 cv
241.298 475.854 li
241.679 476.469 242.543 476.967 243.407 476.967 cv
cp
240.199 477.772 mo
240.199 468.002 li
241.298 468.002 li
241.298 471.767 li
241.87 470.99 242.719 470.521 243.686 470.521 cv
245.531 470.521 246.835 471.986 246.835 474.242 cv
246.835 476.542 245.531 477.948 243.686 477.948 cv
242.689 477.948 241.826 477.436 241.298 476.718 cv
241.298 477.772 li
240.199 477.772 li
cp
f
248.036 479.545 mo
248.197 479.618 248.461 479.662 248.637 479.662 cv
249.12 479.662 249.442 479.501 249.691 478.915 cv
250.16 477.846 li
247.201 470.697 li
248.388 470.697 li
250.746 476.498 li
253.089 470.697 li
254.291 470.697 li
250.746 479.208 li
250.321 480.233 249.603 480.629 248.666 480.644 cv
248.431 480.644 248.065 480.6 247.86 480.541 cv
248.036 479.545 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
[/Gradient [/0 /1 /2 /3 /4 /5 ]]
] del_res
/KWFXCH+FiraSans-Medium*1 uf/KWFXCH+FiraSans-Medium uf/FiraSans-Medium uf/KWFXCI+FiraSans-Light*1 uf/KWFXCI+FiraSans-Light uf/FiraSans-Light ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 16.0%%AI8_CreatorVersion: 23.0.2%%For: (Ayib) ()%%Title: (Abstract liquid banners 2 up-01.eps)%%CreationDate: 3/19/19 11:42 PM%%Canvassize: 16383%AI9_DataStream%Gb",KpKlk%qs\q7g]OK'MElK>=@`]?2GgX0!!+9p@":CQpQ+4>^X#RT"@NO-hc9/R5&/6IVjEfFr-lcO2To:1.N/9SGY)h0@gOe]%^^8*q*l%_O]276\b/d&OgJFB1S8"5;Fus-rL=tGR-@RF=n#93=-]7Y!eTKmoYG<\F\t_m?BQg%^8i)aFdVO\6Ztc]Fc\$jSVeTB#%2B6l1h,[2#eFF#j`=2X6dW@?XQjonP-)iSLDN`MUeCF3^=gq7-boJI\n`Vn0N'Xsi_q4tuFH181c^>!mafCsBhu\3oYU<1aO.C7-%h([/CH&@7gNfT?##+lHG%o/i%afrE:E.=Q^[<BSi3h"HDgpDDcNE/D$lg6Dt7aDHWUSTI]'pCp+M(n6)0a.@9]WfQ\[('@s'$qk0%JC\C5MREj#Lo10ue:2YSLT46Q9ab$sfu\$E!-jZX2QaaFPDcTHR[6_X@@fiqU)(%0NO#QOq0r:,Y$`7.K,jfs$5=2\Wcip#%)%Qq%!:]W,!+MHH5?5Wf[+.INV)A_$'cpqBj;Ia10O?Lc^n3"UIgDM8Ook'(o.kF&;f_BZC)aR6g?Eaqo?`1U#?8s:>#fA+Yg?X2O)c#L%e#$.eOIN/\K(T?N&f)J%dGD&a@K=-k;4BI-JB\_)%^mOtVg7JafdnM0#,4C&Xs@D2-?,,c<39g3F8Q0@G?^Yc%ipYBFcDF8L:23S%)s&8D;u**g9+)?:XJmO/Bh(Q)*_-hh@"2H`,"\W\mAQ/R%e.%JanCU;,+&6HMH*'\X[SJ;Acd<YFS4OI1+6Y_=)d2r?K3N<l%u?>%<RjrHm8qi>ju'2ujs["tb;=51Sqpg?26=*<UTDirCKNsg>"-&(dI*[+-dqCK/M#AOC.??"5ZNf.!8io^7l>Dl79_>ep59Ws\up3#%/]C*pB[n;'US0Nf73/UC@TeE9b)qk7qIq-:'*6c<X%6D=een8>KptQ0XB$NS16QM?9"X6MheME3G!g%g#DIL(J#^aaUH<eVo<)?e%^L<EY.Q!tZ<HR(og81s4/p[[8\8V-@elCH1aKk>31SXkQdZk##"n'f2M@LBt[43<@>4_\HWh:Y\[:+0![F,pt=dT36Y-ei%m?UXJ%,GIU8d:P<6?SZ(5*bgpK8.i7\s'\A$']VZ0(KR%#C2i(A=k8%8LdCl.lf7oOIo\9=Mk\=rC#G+_8a29T?fC-0Obs>Cg["r(7p=9#%;+:tGBg%QaU=**>"2l!PZr8clD.!rO7!,YHdW$mCS<<.K/nq"+A)5Hjfeq53Pd(R,X[6/\HTemF<f'JM`20f.9C#Fm;6&I',*(@m%+W<tp7/RNu*u@jJ=<K/W[NsQ?WHF\1`U#L)V:u#21n&/B;Gs0ZVi\iSPWa=F[)%.VGgG<AAPfV"8iB<Hne?8[cbjpOe4eai7LDOQ%b$,dsE+_$<qQSSY="G:Z[ICN!c9;rc+*crj3!WsLMMtSU1RrfT,Af<u-$_NQjAOmHM@LG-6u,gg>WY.j8cXtZ(B>JY.Z!?9Kng@5%U^KF(FYlN?CR%Kp!,Q%E+jr-*Ejl1?8qRm@8EW>268XjBW)^h&+eriV'GHXFY`4#uBgIH&m869*Lofn"N):j1$POq>?YZpIH7=S6%Klms1kPWXqdEnL1eplGC>+i2;DP$s]3T(ccd6)%noL*rLl!8Ou2N;T)e#XCX!60ul"OrUdHKN0W2n]6>&)d?*0^E\G.BCV,4UWcD%CNEsKq7>9/eOCLcn,@dB='uG%s8>j=hJD]s/l3M.jms6QWrT);h(LRt3H,&D*op-2?hXIpY:Zdi)"sW6FZ8"OU$>+jdB$>cH@%YX%Be!^:=ZtJhl]>%qOFma76+(doU.'$p>0)0lGXpYj"WWS.FJO"n&35:2B_U8i/dJ.@OBD7S\!Kq,@UV'rQ+W:5D:cE(_pJ9tO*TUN%a8$-.68`&"!:nsi2D&%fpLtE\m1(+MX3R7/eZUd3+*b:DI9<LECH))!47D6l.PBt#r[54,/n?P@_AF=QhVh!'1#'0M)=]*Hd:3m[%?pNt)+QO3ZjSr(B-_G(kM.2<t"kF:&:N*tJFjtsf)N>NT4a?QUV57WnoLe9C%C4%p4"X>YjPdaLdp]H.a<lM2Zf;L"2Od;@1jmif%"d.92BC&nXHB_J\6dS8HG!0)p'01nBE(M\$'0O5i4Nm?/^di[4:[g-3'F97(BRpmXJJY&4,U<Lq84A@`)5X*EP`#mrBN0j9U2i(>%&g!/LBos!1OV\0u'I>IWb$mse,YFdW7Uk?7,sdD\P*D'h"Haf?<.[k!#r]UGTZ;_ILaL&.+sA=sM3L\YA5]:8>%V;Gk2>0/6&$0:%KIk;<3L(kQA<MOsL4`('8M1<:L'%XDPi.'mP#*j#9Vt\j*2FrN_*Oud'][jO%)?g2I$"+Gcu1`E8('S3I))Z\8eDR!Dsmp-&r"CF%0Yp3r3*;5i6Gl(iOs$'O&jcp81bRHFP6$Z+!%<HqkQ`dO#j*+>XM=hi.=q$ir^iaa_5@:?hAMgcF_&9)i"KcM!l^moZRCl=iiO:4%%Mi`9cTLt:*Ah.(EBu)>3/"OAs1uO24$4s8m(n'gcsmT$E-N?=jOf)%Ij@s&O/+/Vs09(a".!LP03IjB@[]rWdQIpn2G&`K&k4V'%"p?._I6<lZ#u$F/-A+_e)FTPF$,BCN\2aSa-\;U2*65<(_pKICOW4D#9!U4A!+?IjY6:/(3=j<=$qmo@9<n]Y/BPt,Jrpl^GYJ0A%EX^,F%*_TWaUj!9,V@IO>,"ID6\4B6Nb3![VJ1o7B`cYKoM@<.THrIn.)l5qA,$V4*;ma-o5KnCfSKk)rpU>%dM!.+b!Dc>A,X<C%q]<cCJ!Nd((/_pVOA9e7_>q/m(+7+r2#;b:TF`cLr$O'-^_!/68MB7<+d+#Te4AHVJ,ZcDUc'7t6P;5.)W5;#US:ck4NHqN$d0/[%!>g>IN#gCi)T$F$!<#Q2h[&o!N(_>]dGlbgg`9Lg>n946'L<B@*%V,h!2UGW6p`(1KM3XW9p6hkdNeq%iBdF!UdQP#R7pH\78bt]%:b9S<DA7YQ';5>'*h!)[VLc\e;IF_]QsU&U5_(i@+;cYcL]G:9J_26!*#+2A"!Y\dNC8l7"NXf),CgSD?nN5"Y5g=3Y`'h5/e'#K%@I#=n?k9=`"`hpsq^C)41>0-u9[?1SYiu-d@d+hB(m/M81PO'u+d$.V8SfZ!L6;Yhc=(4>I\@*,RUA%9@?XRq!e-:-"9[oi$];#6%LTRL_gJQ.W9(8=WX=5.1S6?-IBi6OX.a!o*>DCZQVnfm,?sa/IeZu>?[]VsS^=q-QgK12-Z"XAQO":<mD+?E/VF42e7LP!JD_^>c%mEr+[JDLAl5eOlWM[A0h3!/W'#ieC%JN-"d8t?+Y!=g9'7hD!eT6T9)8$]o]Lg>75QmfE+$"+_jrZX"H!;7Qj"!JGSJ;"ORJV_1H%JD!Me5egfI5k8=.P(:#PjB`sgM=`.!)1coYNL>dG=r$:&%Po/]FY0g"f"+EHJk5tp/C=b7k"%H_q#AB!^Y9kkE_sHeKB3dFd^GZ,%.:l@J^f&p^&sD&lQ%22'L.NbH(p%It$pV&Ma:8=@,_1e@bY^Ll(CQa&"2]W\J-2"NN!Wla&`cC]7cf/3)8IC!CeOgf-,E;D$ncjV%f+HVUi("t_TKk1r4Ffe1&/Y^A#71tT-Ph@C#oWh,R08gOJ6[rhd0\_k3Lg)qs2#._3WYhD(P(JRrNh&fB"8,u3O%<Ab<`@;"OXZu%]PT\IgKD>[!cf,?834$%@!N3Ihgdip30<H63=jbjYT4"mKs7'QbDi_G$1(9/Ci9CP'=LD>q%T,r@JLY(B4:TOQ?RoY$d6H'ZBMM`%%+,0?Kd=m:5=Rb%4[M>!59^(O!?qRh"!Rjl"l8pt$&;kOnAoHbgs^JdH0i5K6XKOI59(7FOfml$&,Y=e#?)8_&j,%^*un.ckBd_d%h`ZJDU1o[g2I/I/dLQ'k@1W]@,fhN,)288A+Uf28U<#bg#"0T=ru_R].KaiEb2>?<3ZIO5r"#8bIRohk$4jP]EQE8fXcS&Lb&Shr%SeJqmQ\4IS"bnAE\KcUZd%>S0lr^HE*V)h,V/m^-R"KK#KQSDA3HAN6kct-GA+5\t.S[cpc$;^^P-YiCO"E.cG:Zd?$s%_^#AZMF%?q$PUfgcZj6Fj!'m/r7Pic;+;O_SF3HF+/5ar]n5O9r##6!pLnCE[1H6c,"D4V8I1:$\JAJJGnd_?V!-:Qd;4m`@2H@4])oEY3tf%#D^Pp?7ZDZYZrB?9OLF+5l-T#;-;V:+C^XM+e`@am"A>J!a6DA\B+g[#hf1k<du;oHQ8tG$IkTBj<Wpo.5hC;):E(eO%EH'EM0]f%crN`>VaM)<E!AFt`P>7LqBfV2!qn-X0Ok6[oNYPf_%1+he!>7p4LS6ZIk?_-i)>73Yl3j#hli=HfG(dk4n"j*4%,7n%OI2]"KJ$"%rG2["4\3<oFr#WChAuOHK,Zi'TnDSM*rM(B*0fK&rq,"_BB7r7jPJi=')b2_+/40OqhJQ$]R=bm_=eD_+(@@@HURW,VZ&i2W/+AS%hED)>^m59GB[ITs":dV+Cqu5_97f5mLdCa*`jQpkEV..q0\8h^ZlKKLOIA_o5tWe(TlD!S(T^`\]RIp'7gb#'3,nD<W3LMh%n/-B%"K`YN'"dSQ@Sm"_#0A(3pPHSB+1V"m@tng,Q1j6#3:dsRkPhRPL:$N$Q:@!B*(eaPb(KB<LIZr`E00)iO*s?CE6o[Hbh*$=l`jIY%i8=g[YWmY3[t#ZGi%bAe6OEsc[oOE`;ZbWhFCGFDiuNY7BEMIdhufR/ihB;)(@6?d:86i@@2^L%n;8oI@Ptr`@@ffrL;>kKYan"b%pVL$Z09"u,6&Ab/!f55"klMVgNX)$s!r6B2+=TB\@&47*NcY:*Z3aECM^&M%#NUubo#KEtF<l!"ifLP?Op"=o5esT\f[14J++b^I%E^iC:UI]n9[:19%25"q'PY<@,eX+)&o8)!poL%8S>_^l976V\Lg]U0C(%2E9SADW$jaVVA_eE#H6^&?JL*]M53l'*h5"I&^9c[^p%bS7e=mfL!`$fCFZE4h6@I4N>+R5rhn-q/,,03N!83e]Qt77UC!M8SSS-r)Hf(>!e]D2<Y<$0@U8RsfVY-D^47S.dcKIq2]<,]MIt%!VL7haNt0CUkS2]au".#56q>iU^]E_8:`'tnEN4FCa!GnF:89K>#%0dG)5-Ba?.[PpQ&jU*h./Fkn.&?1Rhq^iok3EfUL.&QE<*6%'cijhni16f6n9iJ1nV`sf6_0hbFZpe*LXD#?o#n]AMu(/IPtt`1<U#mC$10#ct&GbV#""o"6o$gc>5^g#"e>E!bc%VlH0I(LI5aK%5BSh'4&^e-/'eHoZSXL]242#pUdlE2<A%mVi#"Z^2.dKD1N=1FBHCpP(dAU$V?kLAF&Aptck!#6T;A"5cSp.+9fV[g.Aq/!:6Xk1%4L7gCNQsJBRGo**9V1Ee*1fBb&pebH-I!Q*46CWO#s>LA:9H:Dn*IuNV2N/:6n)da2.2u&0Ve90:&L-*O,h]XdJ'UZB8U:\/MiiN%8W;_;U3?7,T6KhXBc"@ID0FuEHJ+V3>g)n9M\R1-T':M9b=,(_Cl4%T.%HPe_7:3cVbL8DAR_Q1XCMXf:Qu-;,`0ReOWZBV*QaF0%C1JSEnj-Ht:5VlTkAuh2PfHO4E;`poiOM5iB+g_;N:An:4+fgF4ROsAUKNK%]YnbE@O)+3S:9reZ4FieLXDp8plrZe\q-M;e'eb$%&$t_3p1?0Jm0ik=5P!1N-I^9W6jL7(O.@a;T&Fd%#i=YJ`b,PCgjmImB#tL@NV6W^p`lL1Uk%<=.*mn]jhG.F5Ff+\r?eCVr%ZBs%8]#e<^IkC\]q_$f8H72Oj,)Q]St$[0'qNJcINq06Ink;$o*522kY6:9;E>gs.s=!hHdfUoM28%.N0Ga@1qd_*:%XtH7P\@^qTmN\%c;1fNDqbp*"T(-kOisV&K%p)2HI$!/kRU,N>%MJ!>51=m1pUqr0T;i0I!_GnqF<&[C9Bk.97Juj#%$]bGg"PfGSSG@piSjR5Ru??%FAUeWD@.!r&H+]BE;Xeea3QDh6d.ZNHE3o*PA]@,b#!*c,cJqqM\49nRd>.@@TQX#-.OR_XK!lZg["#1TQ1F$WOBFMHfa-8rqUR>%*emmdd$oV9oMQJ:f"DcXeG=7mRmt,eF\5T6ec<iN/re^HGAdS<l?kXGPZuM'h+"j&;1?^hRBqbi%J7L3aU-uLYPfG1=Y7-_-\HD7%TYVuh#JI.sN]KX&23j21\u*`F_Ha-.XZ;)$SV@W>rH)`D7b92jC$R?1pL)5GeJAQ'IcmYhha2?64+C`[fLpBLKSZ^1]Wl#R30,aF%6bm7=\-rDoKRh9r3<[8>QRM]uTs^4Qi7nQgY-Skd(iVZK5hESZ)$;L$^h!rL*h$XK\;UIEa%OW8MudRABea)4&G9<qUKJ_-qqt"C%J#I\-VNd'irnFbiQH?tJia4K$oBM(=4(VRnU#A]GB5k,HPs-4uU>DGM^&A81h\UPDBr0R%CJ%No$KF60fWNo1ls;c>^Ht)p#K4<l%.Y!/kRRL9>?)\^,8mC[VQ]/nKr[`eCn`4"H^,"CcYCuYMs/.b4`,StRT=Xo9UL!`FH-c0CN-<gS-m^`X;J(JpW7"R8quJ?^qq#Y.%M@;(CC7$8O1E[g5X".fQhj2YhS*j^3?h*`]S/'+ud;4#khZ.[nEKMF[Ld0k=/WtRn`lbKgLo&cB5ah5N!'(EiAkWV\OXlSNZtAK3%QB^([a]5?d>@LBE+(OiRU[L51n69%ZH(TMPd<etV6XL`arPis%]]]LMetP@I-Z[Q9'qJ]uX\QJ5K`2$<gf%`UEl\Om1Y3=\YDqjT%To9^bldQhfa8J-i,2(;1:!L?*cHhohs7FN9#Cjd+BgS_ed)Cj:B?qhVapO>2eZ>bVPDeT:bpmJcQm@0"*6X%+bCrG._*ia]Kh)0:%QVTrLCYI$Y/p.B?RenC3$,b+9;cS=XSdkXYl`8+2lSkTd*]76t1=n&Ul*N$Xk_&-W0eE9XMr@nCZ7(pQmO;(X:DoKkjmT^VL=rT#%cdKGVkjoIr/@F46Bt&#Ue%XYMO7$@`>3`IjE5KB56J`U:N14m>G<N(70G6V)9.()inr(),G6U[`\WhKnh%#>1IEVkWI_reQ]\Mi2%,8e1=Y63Blir=8,K=R8U7BoOE]PGELF[HWFRdHZ(YBnm=4`emHP)o(l3##Y>fqK<cpCPTN`','%$eI1=M42k/Wd8"%e^>udWV7,l%J%!GkUt>&:q7bjTR3PjM[reIB2Ul@%<,!qU9d76`_u&kd*'/48<da&d5O&uUB=0MX._hZB;m)Gi/4>`d3c2>[7VoNH)]-:':S9YB%:L13]4K?(4a>)kpn,?&17GK$)F_&3?HGDC+ImFUhMtC"]>"M]@FFBIoC\ej/Q(?q(39HXaDhhhfSR7@S0o^p7_Vi;'5>SH^U\o4.%*)I"``LKMZ=QMb3lg,Oe,5MY8qdd$5qU=CX<?+N>"\L51[>ssu]d#V;n-*ae1f_Nfq\^\K0:a$Lf@W/7I/]UBY$DA>ja,aT@1_4W%Dn+Brc4G(+pT^"R"b8FhVL'I:Q+DtCoG(>#3]X3f;.QCX[DiVBr_)^Y/GAd]+^qotB$TDKd^NF=iuXp`8Vo"`ZC)RY1$;I*?'ig#%^>ZAcj`_o(Tj56Q1[b#.>I9)?mcA:_CssR]S8mqU0#kbr)454-(X@CMf:hj((='FFBXr(o\Su/kE+UG39j'(>N>KmaTN:2[jaY%!%1So$!E5k%/MrKRHoYR"6a>)kps/d*_PePtj)>=[oMB;O7:D#2(nt-dj3NEYc,#U&_Aq`#l86Z^:EHh(X**W9REI@-j^<Mt+@cgh5%qs$;iQ='K#Mcef5$^[>/U%*O+<cHsg;r#-o4jR$@\^GEOIp'Os#(EQ/QMPHth\Ji!,u(nSFPjftH;bDMQeH;Uh3Qb(CU^/3[a]1f%mC(M^hbC^CVi@9\RiMH?9$T<`s-">UKpj;m$IK8K`;c0Xa>NH[+^,58o8RG#bIV$6BRtRd_s0]]NDFc?r^1&I!`bW:r`/W]Y5E[=%m=!2sV?aM@=flA^W?2[oY+07+8k5I]58QhL0A'[-@8,E/A$Pa_+l2U<1B3j3/GH,HmSe`BoS*1lZs.4A)Rke[dQTN@h2b"^UukVM%G55rcmj2HXi?_Y%96fDS#3YJ?"qS@rr=,5L$!V#uaC\a`WGhRn`QsO,5C3_+%%iSfPh-(NJa#Dq_SE&S=NfruKmBeM-LmLFh-DcS%/Y`c+IC;4+EW$Etg_ZrE6k@;VdgN=BM"N4m.0i"4dJ83aYWcXcOV8<&.q3\RJ4uA^Ers5&2+?<dj8)iUA&ZqY[>*CTDdjL.L<^Vh%be"&W*NQM;QLsWa8,3Tfl/GBdr"`u_Af9%f/]?cKo5ahU!haThs#f&-Mp(qZjns1lKpVDWbPC>kZ0ZN1Gu<^r^[HAEQLiGk+^D8I%BC'N1)/+n`c/a1'kFC]oLG[oAQK=Y.EmAqjkPR=R!+i91l*f,qd0)tIl(6M`eXPGV%SJAD1[U8g<9M^rql/klnW-oLFKJa4_"1A/%mB>dn`6i=lmod/$o3J[(Y5`;P*3M-U.WNc$Yq>;!c"bK/ei3RZnM19WE%/<co\JV?$>u8`>Gg?X)J&9L_dsm,Ie.MZ9G"7nWnND_%GH&TtC26fop-UWX[1b@HEm-5&k-TF-AV0?VG9h4"0i`A+QmnB`W:B[9Lu91*jd4Q^G,BWtdOAkCnm@^]OYrZ[3'k^YMq?7q<g[o:%lg_q-!74Es4dA;cEu>@Kb@nB7&t!Y01L>p*?RE.BOSlQk*n(O#htIl#@.D@?:sPTcIU@)_bSfO4AMRndbZQ96QH>Y.12!$!=XJ3=%_a^ENNKq_m1HRRoZV9N*G:^@"k57e+k:<q$G?^Cj8"$?h*@EFVC?dm!c10%b/,kOHbq^+.XkkLufCajh^-.8K>qMAsF3GRGbO%=(%d#QD_5]H..ki[>6jjUp@:/936V>$<'oF"@VEeg]l$2nn%/5>=ERaBrLg?.4Mc>%>7`I]^d[ea#d>KojmjfVY!0oiFX_me=LlG'b"%;nf,nNIUr^h];QJ)]-$@a(r5*_0e6KMuBrrld(-J?%7hL(]AFkEt?>+oABc4h`7$gGun`MV:&C+82<lH4Hm?_1bFg.OT).eK\n0F%2\$VcKfIue$gGhWmb7nb,Ye'innCghAHc#Ipua#n)>>i`UQoIo(h]37I"VFU$+3,Gl^E(d?-9A?-te+L]pJa6:AuC7nXn\3qAZ:r%\7PMH0a"&e:4EQ,-2ldDOCe8u!@$SndfR_ba"mTJ:O7GWr`H$^(+T:Q*t#)H&D'ck=L@cB6b(S%>?URNhruh[;Ff-\%*e`kGH8#B%W-UUT2MGD6(`$\H+!U&tQ_1##<`>mlelA1cpQ<cmX\T2+C#h?ZV_f]ZlHCQIdKN@;iU-B53hN$AG.e0nfkk7c/q;(FR^:-VMq`8.%mH+=?@ssfLfRN-ID8.o[IAiN&_`_^QiQm!8ig]?_[G61E!I%n>_4b')c'O6jl]6"-%/3VLnKe\,-gi5P-/#)^G>n>gRA<1$/9Z.I%N<N!50)'p"R$[8RLbTYj(&T"hV_-B%'BACs\-d'WR$Of"jt'['SojS;#0f:NF2%cni2f%:fs0L_:LS?M3c0e?p.%r-^Vi@AbkrE<%Sb[KC_!@$ps'Oj0/n;\.$ohnrI2N461lc,]31Wj2;;a2:>Xj;%.ggCc>CX[An@L=QqOV]"lWl93@GlNfJZ]<h$j2i)i%b^GL4RN%%nFo9sp)Aa;1Vg@+"6V3D%$BEn&=`oe\ISkI%AR/c(&-;Z42uj/o(s!$^$Xpa'_;pqcEqr6JpatEZ$4i&DD4*XOQ?rkJ*?fYrXKlS%!o\@PC&bO<69[KcXb3fiI6i4XW%4]jb\Q#i>"VBPr7m\``S0bXeD7%=mF%WAApTcHKeJ<[bllOjaA`L$io5gEpIq%TamMFcSi`K;%HBoVj(G!*UhD$hV*ECqtJ)AWGr\*u36k`$'J%XTcCb],^o5i0_8Q*9ubhs!@ebO=6ri+/H7tY]/j$)NjEB53^XnM!E\mF":m[=le%Us;HFiC_9Ap^^c#nRKIp@^p%KL@Y)p(P["Em>n9b`CsEJ7ubj(&@?3nU\rOYh&3(7qrL$_.'0nmE]9c.ibHRRFsBaoRHFKA]*69A%?9#4Wj5Tl`9CH<R4j8u]n/L7f?5*perH<HL,UED,),57.0^F/+q2M_,A">WGHs^mX4Y=@F^ZRa3SYs6b4QUEW?<ls`HVPE*b>m-.%iE@eGV(_k9a+#85?Ct-D5n?reo3^$g%EObsBUjV"Et-3TKbI3HR(3F>]iM:cKi1rFX]'#61OO^]OmM;58`R@jU#0m![B=XmMDd$f%?(0+n0VRq-gmjj1pV+GkK[(N*Q6u53:$?LaD=_X7B=0]l$i59&ki/D<QQMK_A'aABX,t:Dakn&Xij$H]r#5HVh:0R6jt_iRe%OPq%G6H(-gY1m*^[:baL1ZSBFs=VQI>g8Rhf2:UI-.#J^#BEm1$@B$2&'`Hod2DO@+E\%[68s2g`jdj\m_2AT\DRYNc4,&Id:iJ54qpk%0+t5&hGPW[g=;bg4[h]pAlFgf8QgHs9\IaA2>E+%_4khfnNE3?r]]5as"qsD^?W?]#rGG/86,GDrPH=c>g*82BAQdOFT7p*7<H>9%,]io&je@U]@XI%j;N'F3<&:A=o8lD/(HPK$f/`)U;Uj6tfs7&6FZuAY\G*b,#Q,e%P3Oqu(Q51j_Ru6)0%k(bfe'mflp`UmgOaI8%oYh2<E'/e[p+D_)ZX%SN[>Xk>rpQ78q9=+0jumGL45T3GGha(Fk/?FhAkn'eKNI2j\ip@pR2;+c*mZI*Jc<YK^30q"o*Hq^Qm%=L%A@((kPSLdKU-$\67Pb9Di;K$0enn!\C/*jncWLW=&Zd??]aK=rptJ90J64^eW`Lsfm@*cKBe!-5oOc?'N,eDEYOsTCkdjg&XJ0"+%?l41mrcUrB0omQKhQSjS)#_fXrl6.00JXLA7ml%<Q=<^MQQuk7M[mm5J+Z#HG1:g^R[lRpHbJg'*&ik,ReQqp0H`95VO+(^%N+:9%\,cnL?>Hoi[9&%NAj&PL+BaGM!JUo4'Va.b`K5?7=?+HE$r<T2JY>X>T*Q.UH>aMD@"I"U:UiB9P?59e%m]MFp"hnGhD3m#\\JAe%b+8lFSIVaRs/OfBJFDI"!_W3,nppUqgX(M,!Bl+HW'Cq+TnbY"@5p)?%R;CD38s*M6_d-sbu61)6W,2Q7I^]-7(kORHW\?"@)2sH%$4b-3Q)6Q1=$%E;6^0)&$p53b.2'N0-)2:]Sq).nlNG>6]KO3Kr<:\hG>+M.#BXAWs72-*pZ+s8d1s12]=[$7Itffa9rfe@3c9lJ%#4OArDq[%Z/[Wldo]E1#Kcg@+TisPZ%1:[*_Ji85E"Su+5L6%Ded6*a@LpC)]dN;UBb+;Y)RFe+H/3qmIldAC*mb[ODrLG8%n*g\%'V5sTg`.as";1u@+F&Wq'8GUN1htMEIR:;-e@GZi_2N(dg2E5l(`'NqZ7J`/<[j%R:d5Z?dPQT=@5g^2c-n3kE:fN0KjM*e5R@jN%Mi#kZ%RCH#?nk,B7\DJr)2`'/`)e(u1lpV2B4KZWqs@:GJ6RXl@dUrB!llIK&fel2Gl.[^j[ab3'egc3L#i!QEkQ'n*&N63cl<Y*%5o"&ONJW051iBIoF4d)0@A=gY$Y.n%HgT6$Bq^V$8B.A0:U6AB_H`.(*/>)60ap^8Bo_F87fa)SBOisB6npHl*/!Nck-B8imu`N@%.H'AD%FVoo8M4`a1.`&ZV?I8eQF@&H5iVu^8*COWYR'p96)rNZ+YZ$U3rp0G3W"Kg/Zmj(9U%eiM,,g^`j'rq6""gBdt+5Yqqr,G%C0Q61TMZYlf)IJskXfO3<7R:8pZb5ukR/rd$9Z0+7?Eaf%"JB2)\\(e#o9QJ&s49,=DV@o";4fu%Ea2j.Np;6`r*HG$`fXCZq(5/%-2:-l(3<A\C\O(b/11,pFKa/P]e^#*_!fp%nD*N.r6Ij[cquV!cf*4[hu'-eH`XMMl8I.(7oh[.a8[.D?%[8g=3_olXp=L?qhH8J%!Dp->#lOWJrWhh?i1^%?-O!`RkJ2DMrVT#;gTf!P%QfnDpY-dSlac<ZOgKnH()/jgIB"n2UDp&@3ph9XGSIiSgKt=i;/;m:\WSRQ%"6R\*SML\mFSMB&s$u/M6VL12;>nhDi7Cesh[SUAV<T62qT]W'U5k+[0h3JX9&4[2BRHp/qg3_#doK9^M/45hQs4b3lZ/-.CKfn4%.,R<_gQd9NfG]7E(pnFf[-5)g,m\GM6<3Z=_<c[:IO]IF?b)eMOEt9FT*eHq,PPOO&312iIpIof=+_+EfVsQ"km!<C?O[;Q6o']-%?keS1=T9&Bd`Iq]'i,*0L$F)W3O&-X`E?,IP0n-4^YI=k62Kji1t7O`#1)I.`tA9fENGJn<.c.XEYQNYmn_K>enoXbe@)&pmBlWO%r0Nco8T-he!A7*Uj\>!TLMBaF]fB#.Wu^XO^`j$S/S:a6;mfp&?7>3$C21M&#2R[r<J)WQC1OrI<jsl]%Ul,Lgu(qlB!n[=<H$/r%F^%mlNb)q5?RP,=bYHP^bd&%7.)ei*Mg^hq'LN0K(T"cV04(7(W;D`X;g!&VV,n;,d1T/RaYXO%BYlIHm?&"uH;"A2L[$Iis)u&s%ZIVm1R]^dL"\EaA5khnYTdl`mIjj]sp.HFGB<P)Co]QhY]d#G0@/D1jZpbq0]W/$/:(QhK"meY6J7Eh-TY*BZojTPp)-XA!GX$/p%eQ((t#CE51[<>2EI\&$$h<*d)j'L\-"$:b6a(IF&U3A!7B3<sZKrPrJ$`d2gL`BU?!?gF#AC%f:HJAr%W"E=^)_T.39=>dY./@:+%Rp[I?U:D?#/YtR%R!-[:391W0>]+975/s^6%Ad>P\Y\MYc&dli&&r#NQ&V1$MVX<?(M%Za3bI6?6Lnk6hb$BB-rlcDH<3)kD(.&5%3,PeFeWh:P0Wr*8djW`Ucm)OIF64+S%On1njZ7(k?V<-$-9+gk/&NJLi)lqCFB'n/N7QNE3=e?d5]3je.GK3<er?Du?`:*0hKFM4%W/DXIiJ-m\d\]pnap;5Yq[MCKXkP7M1X36%0DtL?F5n.4:].O1l(Ah1oqmjL7s)8baDGk(kljiT-9r`e=1pWE7!hBI4cor=4JOXn%FJYsCBl2,C5l$Gg;('s^hleq&XsWW>knV;'45DUENfDkleuf&Ji,Y#CFsn/cYEWY-m4&1+9G<ff$>F=SGjlLJ*Sh&*#Aqg52m&''%g(LEg-i`T+Xg@=joNQQ!#e.&$eWS<241ZH1NB[Ug\DGU^02V(-Ahit*MRaco+7S4i36`],Xn5na<mOS\5?+tCVK$GF-*W=i=q*_<%,o/_LmR)Dk=S[Z"5U2q15g0tUWQq;JQ?954)@<7krWNh,$A-mtOYbJtCF9Ng7I'CJr\D,HP=5&:)_6eUJuemX(HdPIDdf&Y"hN=j%Q`tn>p-Q-;rt)J1Q`Y;4rj!M&bA$J.4%@EE?iBi78e,tK"TM$E3RPuroA(0+HeXJ1B6^aGb1eCJL^N2GFXHc=/ktjU5=pQ7oK410%i;\fQ4>ah^)U1W>JqRZ!.Z?><!RXqdW#rI*]?dpM;W$SG*4F&ae<(tthGk+Y]dN(U<M.Kf?oW;2WI!;>e#<".c-^ph;!8324B+AW%&^[q#K(X*X2BS/G0hR=`]JF2'B7U-D-If*`jcN6(#SW4hV_2RZ?!Zphi>&!i"pe#^qZ`Pm4Jg`Y]RUEeh=H"@;'A0TG8Z1=%X?p,%/fI;EkJ>-CFu(nrl83P@fRJ^G+0l.ffT]93`F`+o_5OkkHJmh24:#24BG=AK?m$u$0G-:Bg75+!"t_mRVm/Yqde?&,Jg5+geZSPZ%00/<P=U*IA_gMqC*g[O@k2WaKRedQaZh;/=SpbQps,i?0"WETP$@u&eJC+[\Dh(WD,+/`@*Sg9AT;$o^Cs&s`s&$CqSK&)7d<tX?%-DQ^'UfiSt)\M[u9L`E$'a9;igok)7;tG:hLOT5@Ij?Z<?@qK)0Kq5@GmRqu0M_)$TJpn'FG:hIANr`.$UIVHa=5B>SIV'P!3n#E%+E`9*K.>iqI^IOB:S]q;bKnt/<GQnfZY!F=+j"US1.Z"H?B&D2>@p=UHZ<28doGqs0ohPT_:k;oe\I*</Mlr]75.oE2Za9_Wp8[=%gNBVu"K/4_R^%2u>dR%KH@$3]l@#9Tf$ElZFg4G+1"33@hLS+cK'89l-u,<-K)D??.U/G%/DdBblJWpbIR^.H[aNX5$MgoN6S[oo%dGj2b38AbfXTEEL7GI5V-ln54-]ebq9Z;f)jEeh^hJ.h8C/l.I[TpV@KCTr&*fW"5r.$-hR'q[-moLTO]#L!`@YOLFi%*&I\D8b1%JlEOR2[=fo#M;:M#',d^8c$%gEJgQjR-hut/F+mo@e:nGEQ(O^3S]2D_NElH^_j4WF$QW6)ak=;JH/CHeMLH.MO9D=i?&`@h9j,O%Mh/.9l7!j=(^gj@%,P>9>arMW/[O'+m3XO:=QD_-k=k5E:nWcT7&?N<)G@2uS][HrdgF$q28f>LJRYRF@9+blB-EtuCj2ba");+C%>2^Qe8(B6"o[;'Hqm2Zud<Ef!&/9(<L;hr%piRpgdD)ffd43hNa@=jDB]th1ApOBN;Ha0)gF;Rm0j\)Wb>)!\0Kt_WQm)cM'1HSG%=*E,W/^/)Im@A_iN_Ou4D\oKY8*`ibF]_oXlc.$t<h!%u$_$$n69d*rO1SjG@f'#4"3-u\3ClSc`qDbC6&jh3[uG5Y\_n$b]u?UM%f`Xr.k*<GRQ5WFPP/:b<lc[4G*B6?f&Su$dX]:ic"[&XEan>b?]?pah4+eCL6a84e5K5c!B\PPFIo+:e&+@G3XZXdkDVGg3J?'$;%8@M`j;Iim;?-WD0N2-2t2XUH.m*&!r=\b)e>XrKdHP99:I:um.Bs,IEO%+B"/r'MA4L!54oe#aqP,61EqF'>9KG)QXot?g1AD0RO%F4BTsJ_[bue^9Q?p^K]L4H"[P56]TY-*_FAC6^/>(tKbJOK'Aj6:.[6Pb?#'e_4'ZnLbFp[C%jq@Pu[Vn"A5:/BNro@/uQ[M>+es%3$7j#X$psD:f,U9+csIajrQFo5K<$rnW"n8-ujfS5Vlk?]f@Yud7NDX/+1Mm]9G\R37.o#6u^?1U>3SPRD,AH\iEL%TL;SX[>]s)%!0lir`>%i8O&jpf2;TEA(*&u5\Q4L]qp7E=UUPk\HN\cG1`UUq^%.2fS*Y9CU9m"q\bqCK_LoO,N\phY\[(@JUld[1Tq^5&R42ct%*Z%A?ae=AN3HQu<3TSD,UWI_Ej;*N8ddY*cPl(9d]ap'S@oX']d%lplUP$nHC%AoX<e:%E<5E:)*MB*7:PLIdD&S$u5-NPUdqSN9%*2<tKK7m9#qcD<hW``1l@sYQpp3q*YH<Xr-'E!IeLQF83q,ZV!fH20bLV/mj.]r"T.(*"6#;lGh8uOYM9O"VCPeEu'?MU:dK!s'W%UO&*N(3TS.AO69<;9ljNb=Tf[T?ikj7WV)JZgW'eT9^_T_e:TtprtrN?TDCTTjq_!T6X0+esXF6peEa(M/'$=LL3CA[TcD,Vb^L2%If8j52IC!eDeik%k6i93Gl.ViP0EnDr1MOn'fXGp,b1s(kcu?%O&[2qr9*Q^77^'k23#Y_?:3&lpsnEZ-Cemgi611S.<C.pA,&rr%L"HF;bZ]].GGQ=%=i-N"E)*n#,d;mShA(b"CB`!ApX!Kfj%jTH7?k%56A8Gmdf0(\%;4F.W-0qi[0mRgM$M2GiJUMO:-p4TRS'O@%)nN[MQ_EK`r`]An..AV,8lVp+i_'\Q'Lp*INPY3cU@PhgMnA"Q[:HO-XJC%$Xr+$3%^p%"'$?&b\$eMdPdW!UFl4uW>hcfU.iX7m%q7''^@?b22dN1VBISa;BeL3FFT2P76r=8@<7:,og[GG(CiuE9=<OkH[p5VcA6;jW1fFR]>JWf`AIUNj6ia#T$ibd67XIG6JCF5]d%FTp_apl',XD7Fus?u?rK_<nhb/%`*>W0;Xa-^fn/BR.fRdWtgWTHDIrA6QRX]+?X<#O>8CZHAj1"N&]uVkC\0hb1*k2d:"\JU<OE%46>l)gT;e_=D?,s(AJ<GlN"]4?@NV-7^\`>9kCUMG?h^OBR>Lr_;she)1O^rn\O9XlAVLi\trcK,5%^@?Z<binhu5k7lt1/45NYE%eT/^jk8Os/@9IFhnB&:78rE)-^"+FKPp!t'm`EY7d@A33mDEbG88NLhj4i)k;"?IlKqdc)Ei,A[nG":mY1&QZqMRHXBieuq/7ln1%4o0uQA**UoH9O(%I+MF-8kH%G(.g:rN$gN@U(@[8aHb*S/PE">qkGFEB_`&-n1W\a-5lBVJnsIP.3H;#I.B,s4DQ9k^4W0j)WuuP%X3Ice(#S0,c'rWe-b>"W*7GWpfFf-J6s$FgJ0>K=\Ef4tN41aH!dYPI]^8qtXfObTpf=lc1Z')c/Gf9,M!k+GQ3H.&fHJ\W^k$t'%gJ$`=hpuculjKDg8A=JlV^l-<+o1C2(IO\+86+F9&WPSVO)4EfO'_4Tq<75mk@<+fO*oaVlB@8VT1tph5G`eU'Q`Km\b&&\@O8B+%M/R>2ReQ4<+(]j*=*mqS]L`<Uda"0F9AH^7qi^:-RP0qQMu+"_XTr2[gKO7jLUs5K7.EM=c45Gq^>(c9nXUIbc'QbH1;6E@k0eJ(%I9lC!(u%X>h=Fq^H?m$2jF'heqLe75^i'%,<u6-hq51R^X-E?SHo5kiIJ%aBd+?p\IIe?0E8(%e\pj6n[]..Z?Uj:_XL=qRQ$$e`%I3h_%\QfFf%Z$BHg]+QGS1:cYRQPG3r%%."cI%Mg[LlVum5,ncp,A5lQ+2,:[Z[RpjB#5Ta370<0r(qB4<.s7ZK5"sj[)1MY$?.Q%$7iRg[.>F*.kAqkht'IF!BjLn)/;UPKE`?qXiH]-:<5[RSW-9[FX:t/XfaGb[FJ!RGeG$<F,-eAI4MD)lZ@)GBIN8uh3V5T21G(A%[jn!jAQKE66u)DU]"YYBHT5Y=$a4oNe_AX!NRc'_CLpMf.H[X6br8[1WT.'@J$jQaW3*M[`Tl/Lp7S_"Z(7hr"eX5N2'R5A]#OS!%)f*iVkI7ktj-FU8+d3j\LU7n%3t5N&CDYam]s[1q:3u:NEg9j-G#n(`.]:=p[JEP.]@Q8C_gYso]BA_]f5Jr0r5%g@K:b8)RXVCa%#5u/Hlhc-fW9!pAg3LqmHG$`Och$,*s)t5[j+#MCDuT=.`q`u6?ZQ-HV:8WAPndnZUL$,k&$IoqlO:N@>MmPbpZlfn%!_^9C$t82%rUcuD>VE0sn#bK<Vi0jJTeYk5Q+^OCb1GVFDJ8WfA%d:2g'F[?RgnNF0t\)[O$.;M`s/l4al^bc\VL-9NGC,mg3Do6:,aZXD/c7i%P'PpJeDge,s#0TFI"?5_H5#52geM8G<TjRKWRsr''XV>Bd*/Zu*ZgPDTR>6M$0W#<"Zk*%b3"GSQ8TtE?uD/m3SE:PG\W!mdr08R%1Dd3\2fF]hf:+FJms%dc00h1[Dn<`%q;o*D<d=RlFc1U2hmO")RJPJX]r#\<Y8bX8Xe@pq629rR<S&;\[lVP#I;j86qA?"2j#Ir<%>U]m=(SVO)gQqNjp$%GR<*%`Pi9R?R%X(l*G`R>9n@U5f;lS!op27s]hbLUYg30pS?JW>DbgG1A(HT+_.+YRh/'UCD'_:\t6i9\M%%#JV8f:c]f@YCo:#<MMJE.&Y)LG*D9DY9"q#Gq=H0XkB<_spn<H3k[#"g5aE-bF/&jnSC#X<0=maN>+.)[TeT'I,qiQ&R'#LJO'!%:5=kb>ol-tJ.^JU>OJI]"9RR86!peGM$$dM&P&DI.WJIRYDM7!bn<b7Qh4nl-QYKDSo$s<^&2K%bUCCYH"la^=X4Xbff[Ja;>rLK%Uo:td+LQ,5Fm:sVFA(G+L!p_=RQU7dZFW>?b5!C/0q0h<Jpk2*F1cT_5=X8ao]o(K?rjG:KZDD,3f+uc\'(s28%6;Lk%8D2_l1%[%D5L%2[Fnr9X2@E1q%YfY8GLl]89U1KKrP:Q[_9Y$>?fMV-]g!:>Y9n7\\^f7R4IP'SU6:OY4Gj.%*(jsb:0Z.l)3P\rbA(*o4?D'%inJ$T>>DNV_X?Ak9/o[;N,Z6J3to!]phOt/)lKEpHCTmclW:4PH*XjtI8ST]hM'eQSLs7&HtOh7iWG`oOP[NJCTSVZYU=eqZ*e)t%LbXa..ON=Xm8uZ'4Gf?,O#CGfKt,tc!it[*4RoH=k%^a:Xs,uEm_2]h?M6\j[u%fsXn(W2R8PR&4^Y<3n$S0XH@J#)D!pc6`Q.q`%j/pQ)oA(ilJ%qhfedk*@7/^Nnb^;Oo[SCiJ8nqQo0O%.+*m(9(EKR.Xiq\,^(G@`4/^a=b=;P]5?5&OagT#L(]rm0p)bNiYfWDn\%dIV6C3c5P,oH^87V3Y6kHMiWhfbU+iWK[9K^=,)7</TojH0qJ5QMKlM><^2a_t)i19pAj8Vtjk6I:#W>_U`>io"c\#[B7GcC?,/u%SVfjNdF=Rf^J#BKST`_rZalE76c)b_ZZubgU`]Q3e+?j`dl\nMa,*/DB@[T3C<?Fl`g0rUC_r-+1ZIQZCZb3%PfUL,e)o%iQT@4^%='(#Eq*OK=W-5$**s]+GmGkmlVlO<`c(gpb[E_?/0Q0b\SgheA5KRi">:6hZqq':kdW]iFY=XT"_PK_m^.L-;=cfi<c9s:1Is0)>%St.`^+67851_n3V:BZrr?g2H@hidYl**#p<F.%Z9DXP(,e2d7d<k@H\b#g[M7K\+#s1B!*2D5,o*-#s`^[`1B6KI(!EHZVlO/VB2%q/k\lR"*7r[L0a6LL<Cr*:+G]4+V4Ag8Pc>[n9`&QdYj&cK/=qIXYuH@eD8FBofnfXmM`e<S!A;f:,[0nbB<,C?>$_:@PGlS!Es5%%<qUBHBSdB@Q2j6C$@PNZGteEO-di?a*UFgo-ml)DPqYuE*(]K1%#t%c'*L[db_Q"VQ3Mejeq,;_rb:IpQ4l[G7P5'f)DH50tcrE%5K:ulMN=+eq3+=DT^ts<_Q?"5I<Ur(NSh<p%UWNhT/-M2IkKR,JhNTeVYcNiP4b0>qbB^cb7l%_KD=!)EYm'`Q#7pm?Ar1NElG*M%<N^"Q'e`1r=m*rf0BLsLIE=Io-tR;.qH?'9&SARnFhan27g,mTp?j2+:W+k8o\j#RP.eTo<pGr0?)8u2;pFIVT<%XniN(AhbucP6%BjB3\\nPp'_e)S(^YHBORV+#+ID0a4;W]k:&8]"fWgUPHFBpQOY@Nd![pN?s^7.5$o\2!t2HF]6qi1Ag^<q2";Feuk5]ichg`R]-%V$O>=D"HVGEHF`Y)n"])DMo^EX0#Y+q5%X*I7G@YS+*`0^0PB9("5[.<AP\F]J?+gpiLl3?]!KpK<3S@+AH7?!51.:r<qdD8VV4s%Eo%NO/0PF`TeT-Y&)u`0U#dK3&=XjjV(AJp#moC"FM3UqXprkWqo^M0/TX1VL7Fc[:>eO;2Y7d5K]6\F1"l?"Bl,5:XS#VgP@IPT%]it5LZ)r1I7^I/e;O2K\SE6ViKYI'TrjAYddM+0ZfiE(sYV9Xj6EbMn(K5:c/E-_SqgAjbR(920qI"Vp+rH0Q_MnT54rE+OQ*6AO%b#o$_oTkb`q;fR5_eWKj3;)%G$PITaLP)k\jh6\U-%%/jBE75qA!lqQr`n9D4F"&BH\]>-"9*CF&VB,)AkaMa:Rt4Zi.TEfGLjBc%J>0>j6,a)nmN-Z]VUe"#\9?((1LhelH8SHWVD412%%@21MoLh"i/rF#NYP$,C^T"[/"X)n1lb*AH@l623!WEO,U,,oNffIoZYe`&%dCU]kj(l5QH/nWY,_KEIcmi4;U2i.P\o>;q0E\cM(BnW?8r]<=)iq4#:1L0jBW22G<QER&U11F*A]9gH'U?t#nl%Cn/^*r$5D@sY%cX\.gKOPY<R4+!MNbETP^VHD_YmY35,r"+!HH-1^Nd[8S"!O'0;T!&2MQo!S?>$$f1hB8,#PN(l><eKTG5YbCUj`Ogqk8U`b<f^*%A^AlrBFA<_^1Va0m6gmMJ8nl!iK1E-r(cmI3ljlZBj%X>C[-SLhS!@Y4%cgf?L`[Th-QHHG@i52b$]R6Y;i-A%t\<CC/$-:TXE9V%.Q[qq,O_C%.Vceq2('qCl.\n)o<haiDjArnW_`d9Gekj%G&"&/?4c#unO$i#HiL(E9lF6%1OJ%'HCYWL%UYGY\nu<@%3>)uZ4;5t%8OcFkhr2S()I77hpra%#VHVKh?!GQR's3=iAK;e.H_IcpeL&)sm22dYP3UTe*3S;OQ(R9"DBK%#SgD-gZsPd$0@Q0UK!7Ns<c:]?%OY2U<W!p8hg>6_RN]+uh]64f[VUh3A;LXEuXt?iR`]sW$-S%0ea:2st*J7:_:+on?Zs'jjb@(-$'3A"k3j"$_^>Q0U_Bo';jDZoM%YP2.G:uE-fVb[[V#MJeIi9p9p7SLAG5,-Z8+Xq<+)mu5Ods%&ID$Ms3RM'MAEL2GPDKR=URGL/>%X(Sg2GW:E\&>2-e>_A]5^nt@%g@D:Lh'U_4Z)@(lI!<3QNjk(KLrUTuSbUE8TqdWI4ZkrcmkSWAU$_66jD]@=qQ?l_nh'LSb:3H$J!]TEYE'<;(YTWD`^q-/r_>&T%c`M@h1:)-U^$6Qg*ktr'Nf%<c>N;Inrp'F\5qF:u=!)YO/@Y3fhlWdtj#cXI,:IL-];\',>k.SDZ;N?KhW;o?232AHDK[L-Xco^R%GN9;r?In3NH1Da.4kR9Qg4:EV'2R.+"4#KTd"J)g$43nO@Qq0Q[)R'[Pe.udoJI12,tmTM+AlX?A%SJ-?4TY@gFm6;n1p8*]3G/6%8#s%"WMJ%kR2/Is:23hU,S<mu;d4V%d@QB@P3tQe#arMaY'?+:Im`8RN5prn[)^M3XrcV4ZaA*cm[_?AI,eX2)k+.h+o<jWjJ2D`%TT.i*q.lEImq@Q6!q[d7pB%%*<RU\J_h-h?`#hccG#tl2gJPBgFNN<ZX8@:]GREkFQ1&pqip%b+G/*8HJG-OU<CE!sm[?4U,!>6c%oh@&LZfY9`KHM@<:Z[D<]:SQsmnD4=LE8S:<cAY3T.$jQ(jmC[:[QkK]@Y/7X*A)8q-l3Nh,5+uh&@QJ^Rs;YjFc`hh9P]MDQNb^%p4OmJ+#('gPutX7-mTi+#Oj\i!#aG$5_W/Ahd_(tr/=L4k*6hPNdE@7"o1#(=!G\'8O_<7PITW6Gr4^!\J2@V.483fg0=LBEMr*l%9?_83fg=gA=2%<kPJJc+\Il.sq=XSETtPK/=Jau[V@o.G&eMSQ_XeRTA'gj0Iqp$^forPuPe:-_[W'\_[)Mo-rD"kj*^$r1hCO3N%3C/MB$Cqp:E7F-d#AjUM%Qs@hEF\ik:$"Z]ZAFU^T=c]OX45>\JP;j\i\Y7uh3Zr^%,A+q*L)NHdjV>Q1$^*$Nt<)i*7W\JN$X"n%M5R,4[.o#:@ZK+N[ULnh5ijsV'"`iZC3/cVf,D^a3k4TH<)!PI>FUHfG>V-?:Vs(3Vh+p()G%d,P@_\+E=f.i3e4ZMRAe]"D*D"3%]Fam#l?\[!\O6=1W9ojl1:1>GN[%-&Xr\rQI^*iq%YBGgO35nmD112QECi[2oIXDNTh/,bQ"EeKF&"*Lg<AfdPg%u]_>X"!aQ"AX%"]1I6WMIc/&f8\s@>,@A&$NE]VfLjp[3`M0apgp\?5[4GG-_BI*!c?M[$'1`)3nA9nb;$3V7$ET*nM\jGZ(lTjX+0`_SKoFR\^1O%=#Ymt'b26(58NH^]Xi<>'`<koA89`UV8(M$0"3H>'^g,&<=eJ+NA`Hnd*(@XECB.cofu/CmAA!U6atrYCai,LJ1YahCQ^)hPC^EV%l[blMGm^&]kjVRhSsk0'>^-Rp1@5E^m*[@6O^7olbeG,Dm&*_N-,+_n#Xa`@/'n>FlOnKpI2;G1!],(Y$\KLQ)i_@1g0(n`jcn*4%mI!7udGur1eGra"\eOCOhc^Z_FFm16:?(JRT/]H,H\>SX3?Yd5M1bf@rBUmRIo$d87@+WbKaCur?ZPrUl5VtCZYK4q8>(<meX3ic%9(?^g^7_(d>"M\((DfQ-ZH(iESqIHA%GJ(562_6O&ap6Z^L&4?MkJJYn<!M)MKg6b56fR<(_)AK*M+%n]bkX'cjO`#'Lf\YO*6C6%qsEM4?M_'LSJZ[5_)N:)&f8U+Z`r)``m4H0aCBVkHeBD_*Dh6Q:h*&n)h]%OKADGc#9dm02?j9DBc%k;(okCuDQM`:HH[5c@q"&_%:(h?`poNAIe`lS"`>5-B5@TQ^f`DmPksI=9Q*JEI%tKl$,AYVW'h_:4*I@mU;;pk$UlIu\++\bS`^[b^38#0eia@!fM13bd:QKUT%$P0$C3-dck+far@\/#lNQk7;o8ut7o>[MbY9SsqEZB(KG*S$AL"f!&I&[uTJfJj%j60jHkCi!dIUb>*$[_u[ghun'VMpEsH,;AWF%d@\$Zf5F;5>TGb%nI;l+SplB6)N:WI"C#"l8\LYNm\G57@Ba2H/tlqF6YkVjaS#?$l=DiH4Zu`((lF8=A8s/?)rO&"Si`I%_GN8e%;7T>=3nY_P0]N3VVh;:!-Qea\0-c#Y![rl<IhW'(6`bF>4(P"@ebIZa5a'=eaeQn;D:_<3I-g8H-*m'^V0j+nY):9/q<$%&jaf56%&+f>I&AKD2"]sBN?k;6h'UTAH3:`8'm''Hjb3E$u"N/rGoHKQHhXo>L#Vu..2_gZPHl-eCV4n_##5;2/f=#US6RfJ"]T=[?nSbq^%*rh&Vr)_ZcO+5)f`h;#$!dXP`/'[]D";OH"<0DnW0[E0:Ji)$b^:($C:,m-l*u+1%"\RGfi+^OPGd,j7:.jn#+2[ut.Qf_sEZ8)R%VKi+2;*@D*pj"qCd;nsoEKkiD=A[Jrb5LBtd8ciarCZh_YtKT&p'P(q(/@!6e^3H0`?=@9Rirh[hlMD("Q'DsoD!/@4@uFVr;o8+%(X&dG\T*OQhI]O'5h)m*&nSI(h%qt,0Ku]763@6*KF/iemt(ne5gtnA<UU04_B?YO3MJikO_2Fr2(Ap7X`8A-F:ZN8204S26u3;G%Xc(,GZ7M63LnhP%8A2sMEp,Ng;f:e%d]5l?ED;Us![!IDhl`bZ.lC\+qE)dqcN90he)aZhYs";.?i$L_J8DDXme6cg8sKkolP8_O%T@jB2C`Xc6'HN2L;fU9f>r"L>f*AgN(i^+66,=&L@RMN2aOkcjmO^,990/<)Y!eB+QgK7+q\TONH2f-ZA&k;BK*(W[ejMS\05RW+%dG[\+YT44nME<\Ed'LbWY4)C5cQ<+:,tIPWe6RJ[;1%g"5[a?a4OeQL=K7tt+l^[FQsgmq8Tedo2gBl?Se^cmZKaM9PB9eK':SB=%"&u:B/e`"X0j1NkX^c*6?d376oi+M#Ur;j5./<F[^uBEm'A%*gHugRlBK:*ZnK=QlBq47jH0d]7Lh*]b/\f2_\Wksg&@R+>Z0Cfu%ePerVNV#7:!n*R@qc+2Xo3M6I!H9uXp!FOPo"Z\f&P5XFmLp`+h!*#ZAr!/ZgW(nXaSoBGB,.F1oP0'5,ND6p'T0#m($YlC'L44L%[rNe]@kE)r*LUagF._=VB6KG"7nPMkb?^VMcrD66\G*d@mR](45TN%)LkS5T08D4'U%lo9>oQnI!T.%ZeFg_;)j,V$h^>mme#jOI%kZ\-2`m4VCkWITNi!]W_?YL9/U$\#\Vm8rf#0PB@0CnY<&PKdd,mN-2/h:R,_/m+f+DkK$mX@5pXee>qM$I(7I&qIW/4PFFr419=%rggB19M6-/lYj\$$oTO.6=G9oT6agL^IUNN`"#C<(WR'#lE:<gU+7X_F9q7[=\7f&K@m_#+%&E`NFe-[h*Ba(7D%RTQ<]P=4)/Q,%diD?USY\5_EujbAaE%<s8T=.nX=T\WdHs6G!+-iKAn(]WGcZA*b7$PfW'tIddn?kNeaX@;QhGu0QCm/T&fCdo7'@q)^+_JQg/'g!%PBSM9naXOa)=B'hUYZa5oD[6\*FpmKJ+SgR*NZU<EQ4?+k5;E^Gl-^c'pn6%R.jjMcrS^W>7>_=0F"Ma4j"`;r'[=r^T(O2Lr_0G%GA&oM9L&*;@)YP-n1c`cUY:A;1eC8&V5R&W4Eg+935IKbUB11hSO52K>WD+H5<OkKoVF=5O0Y3@FrrMG\/^R\*^h$%=?[HQ$Lp'Q%kA?82!m^,RQH2;/'(MOY2iYSLBiQ^?`]KK]f_V)UDK9r1o5O")m/Cn&e93OhrZ4Sac(a2\#8:H.$usBTAit]bX",k.[2S4e[2\Ac%Df?bIW4?3t]2K8/'s8&3n_O/pR<TT0hG"bE=RMq.='u:lgW1:jI<C3>H+9;8LlYR2'7*Eq\Pm6J0CA/:&LncPd)9[o@dtV;rV6G+%/,/T:GSKK^T!R(Q%1!+uq7)NbZ(5,Q*SSl1D-u`d?m./Val!q9EB<:P-e*I.T&NgeS^*>,^7\W#gsOrQ"(7pXBn*+u%8^n%lo$oM%#Vk5IfAt*NTe<Q]ll+3g`71\iD%+0uaF%P]IS`%/l`#OOh*S9u)>J?KR8dM\"&=H6ia'++qJ_@!7k>rZgubb1llS)S(cJ6t;C2/&%o^W3.l!XjBqEBnXa-K?a*.VSUY?<JYl/o&Kj%ag6\%I!KO7m6:q33Hpb*>:L4D8p4:jtUD_'KqMSKiL<$UP"e!,0]nluOgW0l*"W%d51Ll#Y<CV!*:sZ&GbNYF]]Dd/N3s\C4-<p@<&\-d[_sm]P*nZa^X@WDd4qlL^?JU?qZ=IAEc--N63!bhS-m!AT20<DT5fbDC'G:%NbFN9O*h]%K3m3BDYE*;p+Mi0a<";U;M!kMe.F]8OAmU^gN<7InMe:HGp/=sj\AN`HNsT\krA%"X:"dgrPDds6F9+#-A25gLnr5Z%maI&\421lC!O#$TFW.rlfDt*mHHcpGm!6Z60je`s;R0%i"LY."%S.Th#^5ZsgY^,Y,6>H0`uJ\1g>8uiKnB?Y6"Fd^XTt2r.-fUQ%U1b-@-2r4RHL@k8#+j7Ne5#mmHN?$QG_+S(/R\<3l(,.XaO^GgbSmFOLO/7-3/],A+n9%QJD5"-DZHdG`0D!aMYuGu`P)>d??ps.%\H3C2&g[sTBtpa(7s[YPCTm2?p6r]]S=JmAi$46;IjfMCKTW4sfV!bTba^\qR)Qi+h3NpC']KCM:^HRsc(REB!PsliE)N$/?ZU3I%;a0Zk7tEo4aaPRc<QHR;;-,I#CaD1/).0T1UFu6aOZ.a_=s"N2!m"J"@F&^"'X"uMNpe#CgH_+g;CYOYOA=>QeEtmp/[!Kn['X5o%.@3\]S[55'2tc`028GnMTO%%?c5Ki1n.YJA'I<lI:UaB8c>dJMorNon6bQUG.CZe]SYoj:4+sBq7;k(u:`kW?1)h0%Pe92?LdJ]/%YuV9<'U7`t>&OJblfI]IC<21@2&(U+8/rgS=oi.\=5pjToFnIRmRhtpH(]ib+`M46UPYs#hudH$6FATpHQ;cL7T1?m0$3LqD&p`p%KMn/GZq+oo1e?MV<3GrtpRZj!X/<U+H5KfoOLsN\0<6E,dQincL_oK=BS/78G`@J!8sl8llbP_==m!N4M:Zd5H)q,JG2eNuSlI&J%nX'`)4BP<eCW20jp5\R$XDl0Fm)NuQg&5r'!sN3G@#8c&V7O>0R_1-cn&D_J=>j!gn<rtgMP4W*E'#\J[PlT)fP;Qk[<X=#m]=GK%\1?F7(Ea[oLZu\Ieo<ocM6VF1p::tQ06C]Z^BB#Mj[:i/Y";1qObNFu:q.2mN0>(-*qWpbC>\^]#kNK(Zu$r3".`C6U[3#f\T.h+%mrEb7Mon=VQ!-Veg&mRngGi;*lELQ%P#LAb`;-D1p_oGfM@8,0X4Z#XGB-=.^Dl&gG?g?W`ALD"g.dUj$a$]LM2u2BJagVG7^CNL%!I$lqFJ27HE)Q`6@25l@,`(.6X_Y;:7K`A;k`#/cDrhkU09Wjh)Ib#NA@+Wa:WLSA>f;KdYtYqmZ/]X*(iB.^eE$(>kMTpCVD^R9%Zp/]#(:'>RgOnCO,p-e)/,n<^m`9rk*:>fo?6)bp$#?'S7/'MQ"men[KIj$a_StIVkH__UQ&DV,_&)%5[DFL2##P>ngVNBpN,34,%SJZPk4s3;J/6f@N?,SV$.F8i#i*2N"&gMDd;V2:+YB#$NBrtfh#fkO'$#_[FAFFo87--FN)EE4jA!,eu`3^EB-C&i2g4n"FLB-h1%/hhW0kU0O0*r\Qi78BEYUYo?LY99+4DZ&m0o4mJ8ZQl7/c/P"CD9)NbrU!M>D>i;WD5YAEHuF#u]7q;DT+0@j>&3ZT`efFMCij_?%B+*b.Q&1Oh"PltE]e+,O@p`]I=kDE!E,"g`KAJdcR:b95^;KBkJ;O%4+Z8;P6`p:cV7El"fCeuc2o&Pq,P/f[G":St^A*`^s62]<%i)Pi`4(FU*#5?de5'V$HN"D-0Bde4&ld4jS@Wp(Akl-5+rY^.rUCR\P8ZkJ1Fmu7$'G/FArVf_L!>f"c(H?67qa-DS?tA/lV?_P(%cfH+<?R:oMD(:hED/[Gc@JV87"5VZ$UNa)kEVI[Cp19jUHoX5QK+k=t/?1.APJP_3CRi!"4dG?l8=Md'O5lpV&/Xi!O(*;\Cf!;$%52Sa<`T*2-aDl4aj\31K"/5Vp#n_WMod)NBmJ^^O$Gf%NmNK(m@,U]`hr`Tte@/`4C;.rZ9%XsHmc8fNV`1n77%@.CAFDF,Ts?bV%g8B2N(e@gCBE80d`nbOr-"Z"Z'0jH/7hHB*eV%Z)mhNh/f%Epu3834*%X5+o.H?H!8t$97KRB,t/Yr*Y]b1O/Lh,%/Pb"V+UYJ9>%nAIep(Z/Yegtnu83=!E;?[2M4>_7hD,49V=HFWZ0(`r+Zm<dWMWK$ikH)(^R?:\!"X+sJiRF[5cqQ8Pjk=ODbA*kf<5o5Qt9o^q'%J<R@==X!1IU#Y<e!)t3u8[8FLRu`E.3:M[L%IU-BlN=NQ:)W(9h]1kpojW.BA3N3/nfMtbpVOX][>;)Y5&keWO#fF/eVfPO/2(L@%h=]U5=0HL_j#]E]gXtCTg`MOA1`._t]-Em+?7a[1D64g4VrKjMDJt=FZ#r+9e!3n#>N7@pcc1*"U^G_Za8Z1Ago<T*(WDFrI3I%>%GF.>O9o%^IR:>r'cm`r)!5T2L$>4ROgXm@:.NRj=A_\^gA2-*g9"3q-F``@!h0`#I0Y%&)hJ"/>h(lu3<dNIoIFp!LB3.,9FfLg)%li*qNVbX4E\u?=ogu.D$S[QL-qP-dr)<:_I(uOTG9#0J*Dt*)T3*=Gn$gHOW*8Ec=lSQ*j]D)Y0DKYWSHcHXX"WeVWl917jhT_$K%n4K\moeU7Oq7'1VPbB+GfVup+I[X9cj'cM:<?ck*H8hFqB@hgO*kBE\VgN9Ue+Q9-\VK%r&7B=M>P>1j^T]an51ELuS_i`I-^cBB%3o,)el!aOMB;>Xls-*2KCMe.K]'p=,*&(d)EK`4Zknl*;&:+Wo=pQ9nfPA6Op9B,-*`KA%-!;j'CL,Qdj2keACR-\FD_l9/i\6it%^[D#6,Ephcb88c%P?oZlJ%,13-f#V(h5Jk1hK`#@PCiklgCdQHUmin2L7U*`RBGn[m?QZX,odl\q"ie#>WK.Mp8T)^T+?dBmb`Gn%s%]#)9f]j'TB/XqA!+HB3oc"7r3s5h8WTm,@u6Bj/JP*Pi[2nb0^XL5>+)pW#Oo41]0H+\M.5hIkL[UUM3C+urZ,A/8TTUZ^&FBt%/hRq3pdqs<_lj`lhI@r3.?9=+P7g[2[)47-'D6SM:Zq?<n'.Cn9Nl<YRVcoU4D[gNd%lkD;4dEV4s0?kO=u[?6tEK>Qe'VI:J0'L%\/O(8Br=)ho!s]N/+&S4?S?4[D!fZHo,mt-1^ibpq:ht0me(Y(*+=O)Ab8k5NHY:]\K5>nhj*<bK-hqI[55ZdIf-?^SIefXN]"SG%XDk%C4d)#SW>jC/Ur3)qqiX*u\V&/Oi2#)iF'`)K]YUD$5:Oi$pNe6:r&J)PStJ[,o2,M&^Ftp:RC_u(q)5E:CVQ%I'fTo.?Qut-%:FbqYhir&'`nhBD<L0P$/)Ia^cg;]aF+3f+qu3gZ_/Jc0?`&3tqsu0&>OV3nnpg+lhqldOCWYIOIm*d&rc[bWEI<S]I/eQ(Oo4VG%m`Te5\*oq(bnFhB-S[aZnA'AA^Aeck2!+4UnLOFiUX>X[\8ONd*LT-L.;uEh?:t4je2Ss+Is_/sh"DoBrr#8_5>M%Jro,R#>8$A1%Zi7FN&6&8>l;dE01UUQpaknur>u-$=qJB9G,eq%k2E@&tmGupcb@T\Bq6BLbiBuu&4o5-@f'K1+mIa!A>>87H$@hpkZ,".eG('7!%CQ-$#I4\1.&qAV]FueF0DBi[+]4UNUrmIRQfVktq/WJPfmuc#0[r5@>@pekBAS8aV3PO-.rmACOXZ,aST-NANB)P:!@HP-ha#L_*%*.;]``,OUh[IKZUWmn^ik6,rh4!M[Ym.D`<XfukAK)/StbC1K[/,8lI@KbofCH??2iolS@ihUDR6mcIqM5N4$@-O1/9R?7SEDf\O%?UaO]Y]E-u*8IST!___5Rrmb1E73uu.6+<@2];hfNhHV']cA%:4ZNLMB`G2+7;,TZ2miV"nWW77oAiJuRod"Z5)*d(!%.(t@8aB9%8c/OU0^6\jAC=^+3:4keR62q*s+Es82'AIL.V[=:VTL.aJ(lqVSeO4Spe43JD5Hp)lDdJj8@Qh89<kF+pmpts@WEX[GJN:d03R!!%q$!9Z\pUEHE5rhW^0>4#=ZKg<`oiRDJ496N4NV$GQY.hlQ,#VBeVV82\aFd_kh3+79a"Fj<,T?rI$8?=:J:0q/G%'t`fr"#!Y0D;%_&.9kY6f+KW<>`HDVq.u]QufqRh,@eM!6AS7\Sc?1](@gh/?GD&U,DsS/+0c-@Za#lg^,Wp"ssd"oL1)K$HcSB9(Pm[\R5hNiu($%Q&%bUG':FSr_qKrnJ@IpUuk24P"&:GFJ)\(cWSWXii[)Z!;*h]njXVGK-9?,Y)\irX.&c!jN5&%0fl_IfkGs2VpkI$&,YPQHEQ7&%&G15^ZtX"C#N[h\q12an4@/)sceW"g^krW`m_p45j70(s@%!,T79r+W=RkA<qdI(VXJoA-b$hflI`jRh?bZ8/3DB;QXC$mnZX/1t%@6MduAgbHs#G.t%o4dU,bL8GM]S?L>=tft2(Z7Bth+hf\.V8"O>D=`CQElt&YArRg>EoujMMY;XZ)jLG2)ZY;4,k_d5;$P`eL4E%%2j\f*F-GLj3W](iBoHasb/u[l^U@f,D-&5,A+&U%+T(_jV(-D>mJXKBb'mB%c3<aN`Vr2K5*k7/m3XNRMe2":3dd)*0Ss0Dn?I/P%<#S1AD.^6AhH<IK:@)@lj4%4m)[`M#H*@S1>n+!%_fXL(Vn-+V45F1X?\rmfnuRtq$NK/W5RpZ<-t//\&E@O#Ek(^l]#P\-6au#D%e)u96SfA_d?FfqqW4/nq>*NJ.p1ehF9AF(VpIfddcR#<>V&Y?A-ppM1P,O*1XG8BcGif[Vl.ZqqU@G-!Y7Pg*(rK8<dJcfU9SqpO%JKc]EilaPlWPM'sVi9?Y8sE,\")EM-DQ_?+;0ToLZ?![eRLVt7M".3;<4_JQ(<pGO^GpqMV=R?N,#.52StAsFlMRGG:'0!TFYLnP%R!dOPjlliQ%dS+%JWKIZQnh3gWIokk2E6MLrZL?\AJ``Dm=ss*WcC1M[2d5?EeU['A$'`uqit0T:#]ZTF8;mEFok\#YD+?N5?.G=%2qjOj%#Amk2AS?GL$kWJ?HlS?+6s(kb2(V05mC72=%H:"BePgXPhb@eaM82LaXL7`i^,[;0)q.$[$6Aag!`8UXof&mg>l>QT.;Wo%F-U%_M5ZRf`7Th+Lm'nSi`pKfSOiZp0sKC'O8I7F>g,V`-mc[scW\8smUTLVaJ5$V+W'g;.-'@SiT):R(dO%nT90/9VNBn5>o\dW%@;p^g`Nd/Oa7fM)2)0<b^XXRU6QlEb;'JN82F3[:j.K^[qf=?I\._hjNP?KXiQk'!aU.]+Es6_<%Kom[+u0:L(YO>(6K3jCd'EBj%,d+;"6qCRA3j2n]NO2gV;T(rnZlURa*de9'FL!kE=cJcEeu_fS*nB0.*<E=0;>QK?=N/a8=G-'ZCO.^:kR?a]2###=H;lH9lmgW/%_*N>8'fILffMJ_9\FV$[%I&h#T61Y3-A!Nd`B"%^f4=EY$dW>0Se#gi5UXrh'@."PSqaI!?2%?5heW2%&QYbj:6;,@Mn+K28-aJ*%%(k,N'OOpn(ejEIc:ra0c[la[OAQ&uV6*Jc:G8mj@0mbYkZfL`SNA6urSmVWcOuOk4`)Ssne-=ukmUtjHTj"J\mk`Cg]q62%"RTD%bAOZn\g0tpUrsrajl^Ql]>ClkWXE$Yg#ro>\D.fg"EYK1f;J_sPBgLodLJW=IUo.=%/s992Y5T\:HmY$.S(/feCM1ggc>hV:-O(I%,oe?B6q+^,-^=bn7VTi[,NJD:WSgW9\`[*eh+58g_8>`Y"RRCIYcq=O@GYH]ho)j)3p!T,.Ta^LpVL<15N4#'=(8Cj:4b/<j%BO:%hQma8e8kqN\PkNBiCc7&ULu0=-Fm]kRKR<!RK8Y`F=F]OQ;l6F8!>!=%(;S?36B%bk_l!ZhjW!`62)?NNqV_m#/JV?MT=,mENJ1[%)*(m'ctT$L3SNF"Ra6\1q,$;:]-#(Mf*0"rQ=N9S*".H1j0b-':uu2dh!Q+G5"lC#G+E]^Eq7qt);Q'T`IW3jN*1c@(eVsehs[Ys%A$?Fi@kNBh]r3R`p^oB2\ft`M(I#<I>#Pq]3KFfVfLm4MAt2OD&<Tg6IMa+R`MDp228R5+fEcDa8ff!(P9VT>GEF?aJ%W0^6[G'G%Wm2>?842BHomSL,7<fN%O4+87B)OnJRj*`"RAAfln9&s9e$A_#Vg?jRINLPWQ7VAmMIE#urP!V-7cSTmhoC]X.Fu6j`+m_2@3@op%K/>\_-,X7r(pI<kd]aW7%?Gj0!fYTm0&KU'@5)gR_sWTEW*9^"&q_\B.Mb36-@%-XC!u=G7N&Ur1K-4Ap,`@B7VOs@X$D;#7_S$!%Z0c$Jn3i(TAR&QUVsD"C/@AS]*/L;Sik"QF9G``Z@8SIAg0)sbMP]VL(/'cmY!3-NmY+4ME(%.rNcOPkLWm0q\l,&K*[mddC5L#P%1;I^1)Q]Fl9j6lf6`D#oKCP%.Iq81!-c?5+B3EQFI*4mbWu/"!N/W@!9g=:CR?eQ'LbL/gbuJo.!XGuE`EO+OC:RTcqK;MT=upLA%m`j?J)k5%>(GhE6f?g?qd#kCL8.AjN"^M+;IFZ]0;_.()N=Vb</oadlT_#.g^Da]U$9Gq*YeM*f`(@Lk/l44P<t/G]"^S?9Yb)iF%oEr1:C;Fe&kgFtDf'rB=6^M+Fa-\u>)S5QgkYSptNuGT#6?5J#\*(P&/BkbM2LC(&?#gt48Tc=)`A0'GI7]@]ogC%KhK,72bJlaB%c<k]=M/Aj@c>ZC[D3oWammANDjiIq/^%=FnOcUFPqSU6PQA#KjHYO.p-<h''H://KT@3;7>'YOi*@C3X;fZ6^r^&KTm\50+Q\f<\%P0Y@85C_!En)1`KV3fIrF.KDo&@qq,P7Vp5a4bm4?GDD0#$[b32G5err#)#(o@Z7>S__;m[?D#q7'TtfC&_X&KC[m0fI]#Nhj+T%%Z.Q1F<04PW_u[BJ:+EHH3e)=gFD$?d>`pSDBX$QNRg_37T7SB&ee@FC`)X.-9qI2)1th(eooPu;]qOK!C8R>bL?^<N'U`9CD]&p"%UR$=uVjDq!Or0;"E>E^:l>Mj'K`(S*p3Y]^KNAY)r"6(Im&:K=/PYidXsBjERl\7n)9,t3nMqWT?\#`,$qgq?3_"/J41Csj/SQJM%8cI,Jfc;)/0^QXBWO/m0`to4``115do8BZ+M<^C4%$o`R+Z*0&;eu;=l!4k+Xc&sK1g#O7qJJ2/;_c`_`)8oFh*\82.tmP;H&c6-%\"*DeI>_.P1la5p.#sj?g!A?T:)-,[YpTt-WEP;eE+?(C6O\/W@cpkTIl^Uo2NH\CWB7/c[i/oGq3W/QT&WhUe^!M)GlYrp<]`61%nP?`O6Fg>EgEFmlUst6V<LP2e7u:Ftg@#0j<"gm!=!h"jFX,b;0aXJi?pgLKHm41aM/>XjSSjEe@U3fO*gp9tPFuR,?uh%nUCQC*%@BSW?OR9=)\`.Y84RZ#e49+s=?MgPn[7#oHTbNO%,a[2La1I+*H[[_ba1??\FAj(/<rJ8s."=foH"8liP.7Hn4>NlNG&\8K4i++-%h.t0-_B'RLl9*Y8*gu[0*gn^B-'dYP:(I$`[d\#2BtaE7SG4m:V#fK,GEJR]B67#lmqQWXG3.2!h]<XLT`lDH^%PB.n&cl==HSIr%[!k.n>b)\qERuFCN(b,FS]c**j2uGKVj+RVZgd6V-[.bLFf9?dL#d'=XNE<DAb,^hL0^_/C8GPua9m`^<m0euO+"oT,kC$j@fKX?%X1Q1h&_Sm\np<Q!l@Oe`nNA%8k'bjBDYQf0Z+ZjBW2n+-Xd>>:#f't#+mGAPOXgDm<Zf;'O[Qll9H82YF2,G*Z*O"J\BOpJqPo=/%`fak$gn<ulqSBH'ol0.5We7=,6S2*BN7i[FiNcIZp0/%DWYXrr'"i'Q+lb;6>7S(_/l\+e<N/GHol-JuO:8!-c9IY'79mis^<H7h%r[bmC\3@bjMf&EMH`\+M3[Z[[[m]c>TQ24e0MC&[m]BM??%:13;,kAbb$Ct[nMqjW:>]n?j<u`Ck:q,=S]C!+`kK-L$f_Yq(Fb^7%/`KO.":n-!):'\6m=dOl$q-JS7?EK;46JH]ZIL`'SsgYh.+2K*,K%D)&b`#["5[=OdIGpMUj/^X1A"(F,4*X%Q/cs=K^@4#6]TVc%Ws_^U`AiKImH%1'Y\Ol,alJd0O(eoZ'!KP^<B<r0Q7`*Co&FR0'rgJ;LF+M(.oOo+0t<*?F]_FH=14"9X5UZ!75pbe;ND#[Oa8jW%MU\C%<MUZFUa#I[VBRn&%<Ntaem`tFkYT,_/'039RNk.R0l<R\Mfk+6^p7S,%\aXi+N7kG>_3[UY7rU80&78RAhA_[AMN!;/qj[!%/;s2X;^krV]5g05E'-eIU'=L&f?/p=MW$n.F=r9jVAO=h_/3XuFa"kbTbGIiKQf#+md'/LMV.F/,\9taY^p%A_4&gF8#Ab1R7bG-%SWdb.5nhpAj7ooI:S:7Ji7Mf:PLL.=GJXARdNVgQ4lr@5e;HEKim9]5gTU<jT<CG.^W]ah0:)4["`][.Xujh:c?p4r:@a\-J+iEY%I(ju,>L-B:Fr0ZZY1.P_>K8bTk(@e@LJ#A=5L`$hik05aP!5sA3q:1,e&,[8<G-3'h>>gM=uD*jTh3GVgAUc!8^3B[K@dkN8_:qP%VGu2r$oe3^<S79H[[/u<R(@`lP?_O?RoYO!fF(@k.<Z[+IHOhXd/pQ*\'_+[U^B2sFHSU4JTiHO_G4f+b.#HfU&4V.T<sNP]!Kln%]+7&MdZqu$_itKig^!^<WKscS2X0@KAC=k>h>>7/Cd)jer;:h_5BNoLN]0+NEY"nOG^B6$q46gpM>m)*lfkt?Luue5`U`PBa57cL%Es3BO>iCO6UE9jU<RgWg'\ch12SYDn8IB(aAo.>d'-fPBb*q2:q&ZT-nRdC-.FY,#^6NfKe760hgQKE'E6"KLhJ\R8dsbf=2tV6V%>hhJ_WAipMKN%%Ja\;La\/0!+dH$2,lV#"eXj9Z$JjY7/?lZH:Z*\POj,GPFroCVc/?6Tn"50!Y&p^Lp,n0$'%k]:SQ*Pa_RHf$X%8pdjZl_]Mi<R\phd&T\X>W#fW[bZh"%'5mMcJb%-(M=i?FT0j=QZHp)ae#NsiY"KfY8h@9?!Jsek?^+'<n$a$[I1bt0$[Ad0mQUG%FE+^19`"poVMdNe!/DFg2-la.S5d>\HSo*a\e%RQCc,L'/R@P.O`%5a@[*AX@/mLJ<7AgWDOeDt?Su*p=Df]rb'ciE<muc,`*J@H%\)?2El/KuAFCWT]Wp/MXl!cNH^8gGWL'm"$&#bpL4i0:ZC:^oY\iq:g;((]7@bk#4FbJC4Wp*dG9W49&Q!sisVMh4Mn4e1\W2>Il%TG?E+=>aAh/R<1a;I@srEOB/Yen\XCFE+^1nb7q7;b\'P68>#YqlHZQX//Is.sn:nMZZFQjLt"s]&8=;4mfk\V@,'!aKVK6MU\j2%W1AECf>7aM>*l@\'!3Dtq`3O;_auD,=s!*,]?#A,?(Acq9tTWO^:I)6-?Qu*/h<I3,>3p9K?XUucAG&dUJAs3DOLG;kt@0W7+ho_%4-Xsg:+#,39&U8!lDOa%/ubDZd%[h-F/C7#l9@%EQlsQ\>=:9>;2Y]K<Lr-7g"]uK>]\L$Z+,_[H;hoffA'rOB;D_HmQ03jKo>Bq%FN-GFUGeh')McVigh"W(me`G7R<-p;U:[LW8M"aM]P/Q59qf%3mXh`"nY/*`[@OM3bLdVK,O.5OWFd_#cL8<h6HgHP)2_c/?EIn0%d_4%X*^4GCP`i)o73Ps7bejk"eo^'Q()=q@c@#Z$M9[+UOt0or=/Bb%dLNl],)]tuU<G;Y&PUc%U8uIW2O),R=C#3u3[NKl&Tl'?%&ZY.O4+6:+JD!aUf\j'/G+SQEeeQP,G-6$hq,lpi\2Rgao/IE^Z2u'n)OP7!Q5R`BFL@RUHP/tSDC<VhfnH,7RCHhJ_V.o"gcO@7%?roT3/@F?QYHQ/JEO)4!R0DD8OW-Q;^q:]:1>S--0I5+&W&\$%D8qN<]ZKg8?H,<d6eSBGccQq7D]SQ,.I/<C=Ji-1Ze]$anJIb8%g(hl@of_`Ro!-q9L=iTQK0]WaH'A>O$/feY.Ig_fHHJ46M-[VIkGnCQ,YfeFp35+#hXO-CKf@3GO2^`pOGm]eJ&>R$op*5HE0ji,%QAKW;hJh)]2P0#b]8W#9IF])-2s'^.L<2C0Fam=r0=GuX9mOikf]ruj*P.bP]YV2.%<kBH2]3!=YD.6W1rngua,^!KX:=+?dGP@I%O5d8+mdGK$n^`,<Wn>J7l2V0,Bb]HoeT9$$*%.Lqh9*6#)Q2K0=rnut03i_omC4c%/P!)CqY&,,Fu#k+8UddHTdqmo?(E9J[%:O@%PU+3pM]!2A1))HK^.6MGpT":-YXGf\eC?ZSCNCDqq]_nJLm`n#/*S;iX'OAC$&n106P38"O?ka?/ZRFP5F7F"CKqh!-e2miCG[oD%$cT@;VS'`NpNY\qpW#]l\ufsh*'^;Jc&MpIiB#N!7^G"aBMI%.kDBK@/G/.tCqD.BbMF)O9mITX34Y&,Y.0UsO6[k)Q3A$]L`0?%%@7PA*k!s4tM6$KH9IW320r8oQ*m4?Qns.DQrVXV5Jr*8bDJe:NV4lD"+"^R`be-%B([#GcL23]Ead9cq4*;hTcgWf9j.e925sZ<c%S3gLZnTo<O1$PFEe/RR'Ot6QsB#EC6=g*sGm[hDIAQ%pQ7EVDVGp@<,3rP>/pQO18d5&@s2tQ?*;JB<,4e2J!5&cE&H`_o8ETO17%#LP:h+2AQ]7h`'t7<lq>J%5U]pc`r&dFuA,eYIdaF/8;-5J0a[oZEe*qT$Ghh'nPEPJ2P%YE'r(Rf>*O*lLdA.fdAM[+`:&Z,inr%1oi`%J+?2c^MX^7-[E#lbO(G(/0bXCcf?n[meuJBZ/G1`.42=c[]BXnFQr0b0d8[-bbsjaLpW)Nd3,0cmYj:tqTH;B:A_Q?m'Y$$%U#bL2q6pjCQt<tmX2BoO\]gmE),dLjhTW8](7S^c]dJZpZkM](d4:a,4(asoY"J",[AlSo>'XNN1f]AOWr(QmPdkk$V+"$LW3N'c%eZo7idul&9VhlGK\uWD8p(DR@07KKnqi\AuicAVa3eX#&StkXe5X+=o9!nSo#9W;Q#3T%<]:U^Aqh\O43Qt';\Gr\MoWm`85B]qM%mG>%sIRi\oO/4DDh2XGZ"[1&64c$CD!HukD2G$p^?j>/eObQ3+S&@FkXB0GOC1c4I`AKYe\jNhc'8O+:5#,q9e"r&Zm)Kt`nakf;%]&]0mh)PP*0n0+>3tI$n.cp@,K%lQhT>-HP2EU`#hFp'V!dVLWDe6D3A:Z`28n.CGm`V=Kb$3*gPp('^8p0.Vgj5,[bFjiM(DYs(%Z))sgc4<nMk_p"QPk-n9mgf&Eb[/HFn^=JZ:i%@(%^u*oQkDj5lq4hA\D'`L`89D-,K)XnnoP&?%["s&+P,e;j"<68(X"$K`7cj$%9K$L0\ku8gA%bnDAuu(:`-STgbZY+9l`1As=+>77<IceP&6f7(F9?lu._r,CJ>'QMY,_Q/ec:F\<P#:6bR2[HXR)VfYT6$hCB0Q8%j=F;]REX'skZ`?JTY$Zd>pWh"kMt40]Tb&UP<2`\Fa5ECJn6[p9DLVni<FBQT,6Vb\!QZ>[(_$5.:394g]/tglVKAmTM,(\0j<'k%^6C:UhfoKudWB-4RZ>(THG%i_;fAVKn+E/E^"'=@hG?f<qPCfo'COrHqHgqHXUUp^<9.B#FK\M]DlE*loh4)e+F6D_me,nT^,"HV%IT\F]qnL`9!:?.XrT#PBrSQq-I]Hg7Q!D"8/%/Gu%Aj[cEiWQNpK'iQp$9_<g%E%-8QBsPDeI.9Y?sL3WnHk69<GDAGKtocei5bi%<kfb(pN*NF\tFu/a*P>KYH+\1T'u?1A334toh5#MGB^5t?WkaDn+B=,P8m!8]=].<XT5i"qtPKPau4Vh?b[;BFK8bB`2]_^rR00M%g@%alf&:5Qf.YrXPBV$?J$34jK`rG8`4^U@.-#7=Mi/kSEj)*B\/1KNS`#8pYBu)9f.UDM9WC](7,>aslW1b/\n.acrR/:aA>T6"%p\JI9O0ASpLV&4DrHc&9DZKN6h=Yln?ed%n&]VcaHFh]].<[!^S8R]$msG#]qg!k_'CXsf^Pl0,K-J4c>Q$VPZ-;t=op/%nmCds?%jbOXqQG1D]E4KShqtU$Tm,?gA2h:Io[Ti\36l<(#l2=r'm$0$uh!:;E:rdZ;m-.ik[QTC`oo$:cZaut2Hi;CCSD8Y_oukdkWW.>D%AlEX@li')^?G'E\p[RosY@%..IQcgu[GC-bG%X='iB?(C^\@T$(W-KP$%:XqQgWI7DE35orE>kQ^"(Gq@f>-KQYs7DkE9*APjr(p%FL0f"b.d?;$U?7I-=fpHqPDo2M>-L_H`peS.aGlclfT^On[JA27NTL]Id+?<_0R-?]mf2LZ&/<ZQhU?Q,ipc!#38$E^"'<%*@B`O%^\$GNI!;7On+DU4cbQZ3Sb"G>h<UDf&\144nIQ6Am4F,1l.LK*<O[20CSrMV,pgR=H^<gJD+hN[@<-2C@Pd#l=q(83IMVp;a;ug8%.u.4^AetTH:o3Z_Z1HsB1h)B;p2/?_k/Y3%NuCN6HFES5roEWfnbml*CWmiiT+pmNB1pR3:FaWe`67$3]Jd<UDY$eV-QD1#RJ6OJ%_8bq`Abk)]:n#]#][Ao,?WC,V?b=IXeMpJccVADCXbi+-Z8XXY.!q;%%HZNoorW6orqot\gf30q_q4QYj_4(.8NG[Wgec9\CWFTZ%>4n:Cbg2,OqIfZ!o`"il3r],`E,NC>]Sru+InbB`I>kfsIauB6rT.('hS8F$RcF4GK18/5MHAh^4!TNYqm3'Dn+Gh1VI+cks1((&%&+?^Z<6P0`SakD%ds%[=+.r(MI.cpJEn/k`qa3kODPHL"RX]fHY8=Vh[WYg0O!4C.F_U+!YELX>e\?mBJDC&fKq2O2.8N`@-Y%_H%i1TIt.6k;!hpZdQT"<>6?"InSC$m'#Q'IJuSbEZlkVcN#>1-Gkk^IfS?KKoiLLj3>o(&FLqo=ba.6JQ+..!*hI.E\rGn&u;;OR#b%V7,UkUG=QcQoK#5iGQkLH$s:9lf^<8XBl@2`-*1$9]8UgSU@h/Foehlii^NJ\4G)biX,^g:W?Cj\]ifU<XV\VRi`"W7n4BWV+T^I%=^56:,Q%)s8+X$.[Qu`u@R/rj"c"7Rqr^LM>#)EDNt;.kG?M/T3o8l<`bH*0q#,n*#hS@C:<:"RP1LHH=`OIHXOZfQXn>l2]R4t:%MUhV9F,-rY`J:M*Wmk\S@WP],_La^3Q2X*#cKEaUe7S\#?^67NCmK!C?W;Yb>Zc3P0DtXk8^cBIGk5dQ\Uk>/Af=9iAS/f/VG8\B%;sqt5(+XqhY!s4?]J%iN.#sf?f_m3#==)t"J%k-)?'YHN3-(T3m*,?:?a<4uB2+-T"Hh#9K@'l3cj%5:6pBAooTSZ')Tu,?:Qk]>%i*e"OW:TXQJ"DMnf&!00Wn]7oB1Jghn9p]OW')U&PKdiXd\#AI57,KpBm$D(2*EjCs#bbWS6jeHpi=44h(-P'K8q1ck2#dE&l-mo%T,7AB0f#=Y5!-EqHf5Q0lh5PC?>7]GhsE)!h7AlR[&[]e6^E/F5Bs=&pMsg?k4-]iT3UW_NF1'aT8n8+f@s:*W5<\)eh]HKW3[XA%T8jZZH?62VT?^Cbj6P;5g8qWXd90a^$1H?Fc9o)Hqmafo<`oHu5EG-u]8pT^(DX&:?Dt"!>a$YG3U<j2nQ#e,\B'S$8X2NLh?r[W%*hQ,l1nnCdHg:$noP=!+g"^KC[7>%F,H[t&&0qCPglVPsoJq0e>,cumf34Bp\>\tDTr9L,I$$TuWSXOWc2SgI-h#In5QBqalS1R6%RhMXO.I43!][cqj<H)&>Mm:G993GUN)g#-DVFuifb"+d;#\se6kMKG7i`)D24n-_E\'lNUb&QF1?^'9@?o;:?c0bCU1KS70cKN6b%mX`WQ'U^B_d4?!"j?+3dpZhb=l4"W$-Y,7)kQ"WqXR>Z.6VYZSOU?R3k73b4X!Lp2r+l4is.k->?>:=Hm.C,O3?L@cAqeKQd]o_%%l4:q-2<fm@W(`L[jq&V=?B=h0&PN)2&NP8eEBpj4`(ajG;X6To>lpCa.0lGM%BkmZS6]Zq/j`!SD#><&DScJtjK#*8=bj&959C\Z%K7&&XZ38t8_U2M>=gffR\8kEQl.#.1l.p8U32eA%3["-u-N@<kSL<66BmohHTlILUAtMA\]lKe96-qjXkK`p2$e^H%/If/='ek/;%-,[S+g</73JKi)\WiPfJQ*Y%=l20J$EiUa_bhCetT:1-4S6!<&Z`5TQXP3>c/'UM*ATRW+55H$c(B$7AZsA/@fj9?RCaaMZo="5U%i6R!j%*b=+=K'LpH.]mIrhp-LpM*G"=ZRmcM1l7+-4M=Q>=`g7DpB7qD<Z4hY<8_J<42Y6\YteU'pB6JI:MDMcP?H,DHcW&aF79N%9fjOWpE^*pMPXU]r`N3=G#tT[=FP-,G0[0k35#3X#h3)ZXO=`g6Snt<'ApOO"R<A&FLl&t[QQ4@Q,ENcCY=L$R4H3@PWoW+bc2s)%IdT:#p.#A&,fYj&9L*+p[15ncG5-1(qfDB)'@B;;O(>`&Cb1%:`Oi)OJZq@'Q!^!s1Ks%o,kFj5CSGe>b$Kef"#[t&HKRfp!PPb.%<&tT+(W,F3%;e,oXL#"`&Rs^gBI^bL5+5/chM';A:[O;ci?@G>H7-eJ'^!maF7DB42oB[nB[9Il=_JE;^h-\oAoIKG\LfosOkk-n%m^*"!CjJJ&demTlEW92Q7c3ti>,Q1^6i8K'L\SI;Gmg!3A#J%,!"\j-Ic^dB>46q"k50d-LDSQk3S=]K@D"Fl6\r-+Iu$6JKI?L&%aV6%ZDI/?=V5K'Ee@4n(lH7)ZJpoeW>ImV6hBq$UO2GPuCnmj"hM*QqFQUE2^OAqXj\SU:.lQAMMcuAT@K*!#S3-V;$X5KRU,8mI%Vk/'9QIEB_1i`7,/9JDh.X98ri=e2r^XST]1QqLPM=eW%4nH&Ei:DRHOhO0J;/7>4W4dEeqoWEs]EG)1EAe"\jY?#)1tUH.fl5i?%CXV0H+O#`D&.6n^T,nR9\dsHb59]8hQQTE,fF)g;E^9\Ps6FL5"bbni&1WN%n3J2Z^DDe\#d3<u6Qhco?k>jJq1fI`pII=H!U76=%0((Yj)_DW&T%A_s*(99]dYl%s5`5Enrhna"Z*jPo!^Z]]K6V@A]p46Uj0Dgr>d\bT*OHoD8uY0sX5@f6OnKD*JtnR4<HQ!1+>S0D%aE,He"Lk5nR\YO4*a(2Dqe6asV\-d[L0/5I'V$c[:Eqhe(-"k1?hAo;]T'JDa(K=HM9'ZPI5o0IJKWO35P^,;X=imG[sC_2LOWB7%Xkdi![GPY+cH1>NNqpHV&]]Jc[oXPZ:N+j##iSmX'OM9cTgp(166_!R-4\tn=HMMUd53gNF;mMdD$OV[a3l*Xj(SY0esRYC2FN5u%`iT8>/9QaOMU-;]EWDV`$aJQMWYEL'j$8IM:DtErTKR/05L*N-a)*(VY1PU&g5iB\"+B=PQ[X=+f:[O[RM&@`kVF?DZU/-<a3(K!%LiU[q6qNVc%7.)^NE]0Q4JF>d']>8j=n+7e%9hd[>mpRUr].M1i+!F0FE2B=s'EniCi6]\/5$eJs//P,nGWj:^rgO[]Ci'<(%iV]%j0Q_T^n7<cQ2R!<T5n6(Oh(@1=-oV2Q<Akss.-?r4/_nS>s4HZ\CGt<]2W3_+e2oKSr3n@!uXu[A&pT<6A&S,a'\SentkTQbC&R;%h-5>QEFCiRM\N?`1K4J5_m'0Ed\ZssjQg9HCtHe]/P^mB..lNsM[U0dC!7KNDsk0?>>!eRLLQ="Di(_hh_<:i54[ms9<KN5lHKeW%G%95orLqZ0="B2_E\!O+MVd^OjA(ugW3*#kOcSbt_:3hT?2rp4kNfr$SP/)=TDe]OP4bCgCE?URYoA$7!5#J1\c-RHB1'@8h,Zq=%rif*).FlDi_s(4;WBo"6/XuA>M,"fMLCq8LUE(\^j$&@,R3I'[X[mCbK^<siA,omr-lTQfXriCHeW[J?F!iQl*<j9a2ElftQqCG?%-!g\5GDmN)aGAQrQPHWB.TQYSo#C+V(;#)A?T>)6?V(0";!SXu#7]@jo@IMM+ili)!Emsd/$7nJRhoT1M5GX,-V(3&3/jrtiG01g%354)/3Y[Srh3aXaHg!>U7GY(@bO^_=G;GsA)o\k#+FAs*]6_L3Jc9/W5`99j8]<n@$+3P38h+d+=3=jterL>dZd.O=4E;2D=7;L7%cP"sn>(03C\bs_'IZ!5%!rCo6<k:;_;HGKRVWi;#9t<il=?D3=NkS>Ze*:[V<58OD?@Q';?ILOAG&=@gVCZJY\W6s8/06BcATMob%?+$]%/_9RT#$25H'\jc81)Z\/UCqPm9<=@;*Qh"DC3ThE]U24nEN8DRl/D.7SE_k:XT#jU$FB,In[AEI5;>A"-XS_!hSVH)0N<^d%JH>%/%kVB@4??i!EqrZ*Z6WT*eaPU=/7n8thb$"gbbeLq*3O'MeNZdFmTW)\&FG^U9TY-"o#C4QHba!D`1<Q^]u>i^piJU0"g^O&%\<HK(^o'$$o!>E_bbmHd?M=NJQ_3\P::=q%]pK$\PD]eR@oL_F;p+&I@j!ieN5*uR@nW`EPPqe^Qeuif[G`qnGQ7j?QRcAu>P>.Z%LrS)bGN.8AL)=-$?7F3$:/*GiVN#!!/.ce`;J:(-a*^o?rVYSB>6!AN$JQ?jo(SY)FQQo[G4*o5X?W3pXCt8-1FA[b_'BWEl40_<%qqT@:O&!H6mStH_>U6=S4JP%Y1DR$:J$Ga)=JM<Y]CS/37<&6mnt]Ai3`b'UL9]L/e"8a460NlPK>8iE&(X?)W_!n;FS8&9a"gQV%+l<uuiMN*pl'52[(Zb.eKlNgAIBGTKJ!N%?)dbmAABW5%4FTBq++$F["N!lu)R7LhaRJ2QH8B:b=Jhfn-8-(pQ[1;EYHKrP&+5-T%\K!R(:LZNZ.fTdWq(ju/@T=3Nr6?WM'fa,oO#DjU?A\WGlBB0c7WF.S+4Xq7DMm?_I[;`KmHl@qHLl;W>FrQs$bsBYg_P*0A74rq%j)J?"<GYFY])F7mXR>VUL3NrnJ/^pBN&@aLG=uIn5(UZ68ss.9EdMinH/uH2N/F+(dl$HA.5fcB-rJB3eXY=O,tSkgUijT5>Re-\%ibAT?aFJ#(+b@MUc#:=J3U)!UWliKAQ5\L$#4:`u!Hq]XC3,nHU@/gg;mMMS[pA+20s@(Rp0j!]Q:%Vh?J<<6pVjJ8NOA[*9<jo8%p\3@/l_V/_hYtr.nb,rXH(7sCYK)Ef+RBA.?#!jZ=ueIIV;"!LR`%8F!29A!bN1+&]Sje_"PI6>o3gfp>@RX<_F*]E1&Ot&]i9iA%p;;`>JIJNJ6n]FU$E,F9_^@Y764?,[&-Jl9+)NQEgt'a9_hck:&J+82D(Ws=h(L*5(6I$F&doAqL9c96=^uVC]]<l\b$h;%oo2?4%70&mRX!_?,Zl:cY[Q8@a.JG,a9:AZ*/lus1`5`jM=2kk@)kWU%;-.'O+gGoapRa+@5g%SB7BLBt<J_G11u(]3:+IFjCkLY*;RXt"%R/hWJ4,`V#*$+UHUFhDgAV:2[ZB[6Js*Oo_!C'[cF-KS)W/Hk^qTe.aI\IrW3D1lMdV.^jD,f04cB)Epb0MdUVST,g#-F,DZ9&#R%;AL(P*5#0=S0)M!5?>poo=mEeA#5,rJQhc.Q*NYEpOJL6<\A#M.3j/\Al=r+b5I,EAY+8e\5G4leU=8F-e5MPXHXkAZAjPI>Ue^%%OaE3j.3jk]dF9e@k-gB25e>SEIacQH.+opJl[DDVI+tks^.bWD_N[M<oOMZjC=BPBK*="'NAR63r:Eb_pTN9Pho\OZ.)a!ZIsi^7%INk!co`-K;`ai,p$oYDhS,GFn/6D=`Z[\m@q3f,t4uZ$WX926>OCgtN;G/tGGFFqh2pT"f^XLD1\YGd<jW698TKjg)R@2Dl(:;9>%$)3#cF'VssNj>p'Sc:dr%&`RYB$0u17G.%`-W0Tu1hj0W"?Ym;c[D)(gL`Y&)9h0XH'5^i"D6DH7Q"Vg98f0h3X=69[rfJsmetJN%R*)VOH^4WYQF2'4?"pqp5Pb/M:lVc]b?K$Z=oZ-?!_^pL"`C9jpLgf43ip-ABsgi$<aZ(`,Orq)8uK:f^3UPe,-+BMLFM#=2^*i$%83o>kY<Pu%=f$bsm$Iq.ousLA(iH:S'RaMt#55N)U"-62!Dc@jN;kM!\5P!^j(cp+j&@Y*.q2S`=&WJ@mbWr<=4Y[HfA5Z'ZYUXf%9o])(Had(SW[@uKgX::J8KLt(ATnObHjd0igTgSlB=`EEC$XG`@G>u>Z7<`1Q][H_6WN.7b05Nb1\\/M/Y0/,g<+/YSZK:7YY(?6%P2c"MfuQ@pNHkBS"$`[58=s4Y;)TcO>5'(f0D5aFs1e1#K3g[4IuMF_-j**?fTgNsj\!jB-%\#)&GOVMLo#oM,03t4,dFUGEka&A%f,2/+l,rtDK*>s'L?3l9V?@>#]ka/j9P2[-c.]?aE;c(7`R4N<^,k!u732r=,qDJs3r"V%D<^B1%V^\<!'"9fm]4R?Ucq7qN91'3%is2!&pPQ=9B33@^"sY.$#G6/\9_ZlR[nkm(Fj8=urI%eYb?usoC?;pt4eJjZPCU+(aNRWJXF?ai_mp=?K=*]EYF+aic=@i/l)Cr*%N\`FR2qGpaqtFsYn;.$Cf4*Tr<R6a/TAVaLTR)nS,eD8*W1M,p>6Zmj0D-ldBcf5s#H+0$<t,$8oaDUCK'R6'l<1J-L$(MWd_hXn%*)\8DiS=)TBG[.NMkKhKjmKD<+=nYiK#WKJHF,nNQ@tp.3C(h?=7C@=J#A]sG1"a_i\[u\FTkC:(?`)gV-&OcY1=\<2T\En\g!.!%EHanLR@dfL"o3U('*f_p$?RQFM[l_$+&278C$6G8UpPt*=)M\Ee^nB71d;SqWBuV;CI5T7_^nE#rk=a6WFG_teEP!Ga4+AmldG^>%3.=eLN1s&Cf`&)=l,qj)iaWL3Vp1eM=8"J0>Vm%FP`[DS:i:Ul'r$s%4:>:>e#hFbHm`%#.P4MYjANcaW?^Bt/dX%NXhhLq$U3dM%lVaK/c-9%l7!6EBg_me03Bt2(Lq,Bka,_IdDRkq^m8biX:@hulRZ\cipm=HD_.S.0jlKR'"Qm]^]?A]nd6Dd3oJaSEe5o%82/p-n%G?q?&`sQ7EDMAL7@[r:n83@H^W0fdEb6(.I322_KB*k4n-)@2MS)<[(B3hEF=985@2)jPBqFBh;/?oUbni?oa,oU:N=0NK6=`6#r%-]T!o8UUtBs.,2\S?Wk/!n)J(giA0E.I/(JAb_K:MjdUjQ;6&sJ_Z'`r;sW)S'.BP@8$ee=/cKDZ6P3=>dip[Z`pZa[n_S!I=X5A%5H=g]U_NkpVM7EF\KNHTq5&UGmej.OTmn;]>#F6MX+EFbU!O2"De6?I\gXrIdZoAJC\V0eP.s<LW7jMD@$>i`R)PpMjPrAm]5N%4%n'<P3b\Z.eISQtnPD5mRnPC?O^SG.!R0FXD)qY_laG8/Gim&LDlH9't(%(q*8EY>/c)N^<c;l2e_"PKK$CsHdRHQ_4pC%grM6'8g%d:bhH`6%DF,;U!);(YCedB>K9^6kF69,+l(SmAoO!s(TIMQaCKU%+VQ.]"?GdUC."[FP&2`[e\PrmORc1FC:_R4)9j`dCecH2_g(%(>lV=SY#iFerO.]hm]UBMgk=\M2<G@@p]-2j@#[)1U)MbH,%f+4BSOEgT1RmBGE!!<W)Yl#"u*A!CO.*55&n.!FW#L'X,3BPK=g>%ia-Q"rde49_24=O7C%D@5>eKQ9m(5?kB:F]qtK%$fCri9U;+=+ps#c!<dpdNLfA&+W\Z&NqHdf(6%X4grf$=6YW(GM0["\!(XhKZ%+uX&g<?8AU^D\Xa%l3b4`o#MK`59gEY>&%^P6)_d'#`U6bX*h^2Q-En0f\%ac'a(e^*Rabqh;_ed>-i4gE!+19$mH,Rc)/tHgiC!%U/c'6#<':QB=7Rh**":8?i%LXrF(Y[\ecqbB]f.2;33$QPMJaQd9lB7Zp*_pLukT`Z3Q@fGJqZD55<Tm;r^hk`@QsH26`[Eg;S]R%Sl67!@d.m^/#E8UG^DG.K8fWp?=CD(PV0W$<T&n2Lgf6Aj7YEHq)cl;rhO#)Zji\".u7G^_4Rd1:Km73>PC2Ij]mjLchHSJ_ir'9%Z<_3'Qa[HAYGCt#EMH*h\Oh_Q:Kd]h/8+].^-2nX1R,5XI&rrlp'g'L4A1/-m2=("j)iHs$edD$Zh%M9K(bQ22k..,XU\L"UCPgu%^]**'DneNl5<KHVE`9OF_O@JG4Q!k0hs^",n,De=d`]nee(sWYd,\#O@;g.&br1mUDI.5LkiZasqtO!1OiLJ%7$;+6[F1mYcH>24%aR7:&dP']m2C<>@#++;Kbi(0>;a&<*[,t]/\GB(=T-pp"O[3tERW#2VMmj/Wf4?")a1n,/lMU:#;CCYk6?7e@V3Jp`%(\UgU=$l#%^2Tuf?tF][Zg"UN[B3GCN*2;o7')n]Z`s54FP=Ah?5gBQ>$a<uff^Z\kB;*ar].YU?iRX,C-!T#43L.ciaV1po6GN@n)<etKiKpY%*V*c4(/e,TO4H9l<h*E>W42Hd[tX>i0TjrDRPZU$50@Dm2C0DI\jVJ+)#'4D/#8O@=?!Nr<JO3LA3*B;7,@qB\QJH0Ct;fIXoo^.%N;pV.;+N.=-P,6>:L/5I?aM<p&bR<s%qonh6puHR:ZNTG&/"S$G3TsT!YJ9O!]`W#<$3CM"'I2T6@jrk&*uS']E/[B+39WC(CEPu%IIMPV%p4C=W"2;n]daTXc-8R-P#eL.8>qO.G&u70jOfBf0-<(.%Z+Cb/<q5CTD&'BlPt>X[D)9U[BiS7bfhr8dG<QroC\6rfsfA,%:#CNhl4[Ia;'!@OZ"nl0Z0_3=CUG1(2$`-,Csp]q1TqC.\Yo&O0\,'nPdL69H?5@5(3`CKi:,Q$8ZZW?QMrp1/0q+k-!=bCg/"@.%9B*2K)!5"^iMoo":moR-mUnZ,,%Qu_:$XIF8C2:TUMIVKr%REcf9WFLA^Wm,bJ&/[<@g#.I\I_Y\QN!mlOC(WDi2_#c->.V6>LC?%J&G+08;E7F]@F0B?SSG0\/0#CH7#e>$2%E%s!bE\-Ra2V7bnRno.uC/HX/ekbO(9Tk4SiYXSo*IGQ8PD\^A7[_<&UU@UBX.)bFrV%U+B)YqZD5,<$:cD?_JWDa&[hQ2LTMVlm5RBe#RlF:sql>?Wfh)A%'s7<c:-rF/eN"1KT\aZ:%gZAI4b+JMn>"ET6<IN)n6RFJJ'-%.<-jTo3Ru/W8kffElSJE'Jaj%M!mIcf6-df@lk8&_:cH1p-:=2#!7m1(/Jj%4<W.R+X#ue/Ke:$Rr31nV[J+*+:)X<iQ`Zq/Ta#b%Y,8u05S.RX<BJQQUiY@:LRRU6\T?qr1d%0*C3:T^WVq]u7ui73LXmcfILY]=HN^UY93b`tiLcq#IA"af.bl[=j#1*(&fp!.UX*fT%ree)"na\[qT>o0;fC!W>FR/Yec=I&[A-M)?h1lWld>.)2i&2oO"%19a^:f2SGfb/96S'Wifl&t@_qkqP:]:pJlIO'OE2o*D/c7a<%*5']^?Oc`Jhg+K+a7c,%`j*/%Y(gU3i,?>J*'8Q9)ok][qI.&o_"E'0!48((,Ylgsn[hk!qDe3De_b)2>UGYMY)mLVlaM>o!%E)3%(CSIRVfD8hQK!=WniL)%DW@ut`'/JGi_58Z[dbE8NB#(B[%F^_YMoK3E&oc&=X%W'5Pu\qj+kDDJjWdMB9iS7mP^a^mbTujU;Imu%#>cno/[Ie'qXL=fDL)3Yg$q=+jj<[)Pe^f%j>=N^rlPKG]GVRsrAcdqouol)D<R1>-@6_e=$,Bj/\#/)3'fLpe]*H;g0;IRjt7qP%%JQTC]lah2g,Ifh7-^dn\8M@gO>B7[1XQ"\---tn@Ei[>!Acgmn5^k@#A,<`\s4_)Ic5jgagh&\.T;;Y_KJ"uCb,!HPhkcaI`#C)%J+_)rRJVQIZ&YB_Wc',39t3+Bc=Td/%@:d641bi9#F5;!`Lk1k=>@;b>]W&lUU?9N?9VMmaNV4\qt$$=>-O&W>S$,P%b/mf:7ucG%[iRJ7.g)Z(&J(+n@^Mbc^TELIL&H_gU\7=3d`ldTiO:Ifk@O.1Y;[t_7cL^Rp@YS1c'-D\<0ElVL(@j&nQ*5G"[*>j`@>N`Ep/EG%\OV!pD_Sl7H&dpj2'`8J)8kT/f4lg0<t2U-J%X22h81,/#BR#'ro:]KnkAoI5Hi&]5ng^WFk*4WgUFV;\-DEtdl++Vf_B_mB,;bo%HXT6i67%0['Nk+m^#3O0DH1X5k3:@[hka\6O8W<lIX:EapG-.%ObNF5k'r5mLVd.Dj/CoqbjXCM.(cC"k9''I4.%O?miUoQ46Z4q%DZ#.CHO"+.;Kr,V'^stss-q8-&T:oQe][(;gL(jS=")FZ]t;TDUdM7%Q]8WSLZcp_s4k<Ne0/s*iW%uRQ8>=Op5il'oS8!qS(G2[%@ps@eAU"%0gJVa!o/Tm^X=q59/j8!;5.j!b^&M_Y&s&'^2@nB)L*h[B5G&iDd[HCnH@`d^+bG#3lb'$](NR[FnUJqN$i&bI5&BDH%R\C_3Xprb`7C=036.8h?@a2/Oh,<dZeqL-q#?qk]d.(,]gBJ,`+8TK<55_*Es#$T%6X)ojkK;.'-JZi`ME4]oBld'1pVS=AW;M4]%%"+:Hs%:pbLVLf)II6iOW-Ith3OsK\o6L"Vs7^DOEp`\]oAT!'pTLXPpT*IQ#o$sL^3b(s\*_4o0CR52n%2Z1%ppEBP?Kn0<of="%CX<%DlL2W-BrHLMr.$d#hWOdRo6nL1qu:r<c_AU,G@/(UDs<2:h@@idmAe&[])Y`alA_-s(]aM_\U"+VLQB&h3%j-=IB>l%D];<s%'Lr\CT>.uu:!m[ne[pV6hk,>!\fZl.qfoS#[!!h&9VEd2T"*Y5qm$'iX`Di[o']=YXsCd=I/#pMHbZbgWh$3bX/?JP>G5-Y2]$^]%p$2AHn(mlMX/ET)d0#nXZQ\!W0kk7BeS6Y)<a0BD".KLQVZ-h0oQF_mH#\<e'8pc,2N^3S*e41+7r[WsE+`CaF9bLm0HJ\c5NnEo%cALnSbafK$fJ7qqCdfF,?Kcu&Mje@A#c\6*eqgdC@ah2HcVtA"baL$FPGQi0Pp!k<1g;8.fJVD[nX`M55t]qnCqF9b"7PJT9bWg0%E^WX2*'m@/Vkt?/4lk6Q?/sgE8kjGE]Vd6R-7k<?<FO?a_U4-<Q+!^?7]XDRC'4VE8u6.!2?n4rJrF-u<Ecdtatb#!23VS&OK+5-%Tf\]j<At)PUd7)JFfaJt01guY<E^"Y.pfXURO.05eYM"-`M#f!TJ'#cA/R5;Jl`DfAf6>W=)EPI:6;?D3]0@QH>.QA&_M]\59l+a%<Ec5R2g&;Zd.!p0M4.m.B^M7g35uMddi//b:R%;%kQ!Hu@!c"0C=Q9^",o(jQ-(a0":ru.q*e:b#t,[`LW65NBlmVl@&fZ,eJq<&%5-YSj,61b%e#AICa(jjd9SFS9-^EU[JAiBCG\#B!7m`P#Y:?D$*t$bc+At$?EIO]d2N:1V1ee,]0kh"^^.O2MYL53oV\sHL3!@.8%,@.3%$lkN9SAh;2)8^1lD\>Ca5a[*tgosKKSS$AfP87KT#VSkGP6bV*@S'SdcVt0f2`ZYBL830rX_-2g<*LT[`POI&!(4du@'M:i%Jq=Xmkp>&Y@As+JVPC"OdM(*'!GUqSdC*No&[#:EK7U`l9V#K7^^22MJ6Jr:5V>t[h9"Y(U8BA-R_Tc\_LcGl>rVfm6,BcWGs\AS%bTS":"O,7E#6;&a#QV:q7:</m0V([pP(sM-=%tD;=CN^+E0)s_,&J^hS(pLrCFWffKMj)Vl5iT81_st"KACtO]Y[H3]P5!%??AUA%W7*0q5Ch(s-9h!bdhJNuPIF7;_)?j7ZnjaeS?`;DdtibB=1Vn?&rd1k1k:21KgT#o:5k9nQ:8Q`"4@3)!TYC`OVFN9kVuTP$q-HW%C_P#E9B)).!4<4r#0k!nMGl;fU&ZkY>IB#c)N=q(>g2_*`Ne3R6kcB8!q6ESKs5<X9ghR";8FIoa";p%D:.^=-8A7o/2.*NA6M)0%Yg=PV^_9FV4]2$3!TK8<#T\G9Jf(/8V$c.WD%)!(R%7pK_DD]6PVDnb/4a/,>+4\h(n7s+r6?-'*_rdRD\6>(R]"aCU:LDb-]/MS%*e:1Y:!oA!d&%)hBJtWpAI3XB6l5P.NG.@B=>')dkrh'rKCE&:!H<PJ$?U[RTJj%VieSp%K1'#7&Ar$6,V3>09]TU.Zm7\+e_hgn%%SafU@OF&0#!A3m8Pt;ll!3GGWS/s@G79oMO-il*JS*%0[`7ll*ncPR6%Prt#'b\A[]!XoWX^@$%/C0r9^IdJ0%]3`1ce>;ftaZ/%1D;[:WIlOC!ilN3KI86_=['[cG`a):hF#Nj'%-DPbJZc"]joM=Y\/Yl%3?r00-hhXr/,40A0C0?0HhlueJZ.j',&+=q<:.X0T2_p%47V,PfiO&H5=%XS\p8RIKsEc3!W?`rM3P1D9)oDN;IkDrLjmFV,EgLn=;h;q6&26Ck1#)Q2%i6-$.CYHQ4,#]/Wt0s(j+Jlj\gp;%)Pg^hpc4HUM.rGu$keEtAOq\*8^G8*L(u[XVJ$DE6hj>QhfL,4>Jt%9?jVc%:_4hi,Y>cc%A(S`!"T5R+%VhKdGP1l6unsD3ku6f%`[&Pi>]f8,C`&<D<Kl)lSsdfon]VRB,K7+I#<K4^LeFTm4;$LA-4%f3ZA<ma\S4F4P5l*>!C.i:l8IQo":,D9;l<EED0V&S[7O(1%JjB"I\PNTb%GHpo>VSUE%LOF91^m\'GbZAcC4]ns/Rh6[&Rm8F$LApUUVe*;DZSE+8I-_el4Ae;3YN\$><qc^MZZF()Hr/Qf1;$F%<(::0]S0HI$"oM'.>cnl,nI@uZ3Ee)fX>8#"DsR`1X[!aq6J6*7k+gN4E>OM"?j&`OFj25<]]P@`0UlD#':/M5/C*a(@ulC[@-dQ%OQ@tSUi-u82s!D";5#bn$]\].O%`R68&Q>Uq8gPfb#\br)u5S/Jn^Zmg_-cU9=u'_5cBSGF@(^iBkLq`67S:Uj*8/(?pYFCOu\"5%\r:J[,\_ag6`Y#N^7/BfR]Mh7_=KIN5ds,Tmps'SV-YHH:N>ch.Zp$*oD^];0DBtQ@lcoE5_,16:NBRtTk+]kmW2AC$BRh7'I9^m%0`\s^_?q#-V%"K((K?s5EtV6DJ.EYbjf7s/3%:Lj=se#Y1%1:n9ogjX(PL0?[VH=0DL.h]O`ahBif&ps\"mDGJ2JfDNCH/11$"T<%WdfBk,Wk_]rK`HI?h\XLCentTOf%i%Bo&JBikjE,Hc5fr?J_=8="VmFiV)C0mW)a\JXs@Gq4GEGQi<^GMOceMHje`W3oH%eZ;`)A%0U0eT@VP'$-te(:0HVHK,mr-n)F-/V1tRNqJtPc(Y?3-P%tsdU_b!WN>Ki6[X?q:SN.VtOcLQkZ+junI+WFUuE:#'ZR>,P;aK!-W%9j3\[qQmsl29?@KU+-D313J`#=/#YU&0r<6Z.p[*d;?>QBQ4M4/!)A7Z=mDS<1<_&0kP`qR'FIY&CLai+06/3(0KZ$h<QC2SdN_4%JRfFi3uMQ0YdNQU:tb'?)Dl>5$e6)*M/AFgc,*5^]dKUe>>4%pXt4eG]#!rD28Pmc)Me^R/qfu,I>/fjRg-,eNBUH\"_cO#/'L&q%Lb36PP,/,HdWd#V!Q'@N@@+3\Cn$]'S(2GK;2;P'Ue:&':aelbVSc?/RA3%3"a<mF<bR=tD4Lh1oGZ/m9keb`2^X-/afi%A#RJcc%d"ob$j[X^,RVS:S#_b5_3'pL)-RKe'A1`p\0-mbRb>j:>h3)\kUe]Wu2#(#hOohYh@$=A4\l)osZCG<>>K-(,9a.sIr!6]HA9O?A%J?jSpg4>t3C!nVJ5qK.[/2J,.KJf'p\-Ac3l^dO36mt8CR0rVA+@i0^OP:qDe!;>2+Y?(8RXerTl;60^0qnFTlC+pkKcsklJl%`T%[;)qr$,mVF%^`.=H33mEMjVur;T2A0%FCuV:A>TH<j85-&3h-IOFt>K[\cT_ZkIF+WBpi-P&qo7Atj;FmlmRX-Ukmk<>->;1F<&t%Yr64L%YJDm8fE<k%oJTC;rEp!6tB^c?k6*4)uuKs$>FEHa"5\r29I.YJ$j"uJAEL1,UT3XH]-O'DppVM:<TQ7Z;k\XG<lmbO=;3G%7JG1-?S3hdf@5QS/#PbbZrj@`?q\?a!8!%V4rl[<i^?H@]';J1YCTf4A[%Y`fGlF@6q\fG/Xp$a`*\=16XhGZl]j:P;$e\D0WQd,%Kd=L-95fqh%;+oEBE9;D"(/nXCuQNj_,TD4L;i-PoIjImd9qPA%NbuT$IklVh?H35".fZ\TVB%f-]ST4M&65.o7F>_8&/=8g,>aV%d=A!N=;JOM-<lZZA2JVP/k8h4Kss^l3fD6NPPlWj9XJX2*,.^%q[5A<U]Z_R*NArh@!*LLL$T9)OH:ao_<D4?N;4!P/]>Q'VZeu6%@Br>"6d<(89j<fF/_a8qiEW_B`rYmP3`:!3&1b3M?:5&7qfg-.eYSn"cA/nhbQLFU+6f)$ZK)Sd;eY_F/3aec0O&Z?N"CPJs0c>4%ODGD*@3(`#5$`*;njoC'R&59=.4,=en-I(.Yp%+:+hoKI3-[t\<e[_S---oAgNg#%8@9iC0VjV_*a/![iFGIu+frWu'EEe]([bhg%F:CkN4s,B7,+W!B5*h)m5U941932]C!ZFH,fef#M'Br71]+eD\A)h)9!/\eTd+KOo1X^jq85bM-%9ptTS]hDMJI&T)Gp4RhK<.NR%PB9n>\eA6ZB7s^2_B#3\&s<<&,X[cNCDdcV9\>o51`OPE-6.QXUUuDR%]<Pn2:Hn>$.8o^a$aN*fM2Ms#!](RZ`p,21C=6&\i^93%"I;g*M%8uopnq,MPYL?dHJnOWS#dhnP"16/^p_n3*#SF&pfS5Rn']P9CG[(EI:B2F3'qH`:"tI/4<_@)a2ZGu3!%,(]KioQ@_suo%9!)lb$MFi5f6k&]b?A#5"nuNY.<ql\J>^7QWOfnY6*^bYeUhJ_Ul/!%,=EhS3AqfX2Y\#$c`.<_$>]8Dqbig`$*/1"OotT9!<g)9%CA%5!:.bmB>WAVH<jTWYDHuM`;Pe;*J/:JSZn8_q@9i,uc%-jg*Q$a7Um-4W*/2pN2F.LG;MT@0LED)JOq[pI1G.a]XSA2'O(%c+%LOa's%\</%HY'$Y5iBL)<Xt(NTdX@nUjtJL<5CkCAu`d%+iEdr0dBofe:bB\O_4uDL;ST%YU^M>X<s<hg!bQ"(."JC-=.uV+<Yp]%NQ=(R-Y9>FqT7YZ\)fCi=m;V*1Y@eM88g>\0AL_2&hu/@;FB9l9Z]Ok@`^u6&R-IY#2:&t*J-UdL8.'LZ!:n7#V<-qN=W^V=fTcI%'b6g`\h$Jp4Fo-Q#g#qd#NlE&+9BS(@f@VjZ,07Y2PqJY$?U)"bJZOaaj#Kn(k;]IZ`6$gkDgAqLM1K`_e@@'*t5DQ8#lHfSXU+W%!(8VtaYJ\a$d?jb>XruqF,d:@S1?,53$"Qk2)s,\K:VT\!_TgG>)$L<Y$_64)Z'h@"Q#M%_;7"?=+P_IA:GC9/hn/PW1AqR'Z^$4%]bcd36uOSCF`_"V-O0DRs$_<]mJ6JDs3fd?#(1^rO8$+A<6'=ncUamX\GF!?kiRue)"VT;^WSfng#EJG3QM*J8n3IJQT1AuD7)5k%7[R?i&LN+%?;mM>0cB0dl+2g-Og_Fu*l/kV@gY=",$H`mkD^4$jNT.Pf\St>0.6q)Ylm$GfRuJapBWLUf#mpJq3uEFMV2Vh)m)iW%WmD_"bE["+r$/FjYV`E^@b.b7q)J"VP-V_(n!C8\1(N#/*&On7^pofWVjP680=4R4b4=H)&$I(FMB`EQOF/<t@)r7/R-p`fraP'L%DYa)d3*[RJXnAaICc$CZjE\`S*6Ob5CG]ONR$?YG>iOW'eba!(OacS]5@lfob;/#,E'-p,m.u_ukOl><%Q(3kmN@c@/SJ0R4=]iV%PZ\&B_PK.<._lunG\06a2A'luTA6Y0;e$!HH\V8hk/cCMJL>J!&deO^,$/&rSDA`e>aT&m#H%*acucBY[=73jg`%]R]ACUM.ME+6%8TSiWO<#<C[N_V^h-+L_ETjkadC4Qr`0kJ`7cKM\Sb[oL'^p,>_'DI3*E[rWV&N52*T2a65`u0rJ.>pACc`ZJ":eBD*C4gM\4ASW%3O=RD.oH[iS=<n^+9.Ar(L[LLlN@]%n0?Rd`6XPgKLet*XO3K1YS&'l&4PVN"oPD.F9R<(:+-u^LLV:-`CS$W:SJ?,7Bl>2@!HW_%Mf-D:8X%#Bb<`Te=U3ARWBo!F[9k;`f?r8]c0ecRdAsj\,IXBY6(oGbO@D#s.+oq0#]q1!)j@)j6P3qpKTN3nqu?h::1OJNR=JnH%.1@'bn3fn7'2RQ<2]50-Bot,sK@[tY9gS7`XFqH$joX=;3'UjA)l+)[`#68l&n/\N_lI<ekX,VjduNptXWU/$:stI``ET";C,S^`%5q3kRCj=Juc3%nu8#'4;\Ub/9=E+VLRu#)UO%`:U'+Vn@#Z;N/;3RiM.rbAPJ<>\>E4Zt8!?"ohnOV2U:)kQgPC\Jr*9kBef[/!!%SC=dbJC0KH!V]F@0X*^*j1,qG<T(kQTO!Ym5mBHgaRF*bcu:ku*l:e&@PE@b/0sp6'.(FF"-Of+"e]?^r/)&uAh15'@#AF1fqTch%bk21UVd`<#_3/L+\q/3I#TQdB(<3'hfG9DmS^,^tlt.D`P;!]>[Vi>P`?C$[Dbm)R!\_Kcg5%=`M+-d_U&k9UP*+BR6cKEQ!4,m=%!Z^UY5bnSs^0mGH]gt&30(H_3M*_eq_;>B87;)'K4Ed_*K9)lqFG,*SJ`lVJ1&0^++`iBt(A\c=`(=UQ6DqsD#p9uenL5LSJr8if%L-__5@"m,8GsSkCgq.rS!l8GMn/t10:tM+Z,5'/&S',bmK29e"@)Wu@]1<s+LTW>30G$mc^oO^\#nK@E`5$N@C;H],>['6nSiRK]%<)=:$\UlL;/Y%'=/QnAH(RP[7$#BYN;@Fm^/;+9;LdjFr!_4hETjS6FS<I5b3Wdt=,/Cd%84*_L!d,ZM"0Yma.tKm,c6CVtRu3kp%Yi3V&JMP!+*#<&c#D8'79R(65J82lfVfQSUbVL7Q+^Bdm$7H:`)9J'2A`?E)jt<$bUVT:H@Ca8^a"\5u!I=mA0e$i?/P"(mY:W$G%=aq>'%qH&]!&5B%gb\adQ=R/>]Tbg^_q9\7;E+E6K+nIoE<T'k*"2u>A;17m!!9,No[&2cd$Q9J(*b)6>i7nUnKp=B%>(:t'gUoY%Xn$Fm5=bdl;H7lGP>"9d%:24P>JV.E44?/<%(TaQ1MS2Q&18Ui+T51Q&k@cZ>!q[6QC)\lXE#)\V<XJ)+1ASS1OJ8'%#Hr!oH89"%3XoVe_K3s.R-\HEi$1[n$$Kh2Nhg#+65E<AIl%oflj\`k-!a2Wl:#(kRMn\i<@Di@=YrOl#YPF8$k>H>bQ/lB#gNoX'j)NG#R_f)%Caodu'a-AGc/kfY$d!1#h#Ql4#]jBSUnm3"Os"1,aAaTKFI#W^gsriI]<Y"@<riPt9_h5p&&e8133HY4*"Ep>$!Wo]A\b^t8t$&>%S*gV(+q70P$Mg\%,UF%+E%<[+;r**E*SGEbK!L`8Qi[)^=jMZ[EhmZkH)N8B9MT)l.1i%.OXl)DKE]dOfqEB9*=GA9B0%;#dl<GE%LDkb06Gah*TXMYV"QuB7N$$E?L5\BC34d#/MIRR_)TZ(ub_*^_Ok^B4JgS:ei26U(6b@q/8nVuMH341A,L4Tf^&4l1;Sb;0,"74M%RQZp4FP%VWUeRqZ[(mj1RC5@33foEdSEXC"i\eZ^W_#$(5pVC:.Ms!:36m:gTT]Z>phgN*-Q3#S*Qn6+']!0s1%=*#5<i1#38R1p%_r?bbi#m<2PC=&O?kn>8IKh/fPDl_R;!Z1bKTq6Aa`RU9[Qp8cdXDb&L7q"kBd'uoZb"NW2Ot]PN^U\pm2q`iFDAnol#GiTp6g%_%q&F?G'>ApWCO^oh?GQJ'&ulE#7XD!KNc!`G[?SJ)ES`Ti(U=BQDC`Na@AOlsii5d$Jd\fQKe4$YQS/to+he+o`bI:9HcU(q&^?H!%"IPH><0PQVk*dWDTqNO+S6A8n+oZ/[IRsbQQA/W[#MP>+1(!9jOCj[IBun/A_I0U5L4joQ,@LdYC!^(+7!icP^(SK8R<uIf>1/?D%jS=BnEqKW81qa39LM`p+XHSO(c4N`(.$Gm$3rJWs-Wikofd&pa6aO$-ee;$)JfI^hBZMW8'*jDVAFcNHEhrdr-$7lbKL60a*!h+8%;jrHLiW95i\q..!"CVF2h'=MXfhDp0aE"(7UF9BnK'Z$`ZYcsR"'O$Q*HBVccC'b^7BjL^i%13lgT6AABQ+:t+JpW"$t:67.?+@3%0JY<F<*UpjJJjG77ECS;38an.Jb),eI?bITTj4&5^5u2874edOi/jW.W5R#-4Ht4YMSZ"4BeTa3H=.A)]"8Yq"B.tV?nLB:$7jVF%\/C<;af<Kcc7)_3a[>0Vao]Gs3eq"/R2F.t8^1f'-%,Jun=!7.!mZVcka]*-6IjY0=/q>b2l4s`3&h(P^aZ\t5&."(Nr5Gi3'&=\%RnJKgr<&uVp^mJOHV>?=JXDILCb9+H#ZNmKk)oU[5rP`bPVuFD39$oW`Z+KC<;:)k>`QtS4r][6@R`"E:',s/BF6@=^mm-_,;;gf%"ql%fLWbrBgTp"Q)dUZ^g(lI5V;844K4+B.KDL(^f*Cf@F*:;#;.pe_]$C-cgdm_7oc2pqPHt@bRZcN@ZUnu>r<Md#]J;HK*ND2J%fMn&;Ml"NF'/gNWMZlR]X!hT-<>;\T0]V)eA!IBB2R6uKG@X:C$#=D%N52@pLT@,7C2cFh;/rnN<(7mrAEhJ0fI[6>K"pHd#>;'8%2EZ2<,^liad(*&09>W[6a%?:bQ\k/C6\%NiC8f4&!H4/..kKVOH<;q.#4Y70jWSIG3B'<!03i22Adt+U!fITqCaUX6/I)M&b</`D%#j+DW&n:?dJ8/2D[*aR!9sG_b%V,QmPD5lEUCeZS(Qs^A@+V>RM@oF1"FK*$e?DMAK5e#%Ruc%__=Y!0:;&KGRKJ<LLlsQ4jf`c$%JO4gMXdQ>:=!0NV].,B@a:!XqJW<\JMgo<<?4J3uT>b\]4>`-A"(]f5i\#nELpR/,9"7J#I$>J[Pi\dCSO6O6i=qGM<OSJnfO6hq%0Ufk_<4LGB76+7AL#O$2$;>UO7YV;H'[lh0":1*%_5Vr]odr]1al%Nm1j5J\)mIqu)od7l)\%'-'&P96.M0$;.m2`cA%`/Rd=L<Z%.ZgC*RO:JmC-/s8aN9/F4i,eXRZNs>$cXPX50K8;(0&2e.;Nq;WK=Ka_<8a:&"M/[S(2I;:<>@cMW+ETD0Vf2KKWU)1?%M,]8TSu%IP+CJ!idFd9);R"Jqn(CHbhGi\RJ.,P:>)e)H7JHgA'%i=cZumW=%?j5:?=]h5X)WWHBg6eNqif/_q\</1@PcJdCQGS@HRMXTh+W%aHtr2/B)_=:,gd^*UBZEA,1#)dPf%f_,ajZT1j4g@BkN.;j]=9&IX=TT1sWFDiOkm\-X'd8u5f<2%Y3dL$O;`31C9P=-9_]8DaJ*%.O^2$/l_(=:lq@o3$<e+<;$I)aXjOn$.Y8(*0X[qZ@p1s=qIBXqPEboOFX93dTqm]*,'h@)`a?1n^NZ'#1P?c$.N!KC09Ck[dL`M%"]rWmiL*4a@J?5?c(L`I8:u,Dh,u4oSP.!\!6W_pa,ZgXUV`B="/K)(3t"%,Yh'8)k/bDK..k)I?%l44]9YSoVXDH+OP)\u:P.(g%iA4=k*roDU64IK(QkPcfa4AlTM&]I<!;T"JfB"73QM(QX30&)CC=5V4!0b:C`L@"`G!\jDSdX7jLbjR&?p(-krXZIK6-/1T(Pi]g%&d_Xqe&[t3OnQqsM9N=$38#1oV2^'aE?pK!H*R7qi06;Y1`U&^)Eagul`onZ9h#=N,_d9?+%X35Fll0ER;n#mB6E6?%:n6C6'$[N%0j;K[`"kGtBm4V2.G>oHioT^5+.Z5nq(dmp?$cS$TK:_"_N9m;SHl-O4XU^'"&'V"D5tnL3N4#a^',RHW%>>Ye$DJ9mLnZeY])GR%Ij3DsPnV%4?P2E.%`EW;q+nX0nY6$pV5Hr/([jgH<.XCPInK/A%-Z9b>/(I3aW%@1RiUn=WgT5<J40+2$KKq("?kgF_GSA<aXYJ7%`FQuH1i$'[+1'MuU8Dp)_*JGRk#GBAP3b[o\k.c!E`0RRKC1+(A=O@!aposIB(r)GS,[u[3'rB#`eOMi)+UR'8<j/3RW69.;blI@%"C4I6Ni1f&)`ALH"c/cVesL;"@)1S(j,+L\>*#?.==C)OK"p>h1i*kQKDA<U3Us!H&><;A4[iP,+U/7Y#u'VIEe?GoEW5G)D0_na%n$H.3,3,P6oN&:5m\#2Q477T.+rsh63Nd1>Xtj%U4#5Pt3#Y:cBM53S9+^,iXpU2sR`KR%?j+PCingPLA=cibF@JW_&CMO]k[Qq;%MSi$O#h%D1d@Z"$OgP9S):bg!C9pZr<%4BokR(P1mK8j5`"3rWHfG$\)p#6ld2L,VjNT+5@bsK%h33g:(_!MHi*c;WoU`i\BJ%I.%RD1+fYkDr-LF%\%>VM6`&9i@W$`-]WRg/o"-3XifDQMlf-7\r'/?/#Je1bR?RNQ?UEikBKh+l_G4>#8"Qu"3m;@/M[q@kjX4?#aT%=>JY!^L,2-mt,PQUR4VUikL[4(@5_`q-PX_#+Yf%Z_%&GE>K*n=rc!Y]bL4@62<!C\>e\J`iX\dI=`N:0\C6#WtLPk+ELW;$"S&C%&3,<dE$JSC6Q;tD<->_3TQhB\lqp'gPih*PWEaos3&6"cg#4E=hU+MUZ)#1qUd?\%P'/rcq/gMLKD[,-l+q\TAYBRg\#rAah2ARg%&T[3rF`:kM'Q/#gTO&C<27TYmj#1jq!@XlTQ)-3+[q$QD0Rdaloq($kAR(7Rc-["-"k2t$3@Ygp,+6T<*8A>(>dU9AH"E`rRBo'H%"RVN5/(NI%;m%=oL%Jil($oo8-+`jonVGX^\KDG<&ImS!FK@4-S-\e8)ETL3JRb1Tm?E?g-m[oQ2+,Ft#-_a.VShe@\FbJ<mF!M$%@s;22+rnntJX9&MqaDq^!eWkcZ+9e\Z4R9&j[,s/j5ZpAND9rIWha9K'.HS#H'&$)3ntYX%2g^b!sJq!a\@k1R5C"5V`Pg(<=s4/%nHle<gVs6l5Z"[8hmBpO!&.F)iST8PRB:J9',8="3c'+nX))Ka6KZai)O?U;GT%:A?4kE<Bp7<s!^5=<l,AZZ9X9isIFh#if`*Ok%N!c\K>9n6oVM_5iGifd#g?^p)]JZZ_E`XRkTbTOZ/IluW1j%u\![-SlTc0FjVqG;Yjq\/A'-N:8mM*/+O(N?MSg1#!j0kZ0&DH&o%;XQ/f82psi@)8j\h]4=Mem/[7@OE'aW\$DVl&S3`0@!GT`B&Al84_30R0JY`&D85M5gq0)8;8q1$4u_r']a7FT'giC6g5[_*iFa]%*j5$6^sQ]97W(,@>Zd3="V%h21h?8;Bm,Hn88r_t=!SJIqLXTf/R@p$ifZ'FJ[>]l)3SkedKt`bDiHcY5lQlm';7CJ)f3qlcT&E:%3=*TP9n[DphG0b"lU3uUWY]=#3f;[gaZrTR\0U79Tn\M1'&ZKS,1%+)V@'Y2i0GZ$JUJ#K7W+q$'ADD12f*.O1Tp4:2ZmMXaL,Q&%5.Z8HkcKQO"-kCu;,(j_;8CMYE>:/4d#l]!bghk6E.jW-0h,isZt/8V;VOm5km>n/gMV$%,]^affZa0-E%P!EAWTaISfC:T'/Fb4%;%n`>>,b$q7:N`d]N&1W3aIBelVYdE"\VDB<4F7fGcl!<)BKgdmfQV%Uaa/7c/eMC,QmPu2=;5h\5%?F&3srqbo)t'VE-(Sl,^PN%h?VPS]J=Xs1.GLX+[U(lJKe3cF%KfI84XZ_k1*5[l1pMg@73TjVMsh[_ZJM]&)g&^.#6jlh/`B%kU9`t-Bm5H$*^dfrn&=uJ[m>O%#&(4]gT,op.l)c:OkLp;$()%7JXh;#?+><n/<d-l+km^ap'qub^4q<-VAAq%!^QnP("I7Pc;N:P%bAOgfsnY[Kdne_"<lHQM:S.`%ZKtZ$lYn+8,5-ib9)+G""coUVXto\Z<Sc^]U'[+\K@Q\UiF_383\rUP.tBkc(:*3W8TY"O!$&8,h&jI7/T17fg<nUR#(EQi*9a%e%%9^Pd\YTAk!c,p#<.PZZDcTk%6r,5c!=9mJ6-.UY2PLlCYXGFEr/n*#'"Tob,?k^%)G<.\((//>+`Z("doma(/C*2A41ZR=WWGS3%b>u1=".@C@Vsf09$WI5'7?FWsN'jp&Q^d<H=TlU4-mh6;\B3QPO]ffZDhu8uQJ4MeO\,k:$c-jK-o*^kfg-,5Z":ZX&q`P+aI@!R%)K+\i!jr-4AquJHCI5bh83!\kd0c$q9L+tE#U(_pd;onR^h=Ym>83Pn@gHrkJZ'A(N8+^D_?t)tg"@.=KgC&_J8E7S/OG7)iA_J5%i"C,;mI*C4E@3!l.rsdNatCclVJTk7Q8;tZ@&6I0UP!)<R%d$VideViGGM%hA,)ZfSS:Te%b[!PlKKm%p!V4.#5T1jI;i*e"bCXI%A3MK"+7_oh:mjBiZJ7s"(2;i#a0]YM@*4FFN>iONlNYkFX.5aI_!bf,5#"@HC/s2QP#E<qVHXgK0p=j\-#5@<?k/.]g^XceaH=jU%LDu&ZqQD2%2k*U0]hM5"/;Qg6'e^N#+dC5siikf&P[TSf5c]FhaLX8o,$A`''oaGbUqsYkbKIC=K;l@D>YRR!XFI2V$R#(:J\HZ"%X.1%->>nN]=q9T8@d2*;UrCH<_KBsPJX[G,mua??amRsJ@D[jA.Z2`c#mL/fE/l9NhN:J\)%?EE3g1,Y(HGG]a?VM:P7."[r6MA^%",Rm9>4\2#8r0S4G*&_7\I%f+_$h+pH>%MTO>!^Ell5b^BTBktWj(<n/;>Hd`6d.=iBhR&!6[e4Zkl(Z(u.=)jr,G!F,RQo%aq)E%>eq+^gCbEtJ9hT?`SjQ==LeUs$L'.t4rW+>L*I?6d*eIXa.V!3(7-g#(PB+XJu*u#jF2E,4.HUVoPp`S@o]R!SBP[QA`U;jX"[!d%[.lb*(3(h4A[1ko.hLA>#:c0.I"Kg1"E+\LF_M>[(Pq3sGW'Bs=VRlPdu4WZ:4>O^R44!Y?K`M@82X8+32'#lk+N>[,TkkB\PMIO%l1b6.e^h6qM<6\AK[RaibLs:\(*de;UGElFW]14u[<mLpLn`o53mSq,StPGkr)l[X'mW:G]>TkLa@BF+`C1oXbb=K>eje4nd4WT(%I^_?gO8\c4lQ3M7,>uAB[`o[`7RPY\lN7j.c%3JDIAY\DKlgrD))iXM[0Ts6L6<Gf#+Vm8m2gBfB8/<YC0iu.#=Z:g79SJi%I!A<%Gd&W8@R-A<b'CgNJG$!:1YX,KifPh#A<dm![kL-&pZ/JY]$%MrbB"ijW;hJ0cZXSuK,XprF&1K4+'Q4:2=]mE,$QX>(:dCP=mKSC%j.IJKR(eZ1qZZD,?rdSP%WOjJ+/jo^MBTGp6r=!/3WU<ahlOTt383UX>b^AlFeIGJn-oYe"dUCc?;n??Z6N$;\8O2DL5I:R+/6g"%Sl&?4=:I\r+1I;a$0cCoSJR.!\666(('!Nek&juHNc\ZsZL>Ad"b[:IgMttn0uJ/Je7@_sPH?KBMIoS+CZO]CHrY5Ef8<B6[sh&6%1sYLACht267:goTNE_$@M&0u'Z@g#&)f2Qj2DJTn)_#bR)%m\rG2u&9Uj!0!KijP#S`;\J?85a16ub;pUVDne8ku+khDL=4E)e$M%/gts#V<nX0a(1G>3Y53)iTMCW`3m?Z1o68,R$;Ec1kOdPEl)\Q"h1L^B87MBL?plF,^Q-B!U6CN<)b*Wk)KZpMq%mDDqnkF]9,36%o$LF>g's(4R]Q]o*Z^C>hpG1-L8DcG0MW/Nnip.+MWE?GX>L%+\1g6gG>^QO9XgUc0240teg/$=*;<jO;'*4QYqJIj##m!'>]DBU%Hf0Y(RG`U[-I$WQD>6s;DfB`o)]2CZ-Qn&ZY[fsdUm7ueriW*>r^sDt:hU<@a6F":1b)T8P(khP5XA>K/:$C)&7:<&$0_`7<\;R>%mmH%p>\$+bZI:l#N,/fQ$uCr#^eprG)ZgU%/D%/Fos/u2%$qm-jd655#&Ff-2PuBG)AbCXU"KPV;OKb#m0U4aFNMiK:$A/M/j%X)%?9?s!#ifmE=u[WF<@3=@I_2')b3%hc<p@lGSIaM;!Nnb4;fUPWAE^oSVK1!7*A7AXs$tQ6XqmNjgo:o)W[/V4_UYO)EbU6>#k0DG%Wo]WeQHaCcp<q\61HC*Z$ucR9s4?&:[VBhf=83TUIlLdDN^9Q.g/T4X7gUT6O:YkTKHQN$TI@q'7Z([In'fV:]=P'#bOIU@N,=3p%bas-]lX%3sAM#$\3Ir_?Q3UA!ARl;4Um4LS^!:=GPmo^$lWE1l(A*9B%qWu5WVB8i]sW*.'0NBF>^HaLD@8:K)e_TQ@(k`@8\`3#%Q_?$SWKr3YpYnZt:6PX:?1X36"g86P9:m3;.t5,r]Sr&q:fla:=K6mS%O$Qskt$BW<\dIdWoO\X10X(/BV\bRR^AF9Y32_`kIn<,%jBlKY*^]@CfkX)p5W%L&SA%$P#$0Za)oB,r?JCIR^?"PK1'"MWod"b1"Ko1U9d[RXi3eoa#N0a"d^OENS[pc1qm.IdN*#1BiH4Bm%+O2-L!8NKqq^VrM>Hu\b^Z%e>m05=t*<VbSRr8(2(<Qsm-Aje1(.WM+X%+]4DA6D0ZG?A")Ym]78-AfigFaCOjemlqb7%2";&csn%d-$J$KHKW!gIiR#g8hgMkYF5@4C2VddlR.5W2.f-!!#jg!dQ<`#_$*!@!V^m)W0DREUMLdkpO@=&jgUpe/E&M+5SD)-X!/Z#cBWd%e*;LNgVk0TGi;2A,@5<;083Mt/5\Z@J&8JkP;Fm-\]sGY]BDN]Da?r$9(rp@m&"\)fg%*p"%&J*1mha/NJ3b'O9W3"8_uHGlNBa-%L(d$k1,)BeK6PQ/T7QrlAR6aA@P!`Q<r-2X>Inc.!!af[OGqe-3KZQsP2@b[Z`"j5ep^a1RhCLAikXN/K$-q0>8I1*/RcUb<%JW]%#kuE5]H^akD6P7i4^0Z-GD`jY1+r-FKK$g,@djJHF??j;L/gVm$Q^kPjhu.<E%N^=.I8,\C]Y<*7FXgf<.c@&oU(W]W];8jXA3%`%)8QrbJH;c?YgKI><==IOS4=-1'_s^]G;9?+-#-NT'efEV(mY0fe#H[?-6T@+PVg_/q')[;.N)-BFeW[r@YU+qKs<p*$<\XGWf>q?%!R0L%-SI)%2mGZ5@?,Z^gaqFt2DsOp9@7cG6,_[QbH'0B?`,Hd0\>F4&V:Vu%jp'\U)o6>ZsZO072&bD6j57]4:gsE'kPh!6:!Jm%_47ceMp33e'uT"YPJE$Hb,WZBE<:#fd0H9aaB@p[`L<ALB5TF;QjD7I)VasRBFhc.RR-4hSZ5+Z#gH&70Gf"Y_&B"tKn9=4^FADf%arD`"1Uqds388?8Ee/$]+dVU)A=\q@MRbobd>4m*=DX67O9k"QgQm6FRV3a$S#6"C*+)Ub3]WZ7);@pXEt!BrBlO3',0b@ZFG[M#%*dOIJX?l*K6BYAejf3PcX[c'r-7RmAF&"-S;;pDA$da_,n$Z961.-)2g(1rq;[ps@j>h$r?&]IE)odQ:^'YB7TXghr/33Z\I$)WV%."5F/_/=dGcqlC,UL5[l)d3S-I3N#rVE,`e_WJr"E"W82P55Gl;DF:V&<,G0L)jP!2H2g9+ZXiU`oTitpS,0J$l9&"Jg+fZ@#-++%.FPN5iDGqa]#`ddN/"5_8s\PJ-O)4BP^Y<r#U?D3<ieo1;ee(4?sp=o#Oj/o@XlAJXW2.NV?Rp`]qY=6<@6FUcQcRR.:2$lWqiXX%R)U/rej7386uU0Shp1]X!rs7nkm0?_(ds$##*De\.T`Crl^k;Y%9&G=23`!jMMJ[<PJA>'0F9rtP\Ulc.8u]d#4J8<Fp4bk'm#rf%DB'^2$dcg-9sQHc3J"Xq7<,1Co7i=/Z33JWda]O><t9L,`L?Rr@"'>S?s'_R\9H+<%n)J8%>;"@HEf>G&YA&u,J5:m%\9$7fi&\C%1T\61U8QI@_@B#6]6HA`MRj*b)7M_KV4j'o$>5"Qrh>liX<OQLG\`\+%!8+,7g4d53Es#:P"=L6hR9PjL.Ol9?92/\_@X"c8fi#m%\P`EE+VIbZYM@bZatlRFAMh>ilA2im71C%G(XfaRZ,.CP6.9[O3&PcDqP%1g:Yh9EqjoCm?0E&/N(U>6Ll.98GCZ6+Ai,;c27Z""%,lMZs1j]cX]U3P4[B^'8Otb6P#+d,k6PQ'/(i#K4^t06Q,YSEK<ngMgilK(b&tO_CagHl[#Ce!WEaj)+""k9pM/bCs6b<rDTf>>3%h,#1iO!$DY\S_Z`#!)l4^QFd8YY*Ykg+:DRa*Wi(,q`]h*WS5(8fm0:.Yokm'GU`CZNpPBP;=Scl\pWtk!3t2pq7iD=qslYH.0&b%o-IicKkCXCEd*E)A=k!N)"<@b%Y,QZ+AQ&&B3G`,<m-]]:Gef#+]7;VV5%GtBEo@*Eil+m^em,VUHs,`e)g'and+/!?Np1t'<R2h%&mH\2i3mV@:Ahm7MfIZZ^ss";WtC"/\Ll&K,]H4r6IH:e_KaY->6d6DPTbP:*4[.CjGY@bn9hhCHGr^9K;Ik:j1c5E$sC(eGuLfY%[HpnZ4B3k]7\Z_'(.5oni$Lan6:"<ir?;/6\Q_[GJn[KoV6qbn]\NEBTbG5tCkGT=WJRJImCT"gl*i>G1h]R7YL'jRjl^u=?TlP]%R:r7o"nK>'2m3G0WfoPSN@$Lo`c9$LX7ug*n$5"[iY<Y7Z^dfDG(6OBiQ/VZh[51NgE2<;)Fm%pGS^]H7,Y$IENHa)#Yg<`MLb@=%=sDI&_%Ue-_2b7?6ideun/N11M19]2g4^btH_3X[RY:='%7W(1dj<NFSliTJ((`BqFh5c*!4rJuTA?/&P%GF&[5;2Tf[adJBgsG:%hT2rhX9.+;+i!TJkBc2L]SJX;!/otVK'T6#pr!nA>]8LFrK8B-V&"Q:NL6r1h2+AsV,T*E>]SAq<c#`ApL&X4MFC%Cq_mpb0(u:[%&t,Upi(mM@?K>h!PI:T\,aD]0`u\l,d*"W\ZpLs']j<[sE%r2AR,V&;W1qc%p.8mor,5D:FEM8g!_,#!)<IXs.E'NJ89C\)KgG@X%XG@Log+h6a;W)DlG'm?Y3iIIY>oX3,0m`^"g.\pW<I@a+$6!jh-p@@aY?1Ol4CJ],U>&%5mt&g_^Fft?R]C2ZFB%8oMrRY=ihN5W%>*Y-mJeiqR\fj<A<jY+dQ%p6GOTAql,<.]?bW##Pm7Jb9rpaXrp5BZ&,n1#S+O&h0mDEjLraC'&A69BE8-)<MkL'RKG)60ma6Lk.%B`J>c"sO2g1etOkZ>:8n9I01YiA!`j^#!d4,_EiR3R'7o6j[X"Jg<k=)7f&%+EUK7+qa>!<G5(-=n[TH)B^7hj,<n7'Z_8VC8r7b%DBY*mJ@:[Ib&U[^J4/KiaE!LK9\+>]"Jmu@JK(N0qVkP3FYt`[2f1+dj"$$l-C_CE4FDYgK7GD_4d9D/VD-t.eoRM+pgs)C8fA@D%5ItK(H\?g+FeC<Ub-br\G3WHs"Z/$6>>eu<5;=5J`PBSS&U05!rC6:k1bou[WPqjONnJjtGqp-VXT#()9=+sri5o6]'@?e=7P]'u%*4Ecdkuh7bcS[*Zcn4X&`CYue([K>?6Zl6s,.CpFq\fi-bjkt]Cm7%bIna.FBYORLXc(RACo=[*4b[F]#k\f4@'5CiJ?KseOIC%@%3nlMp_.M^'$Xqt[pJm`@@O0GDT4LuV_i'n,EfdbNkkY`ophH?aLC*V.4q`c&<em6i:6/'m23f>8KjW(9mme(jCUbd/@5,g=YX\Gt%mp9>pg\Z-"rd-O7YbU>F!SXk3[q5NEKY[X\,m7\KdY4&1Z0KFP,(t>`^4U?@YgsZLpbs7h!`V*<!NC+Dbumgs2e%.9:-D$IC1I^j%r`4)Z:q*8(=036HcuJ.[ko+gFRuL'ZIE^1@Z$+0j0!"Ns&L=:`%m_V\3\B?+KoCqb,Z`s:Da@P@b^>=3d!0+j!S[s1N$qLT_R)AR%@c.e'6=Dc&*GK56rj$cQ'ARcI5`%rTbYQ,]>E%;l.)AQ6)Z*l-\5<O&g)T2$&R!Bm1P]Ba29(iIL<W;E3q7ro%5,0U9P,q=fd``t%B5Puk-0Ll7@9[Pk,YLMIVHGL(4:3]%\/Jpq`SQu>SQ3p03#JekEr>]ti$F=e,\'!YH[mjL!R"It64nsPRXIja.V@l[UBs&h`QZ7]%atjA--]bbF"T-c=5S+m9,Vh3?SB%7T(1_k!f_)Zt;nAHY9S#P`#2':8UU7L$Xt.%_W9^`7@=H,_E4+1[P+1DfTe#)cLTW0M06Cb?%^jJ&Pf=&"G*$uQeOP@&`*lOEh7.^uB2eHE2MaLsdY!Ij*O;/;k4DL<1r]T;&1)Z&:phGhX<Xb^).JN9?M>.^s<C:r:I+38o^DCVZ%0+1jL)P4#2`]VdFHn/B306o3SjgraHGO(d1Hdqn5TqB1P@o[EeJUCqj-g?]f`FO&!0pk.1X9t6u/_@bg=I"ErBs%gVYj0s'UY(8U%6#=kJ_V'POn?0.e/>DWM&26I^:1pIT3QdHfTJu[Qfe+0"jHkX@[J[>012p"-RX9F(Lu,h5)Rl'&\i"67mcdM/!Np_-d]#m]RNTI=%i%u#&$<PnRhW19?=m+POFj@Z^WkF9lH.pPrhgA;8gc!s:=$OG!m^(7+mr.*5rQVg7]Eo*Wl89^1gP_im5KcD[qXj5pIeig:n%\\p%gMP0krqO84onRJbqemOI^:eUAr9bYuIf%+Ig[fmoh3W&0r,VfXYOF3^_?509G'\60B)DVsrjZ7G59/'/3;QPs)%`%m5b*C1j\Ui-%#B*d"mgW`>d"idf!k##9^\d<@R)uJ]+1K#_rUu$Hg-gGG<0W/fGkfm?>9<cr0E/:sDehUZWWEWDX8$t5CVeG"Grt_-+J/udOf4BJ%LIc3fMG[b3oOqq:;E,6mb_8i2U=,6km_=HV*DmQg5,'NnXAgo-<4`bSONFkdCdjnQdX811*B]^*+s+Z8V/!gp#]\osW#\KA$CXH4%e"A2+-R=h;Y3h^4#Y#IcYeuC'Ngks,@)BOPA=I7Z2H]-p3.Pc)$!?3N]Y#-g.kW[W<cR18irXM[qLYqt&V6EeeKpV.O`an/:D/t2%^L[^Zi[:?\"E.QMJO.uJecjLUD.]ptqWT%j_6f<55CN(tQRRCZbjp`k9Ph7ir).A@iMs<ij$JIX9C\9<M).Qqi:f#>oZE6kWFGfO%<8c5hKO_e4<"pF5'aq&ZU8mC.@Rc)#F^saR?YcF!%,TNjI_(G<;8k&1Wt(9i<l/bknkIZXT0RJqcN5W["$oQ\O`u_&FJfBW(ZK,2%dWL3I^TQEFjVNK?<291E!5S3)T=.^IQr[TLSg4_*,n[ScqV8%ARJ:Kb+KI4\e^[%oZO6A6_+r6eT$2;WDB%5?"`"H'RZ"uH&S3su%VhoPYJSZ,kISAjZE=:Sk3!g03KqMH)rbkR`>/Do#rEQT!gVi)\ln0!E2P6pn?PU"mY1D62LlL`^)kL?L,Yj7oSD=fC!r3shK15V(%&f/b1"%$+,*#hJP&h-qXlFI<,&=^MXW[>Y1-<PuQ`gCm^o7XJIZHkf)p.J<IMXOCC5-4;tH!O8r?AM"GNi6t\DBlcFNn7OgEW83o%)#@ncZQ7#rdJX0@Lds(bZUsOtKKDAT)bZRn.[P:6A)9je$j_(s!g3jJ+Ph"?BO%Riof/NUEK?/=Q6l=2#T1OE]%WHiBFC.G;)U6q%NcrfCY6l';9;.HupSa^M&4T%PlIB%IONh4?EN0)n6kgGQgr2[r@LXp8++`/j0<.&?*%:Ro(b-:&$1SjH_[Ak$U=S_iOW!9m^!iQ)%ZCstRYZQTV:)=5&JP^uU<mUK?U+TYE=?5RW/O7!@;uf&.Fc],J1=QVk`bX_'$fnA"j?YpY&iC&+doJ;m`$$l_N@'=cUE"pnMERul%/''tGe=2IBN:&Z;D=*4g$!G:'a'(8()kpB@9_"fZ4.oq7:nQGN6q5uVlrOSqJAU&s(e)j&e@^1[@t/CIJ+^^V7Xfftrs6Z%9p8BD%>j[`:0cumqNu?_AOelCOm[/\S"oi;E8]CU7S-iAoFpq:.@'X"Nm=QkGYGb:8kY!@VrN@AIZ4H*W8.l?.pbhh\(\o*N=Bd\NSq:gQ%+?sL=4QmE*6O)$.@Ph%aM2J]"_DUI"E@2l$`S$!NF1@O%0ZGorTrdW<DHGlqMA^6Vc/>>\"3X.M&0.3j!87!e;[nL9)AfGuTIH7R%'&gF1fY:!+V>4Q"%+TE9`[g<r*?nE#H5R+/bG!;T108WiVJdNm]kr+-7h;bKqMKi/T0E<!bZppHJPCXG+@7f&&gBs=YTO:mkB2Rd%))6H.8I2Z"p<$7e@Z^ic=']@TN`hl_7largQ-=O'2MmHt:;YDiWOBJN=+,M90\0l4Pi'3^Rds]@0<QTc^H#'?e6i1D1EWFtoauUt%b7UgTc=OZbE4.!JY'MpdHU3Q3OYILABITbb;0RGa.1)4MI63rc2rpC5BI/Q/n]`=i2,nq#WH%aJOQbNf'R`%@r2(#BPuU%U745h+%'coSH;<:E[.m07WrVVtCDQ`;Z9_m8^YAJQA6fiu;(_;9rOGDnfjs62]&Fa/V83uSF<bSs:VVc<+0a7StL0squN9SVcr$BWQrq@VW%`QL3eZVT:lXcpi]QK#Lr7FK7(WoAg[9:kUbNH00(%?6UM8]%-$DV&nY-4RpYTS2H17#8'#f0aea,#Lq5q6"[?_l/<67*neR4U<"<%C@IjuUp1:^0&(4dN_SimW[*F,7+^.r6S>9G4T=&Ja!*o4V/Z'HO)7tKj,G42`Ho)hVYa?Yj]VPSoci`8&_%HBKkg8=6C:(3Of5@a%B<=;+,Vf`2=rSWYO2;5q@\M\5:D/t&CQ%hkeIYjE@@!@Qn;<<n+1eFl/i"+P,<M@:n`&!g$MUb]FQ*n!l5ut7+s5>CV9>iC8,%KG%p.B@b*'UQ60IY>KK6<7)"e\A9E&^5i^!`@?WhUPB>fG84q%uA]9HkP7IB9h""On\8f&9_G[ed5C\!kX$<+&kf>](MRl8s#hZJiB#%9]=/Jp2KK"n@Ae&#DK$][PJs)CNdqJ+u$DJHSQ/p?-BC4-tnp5`Hr=t1GZn_L,t/.%iuE.T$$TAC4<A:-6/r,L-31t4RVHlT4ik3%k7t$>V!A,!&RoIP9mRRiP=cOT2Jl?#@ORT5Zq2![Ha-)W718(]7g\T':LW.-h6RBb4Y"O3.di0;']M]m2nABSiRHF)TD#4&C3s2]%H^'\A[JS,@.%f]`Si34f9M.NfdOq$:H7GiBLj>%&P%0CkZEZcR-SsK.A++tme^#$<X^.8U$Z-s)Ra`[t0nlg`V"`C$T<_$S.(9k$%Cf3unRJunSMJP!df%?deAgJNoRr95W^E9@J.PTiQAo8BV1N1^bL:guZhKo6MW_Ie8b<'Q=OtG:I`sf/g0q*c_SV'3:G1X9QM$c.i%Z+'JAP_#r\VpnS(U^C2I"Y'WN<pR3Sa[GNs2UsERZA:D5-pV>>lqQH4BBeSCcSpOY9u)EdHi+c9<e5LuXI=Oj$Xe>#G-P\?0c9#L%Ob*k%aJ%o3IDqfR31<mpnI&?/0'AXnKO?9RK-Vr"cb'O0*hBL;g:GA@N)kFan)Zgk>M]-)Em\$sGCC;S_n_^VMaf0MJ(7!VhFrp`%M]Ft=]IMn!7SdATiZC[SGk%YYej?h68UsOA5LbMkrG[p.Y\+cgqjOhFn-e%ffQJ0^fAa[YRnlfL<%`4Q``$`0a?F@R*4"*SZKKAL%E0^#b?0%fghRL8Sd=o9BbFZFqi]`CF6OT(Q5KDOHKDM/.1X?TG=a1o?e'Dq>pRf4->PBtT:UD182/R3r1!-!:IChq\[i\#2&hca!%MDM8;N.gu"LCYTP8thD?Ya@qI.SFIl6[jDF)g(LN30c$!"F`js-&!J"e'Dq>7k\6.Yl?LDN^&7Qnl[@-JOP4?"f.@/IC=g-ro#-(%#+P*-@Hu7b,^Nr6!'Qo6$A<XH-GH;7p-M)6oVQ--H7H?#>4KtfIYmfj,TQ@%OA'hc?D3[:?U\JN,*\.5rnoQe`j@8*@=[uj>[bkl%i_FsEge1b..r*3P`7297TWYI`3nAYp0lg(!L6InBKg#I"e<YJ:d[[tHH6jjI;sC$pE7c,r,R&Tcn^]9Prn]95S3R[d:;ob^0B4Lm%CA8=e1tm_hQrRk#bfLFZDn="ZHaIWCGP%R!$u6A4\rUaBm0gZEJ\_m+Lp\^)Tp^THG?J!ja:SSdP:O_HEj5m(;q-_GgEMGf4Q$$i%8B3c'_R$K)h0uZrX'YC_YdWLqmNfr;F>'pIdsdQ:gVkiY-]p\gF>lhZjbPo'e$]Xi%#m7Q\Rm]0Iq3^1O&DC;,i#aQYHAF26Zo*s%5&EDu83'FLd1R4@*bVNjcXY<n0d+[(H?.l%F_s)fc'<6u"?m*:5]LUq:d\7&ZY[Tn3Y1K+o@CQqEHeLd3iXKarcVMfHD51$L-F4=%h2Z^B"U6hb(lP]9"S"dpC>gF8#qDCo:.3,N8HL=Hb=c/i-l;)M8=*QY7Hl":3#9icfS.`:IHkq.bp!4RgA'nDMXZSK$SkVc>7cMG%0T5E)YD2Xf#^HZ;HI8FbWp=Blj2D;e?,BZ1Nb&h1<csI]lf`L7A!Le@LL=4^O)G/f<JGp<;ZgS.VAIX4moD3AK<-lHadRkYFgT(U%#1:uQ>YjH(8P@nnd59(ABU=eYF9j\]>?rge960X?U,\-(j<r`p2mZ>c6UCZhbLfCpD9-*hl=nuQjUtIZ9<kLKY7X(>gfSU;Tr7NU%4$.E6OVmoQ6E&BcOt]fCHh7b<((6gZ[8%oAYE!`gQ,<l?EBnkfZUeH2T+7RS50LiK)eU.D)q.ko`(uHFmH'?lm'U-lQ-C`\ZZYUX%f03g*!XjnPZWhJZ@I9(o^MRo=q)"(VFc_.mM+okaF(Lo1EnZI`mn$ZbdFHle07H<DOb@BO@idbuT'c;l&\oODSdKXSO)j``"tp27%g*Bc,-<5$:+fjbjGu@ohX%@nlE/:EXFsg<rX;NV12Mp:i>J9KS/Lsm2Z+s+XZDqN!14t4WU(*gZ];r@Ulfk'%^,d8_3/<9ee]NTb%$q#g<20F%C]dDDe_n=./j]\%)Iat!Ci#DmsXIT\PVEn$::"KqZ54^79XJm0O[sA)^_n'"N036AnhgeYCb;S1N31aZm?:TWk^STF@%#-53glYD<n;U9(u9s!`XlNu/d%G,l"b?6YrjWQ/^&=P,M`i(nIe3u9ZUN*'ad0#>VRbQ$"T=$]m_%#+<hVjY0/Al#)H3jJR(G/6$%=1WMn%s_n+_\31B'2R]qMk3p^92a(W(Jm99IM*\L#iWi?4*k*jXi08_2hcj?D_BgL#\5u52DVpZT)]7^/hUfcg!6(GUu<Wl&bKDa%=bPD,.L'l*:Aq\kOQh#Nk"WI_cueb[kW1\;UO@>>Gb^(:X5ViYj,#ja"!2;<`:jYeY(N@#Y&90aVQ]M^=I\&-V1OmU>N8P$V-3ud%'QTVLEgg&L9PGs]BP3^)^-Y<Z8;1=S8(btuM+e.E\EPSf3gcj!\eEK@"MmamFOIu_T"1tEWFO:\#JVuR6O26$LG3g$e%ln*!H0#G%%@+o-$ls^:d\2<BO-l8*0=S[73#n_l_P;K[6eV&A>W(TDKH"Rb3q'0]-fJr]&C=+VEj@S'r0;&c*\'M1[D8VK-oo1TlLRgR::L">%`Y@o6[(h-(Tc4tNg!]%(3IgX&k;7%j]=aZ\'S[C*95j+XEU+X^_mTPg=Z:ET:#WIMYK(]$*9Mb)%1]`6\<m84p3>e@>/IQVios!.%ReJq$kW+mH0qZVIH$-<e$kAK^)!s]Qb4o5,gC`RDme2CGBm[Cc")`%edJJik.7=$h037'US-D/-Niq1ONla+dgD>W>H<+(jr"+e'%$8(Rh#m#M80thooCn9ThB+&_m*CDgn`r_lJo3F%uFPeTf`3iq7;W,KX12je(UV8`1:VB!Diq8,qCN95t?A</]F2hUS?%3h-\[B'C%35<jQdF@8F3#:1HgK9<]=-"(HBWlM-7MTc._J&a@rUXlHm^+VrS+?+0Z1O&0m+o8<rl).0M=IpcN>"gj$&#!RIrA:\CBo1)McCqa%M!h:/8OVPY09BN'E^1\7!n%MY&kVK,P7K_L0O#WYV/J=Pr-SKoCKZB2`7:AOOSa?tRR<%of.>jJQ958$o,`.iQP@ZirL\_BjZ`t_%g3)qQPk)o#S6T$'Z]V6[;R:#G/CA(]lksJr<[.F%CDA6uJS.LV@FsPAq/@qM\+c!sDPbMTih*s]qYe0VpXM5&oDZ?\?[r++s1NpW%lJ$7I&%qq[p+Hq`J+rs>s8Dn?miT:Dcena7anCoqr"m-CgOK.52uaCMMp/C~>%AI9_PrivateDataEnd